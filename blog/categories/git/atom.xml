<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2018-07-16T09:12:41-07:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    <email><![CDATA[keighty.leonard@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Squash to Speed Up Your Workflow]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/git-squash-to-speed-up-your-workflow/"/>
    <updated>2016-09-12T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/git-squash-to-speed-up-your-workflow</id>
    <content type="html"><![CDATA[<p>I am a big fan of work-in-progress (WIP) commits. When I am working through a prototype or a spike, and need to do some experimentation with the code, I use WIP commits like they are save points in a game. <!--more-->These points act like milestones, and allow me to keep working with the confidence that I can always go back to an earlier working state. I use these aliases for the job:</p>

<p>```bash</p>

<h1>in ~/.bashrc</h1>

<p>$ alias wip=&ldquo;git commit -am &lsquo;WIP&rsquo;&rdquo;
$ alias popwip=&ldquo;git reset &mdash;soft head~1; git reset head .&rdquo;
```</p>

<p>When I get the work into a good state, I <code>wip</code> it (I may even sing ðŸŽ¶ <a href="https://www.youtube.com/watch?v=IIEVqFB4WUo"><em>When a problem comes along&hellip; you must whip it!</em></a> ðŸŽ¶). If I want to grab the last WIP commit from the branch, I <code>popwip</code> to pop the last commit off the stack and put the last bunch of changes back into my working directory.</p>

<p>However, when I have been prototyping for a while, making <code>wip</code> commits as I go, popping a bunch of commits off the stack gets a little unwieldy. Until now I used an interactive rebase to rewrite my branch&rsquo;s commit history. For example:</p>

<p><code>bash
$ git log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
</code>
<img src="/images/160912-git-squash/githist.png"></p>

<p>For this git history, I would rebase on sha 83bfc47:</p>

<p>```bash
$ git rebase -i 83bfc47</p>

<p>pick 540c0fe WIP
pick 8af4cfe WIP
pick 50bd7db WIP
pick f90410b WIP</p>

<h1>Rebase 83bfc47..f90410b onto 83bfc47</h1>

<p>#</p>

<h1>MOAR git-structions below&hellip;</h1>

<p>```</p>

<p>I would proceed to <code>reword</code> the first and <code>fixup</code> the rest, writing a thoughtful and all-encompassing commit message to convey the intention behind this chunk of work. Then I discovered <code>git merge --squash</code></p>

<p>```bash
$ git checkout master
Switched to branch &lsquo;master&rsquo;
Your branch is up-to-date with &lsquo;origin/master&rsquo;.</p>

<p>$ git merge &mdash;squash test_branch
Updating 83bfc47..f90410b
Fast-forward
Squash commit &mdash; not updating HEAD
 routes/performance.js                          | 3 +++
 routes/performer.js                            | 3 +++
 routes/user.js                                 | 2 ++
 src/app.js                                     | 3 +++
 src/components/performance-frame.jsx           | 3 +++
 src/containers/filterable-performance-grid.jsx | 3 +++
 6 files changed, 17 insertions(+)</p>

<p>$ git status
On branch master
Your branch is up-to-date with &lsquo;origin/master&rsquo;.
Changes to be committed:
  (use &ldquo;git reset HEAD <file>&hellip;&rdquo; to unstage)</p>

<pre><code>modified:   routes/performance.js
modified:   routes/performer.js
modified:   routes/user.js
modified:   src/app.js
modified:   src/components/performance-frame.jsx
modified:   src/containers/filterable-performance-grid.jsx
</code></pre>

<p>```</p>

<p>All of the changes I have made on that branch since it diverged from master have been added to the index. I am free to either chunk up the changes into different commits (with commit messages that are more descriptive than WIP), or add them all to a single commit.</p>

<p>GOODBYE <code>rebase -i</code>! <code>Hello merge --squash</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep Your Code Close and Your Notes Closer With a Global Gitignore]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/keeping-your-notes-close-to-the-code/"/>
    <updated>2015-09-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/keeping-your-notes-close-to-the-code</id>
    <content type="html"><![CDATA[<p>I like to keep my notes as close to the code as possible. When I start on a new code base, I create a folder at the top called <code>aa_notes</code>. Super obvious, and it makes an awesome scratch pad for things I don&rsquo;t want to lose. So, how can you do this without checking your folder in to source control? Adding it to a local .gitignore is one strategy, but that change will also need to be checked in to git.</p>

<!--more-->


<p>The answer is to use a global gitgnore.</p>

<p>You can configure a global gitignore file in your home directory that will ignore items in every repo on your machine.</p>

<h3>1. Add a folder to your source control</h3>

<p><img src="/images/150918-keep-your-notes-close/add_note_folder.png"></p>

<h3>2. Create a file and git will suggest to track it</h3>

<p>```
âžœ  virtualplaybill2 git:(master) touch aa_notes/this_is_a_note_file.md
âžœ  virtualplaybill2 git:(master) âœ— git status
On branch master
Your branch is up-to-date with &lsquo;origin/master&rsquo;.
Untracked files:
  (use &ldquo;git add file&hellip;&rdquo; to include in what will be committed)</p>

<pre><code>    aa_notes/
</code></pre>

<p>nothing added to commit but untracked files present (use &ldquo;git add&rdquo; to track)
```</p>

<h3>3. Set up your global gitignore</h3>

<p><code>
âžœ  virtualplaybill2 git:(master) âœ— git config --global core.excludesfile ~/.gitignore_global
âžœ  virtualplaybill2 git:(master) âœ— echo "aa_notes" &gt; ~/.gitignore_global
</code></p>

<h3>4. Git will ignore all folders on your machine named aa_notes</h3>

<p><code>
âžœ  virtualplaybill2 git:(master) âœ— git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
</code></p>

<p>This comes in super handy when you want to make clarifying notes to yourself without sharing them with all of your collaborators. Of course, if they are good things to share, you should probably add them to the project wiki.</p>

<p>I keep things like daily <a href="https://www.safaribooksonline.com/blog/2014/06/26/information-flow/">infobits</a>, backdoor patches, bits of scripts, and other things. Sometimes writing a note about something helps me remember it a little better, so I still keep my own notes, even if the info is already on the wiki.</p>

<p>Checkout <a href="https://help.github.com/articles/ignoring-files/">this post on GitHub</a> for this and more ideas for fine tuning what git ignores.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Git Goodies]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/more-git-goodies/"/>
    <updated>2015-03-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/more-git-goodies</id>
    <content type="html"><![CDATA[<p>Becoming a git expert is essential to efficiency and confidence as a software developer. I have evolved from someone who would re-clone the repo in case of a botched merge to a savvy git handler, through:</p>

<ul>
<li>Moving files between working directory, index, stash, and commit history</li>
<li>Working with multiple remotes with many contributors</li>
<li>Handling changes to forks, branches, and pull requests</li>
<li>Accidental merges from pulling upstream, and checking out pull requests or remote branches</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>My old favourites </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rebase -i &lt;sha&gt; <span class="c"># pick a sha from your git history and start squashing</span>
</span><span class='line'>git clean -f <span class="c"># removes untracked files from your working directory</span>
</span><span class='line'>git stash <span class="c"># save your idea for later</span>
</span><span class='line'>git stash pop <span class="c"># revive your last idea</span>
</span><span class='line'>git reflog <span class="c"># oh my goodness, what did I just do?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>My alii </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Add this to your .bashrc <span class="o">(</span>or .zshrc<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;alias <span class="nv">wip</span><span class="o">=</span>&amp;ldquo;git add .; git commit -m &amp;lsquo;WIP&amp;rsquo;&amp;rdquo;  <span class="c"># saves and commits the current state</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">popwip</span><span class="o">=</span>&amp;ldquo;git reset &amp;mdash;soft head~1; git reset head .&amp;rdquo;  <span class="c"># pops the top commit off the stack&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Add this to your git config&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span><span class="nb">alias</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">hist</span> <span class="o">=</span> log &amp;mdash;pretty<span class="o">=</span>format:<span class="se">\&amp;</span>ldquo;%h %ad | %s%d <span class="o">[</span>%an<span class="o">]</span><span class="se">\&amp;</span>rdquo; &amp;mdash;graph &amp;mdash;date<span class="o">=</span>short&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>git hist <span class="c"># opens a human readable history &amp;mdash; essential for verifying where you are:</span>
</span><span class='line'>* 2ae2be1 2015-03-08 | WIP <span class="o">(</span>HEAD, origin/source, <span class="nb">source</span><span class="o">)</span> <span class="o">[</span>keighty<span class="o">]</span>
</span><span class='line'>* 247f86f 2015-02-16 | Change portfolio subtitle. <span class="o">[</span>keighty<span class="o">]</span>
</span><span class='line'>* e2a4fd0 2015-02-16 | Add facebook and google+ sharing options. <span class="o">[</span>keighty<span class="o">]</span>
</span><span class='line'>* e41ca0a 2015-02-16 | Replace comments in draft and post tasks. <span class="o">[</span>keighty<span class="o">]</span>
</span><span class='line'>&amp;hellip;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Check out a remote branch </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -b &lt;name of the <span class="nb">local </span>branch to create&gt; upstream/&lt;name of the remote branch&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>My new favourites </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout &amp;ndash; <span class="c"># checks out the last branch you were on</span>
</span><span class='line'>git checkout -p <span class="c"># checks out changes in chunks</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I have already shared a few tools that have become so much a part of my tool box, and have developed such a muscle memory that my fingers will perform the tasks as I think them. Every time I pair with another developer I gain another shortcut! Thanks to Vince for those last two&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Giving the Cold Shoulder With Git]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/giving-the-cold-shoulder-with-git/"/>
    <updated>2014-09-08T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/giving-the-cold-shoulder-with-git</id>
    <content type="html"><![CDATA[<p>Some files become unnecessary to track using version control, but still belong in the repository. Compiled assets, for example may require a placeholder for a functional deploy, but don&rsquo;t need to be checked in every time a change is made.</p>

<p>Adding the file to your gitignore is not enough to stop tracking file changes. You must also clear the file from your git cache:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gitignore, this time with spite </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm &amp;mdash;cached <span class="o">[</span>filename<span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m &amp;ldquo;I really mean to ignore this file.&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To untrack everything that has been added to the .gitignore:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>For realz </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm -r &amp;mdash;cached .
</span><span class='line'><span class="nv">$ </span>git commit -a -m &amp;ldquo;I mean it!&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Resources</h3>

<p><a href="http://stackoverflow.com/a/1139797">Here&rsquo;s where I found this gem</a>,
 <a href="http://git-scm.com/docs/gitignore">and here are the docs where I verified it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Remotes]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/multiple-remotes/"/>
    <updated>2014-03-19T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/multiple-remotes</id>
    <content type="html"><![CDATA[<p>Somehow I had worked out in my head that there could be only one remote. Origin. Turns out you can set and push to a (presumably) infinite number of remote repositories <!--more-->:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Checkout your git config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config &mdash;list
</span><span class='line'>push.default=nothing
</span><span class='line'>alias.hist=log &mdash;pretty=format:&ldquo;%h %ad | %s%d [%an]&rdquo; &mdash;graph &mdash;date=short
</span><span class='line'>user.name=Katie Leonard
</span><span class='line'>â€¦
</span><span class='line'>remote.origin.url=git@github.com:keighty/thorfiles.git
</span><span class='line'>remote.origin.fetch=+refs/heads/&lt;em>:refs/remotes/origin/&lt;/em>
</span><span class='line'>branch.master.remote=origin
</span><span class='line'>branch.master.merge=refs/heads/master</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(On a side note, I am not sure I remember putting <code>alias.hist</code> in my git config, but I find it to be wickedly useful.)</p>

<p>Setting a new remote is as easy as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>1 2 3 a b c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote add new_destination git@github.com:otheruser/thorfiles.git</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Standing back to admire the results:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Simple, but does it work? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config &mdash;list
</span><span class='line'>push.default=nothing
</span><span class='line'>alias.hist=log &mdash;pretty=format:&ldquo;%h %ad | %s%d [%an]&rdquo; &mdash;graph &mdash;date=short
</span><span class='line'>user.name=Katie Leonard
</span><span class='line'>â€¦
</span><span class='line'>remote.origin.url=git@github.com:keighty/thorfiles.git
</span><span class='line'>remote.origin.fetch=+refs/heads/&lt;em>:refs/remotes/origin/&lt;/em>
</span><span class='line'>branch.master.remote=origin
</span><span class='line'>branch.master.merge=refs/heads/master
</span><span class='line'>remote.new_destination.url=git@github.com:otheruser/thorfiles.git
</span><span class='line'>remote.new_destination.fetch=+refs/heads/&lt;em>:refs/remotes/new_destination/&lt;/em></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Fast-forward through some excellent and brilliant feature work on <code>my_branch</code>, and I naturally want to save it for posterity:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Chizeled in metal on GitHub servers </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin my_branch
</span><span class='line'>Counting objects: 611, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (263/263), done.
</span><span class='line'>Writing objects: 100% (375/375), 63.40 KiB | 0 bytes/s, done.
</span><span class='line'>Total 375 (delta 280), reused 189 (delta 105)
</span><span class='line'>To git@github.com:keighty/thorfiles.git
</span><span class='line'> * [new branch]      my_branch &ndash;> my_branch</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I can also share it with my friend&rsquo;s repo, presuming I have write access, and knowing full well he will want to use my new feature:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Update your friends! </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push new_destination my_branch
</span><span class='line'>Counting objects: 611, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (263/263), done.
</span><span class='line'>Writing objects: 100% (375/375), 63.40 KiB | 0 bytes/s, done.
</span><span class='line'>Total 375 (delta 280), reused 189 (delta 105)
</span><span class='line'>To git@github.com:otheruser/thorfiles.git
</span><span class='line'> * [new branch]      my_branch &ndash;> my_branch</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Git is so awesome.</p>
]]></content>
  </entry>
  
</feed>
