<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-02-07T11:40:59-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Giving the Cold Shoulder With Git]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/giving-the-cold-shoulder-with-git/"/>
    <updated>2014-09-08T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/giving-the-cold-shoulder-with-git</id>
    <content type="html"><![CDATA[<p>Some files become unnecessary to track using version control, but still belong in the repository. Compiled assets, for example may require a placeholder for a functional deploy, but don&rsquo;t need to be checked in every time a change is made.</p>

<p>Adding the file to your gitignore is not enough to stop tracking file changes. You must also clear the file from your git cache:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gitignore, this time with spite </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm &amp;mdash;cached <span class="o">[</span>filename<span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m &amp;ldquo;I really mean to ignore this file.&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To untrack everything that has been added to the .gitignore:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>For realz </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm -r &amp;mdash;cached .
</span><span class='line'><span class="nv">$ </span>git commit -a -m &amp;ldquo;I mean it!&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Resources</h3>

<p><a href="http://stackoverflow.com/a/1139797">Here&rsquo;s where I found this gem</a>,
 <a href="http://git-scm.com/docs/gitignore">and here are the docs where I verified it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Remotes]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/multiple-remotes/"/>
    <updated>2014-03-19T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/multiple-remotes</id>
    <content type="html"><![CDATA[<p>Somehow I had worked out in my head that there could be only one remote. Origin. Turns out you can set and push to a (presumably) infinite number of remote repositories <!--more-->:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Checkout your git config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config &mdash;list
</span><span class='line'>push.default=nothing
</span><span class='line'>alias.hist=log &mdash;pretty=format:&ldquo;%h %ad | %s%d [%an]&rdquo; &mdash;graph &mdash;date=short
</span><span class='line'>user.name=Katie Leonard
</span><span class='line'>…
</span><span class='line'>remote.origin.url=git@github.com:keighty/thorfiles.git
</span><span class='line'>remote.origin.fetch=+refs/heads/&lt;em>:refs/remotes/origin/&lt;/em>
</span><span class='line'>branch.master.remote=origin
</span><span class='line'>branch.master.merge=refs/heads/master</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(On a side note, I am not sure I remember putting <code>alias.hist</code> in my git config, but I find it to be wickedly useful.)</p>

<p>Setting a new remote is as easy as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>1 2 3 a b c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote add new_destination git@github.com:otheruser/thorfiles.git</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Standing back to admire the results:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Simple, but does it work? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config &mdash;list
</span><span class='line'>push.default=nothing
</span><span class='line'>alias.hist=log &mdash;pretty=format:&ldquo;%h %ad | %s%d [%an]&rdquo; &mdash;graph &mdash;date=short
</span><span class='line'>user.name=Katie Leonard
</span><span class='line'>…
</span><span class='line'>remote.origin.url=git@github.com:keighty/thorfiles.git
</span><span class='line'>remote.origin.fetch=+refs/heads/&lt;em>:refs/remotes/origin/&lt;/em>
</span><span class='line'>branch.master.remote=origin
</span><span class='line'>branch.master.merge=refs/heads/master
</span><span class='line'>remote.new_destination.url=git@github.com:otheruser/thorfiles.git
</span><span class='line'>remote.new_destination.fetch=+refs/heads/&lt;em>:refs/remotes/new_destination/&lt;/em></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Fast-forward through some excellent and brilliant feature work on <code>my_branch</code>, and I naturally want to save it for posterity:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Chizeled in metal on GitHub servers </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin my_branch
</span><span class='line'>Counting objects: 611, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (263/263), done.
</span><span class='line'>Writing objects: 100% (375/375), 63.40 KiB | 0 bytes/s, done.
</span><span class='line'>Total 375 (delta 280), reused 189 (delta 105)
</span><span class='line'>To git@github.com:keighty/thorfiles.git
</span><span class='line'> * [new branch]      my_branch &ndash;> my_branch</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I can also share it with my friend&rsquo;s repo, presuming I have write access, and knowing full well he will want to use my new feature:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Update your friends! </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push new_destination my_branch
</span><span class='line'>Counting objects: 611, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (263/263), done.
</span><span class='line'>Writing objects: 100% (375/375), 63.40 KiB | 0 bytes/s, done.
</span><span class='line'>Total 375 (delta 280), reused 189 (delta 105)
</span><span class='line'>To git@github.com:otheruser/thorfiles.git
</span><span class='line'> * [new branch]      my_branch &ndash;> my_branch</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Git is so awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git, What Have I Done?]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/git-what-have-i-done/"/>
    <updated>2014-03-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/git-what-have-i-done</id>
    <content type="html"><![CDATA[<p>Git, the superhero of version control, allows you to review all the commands that have modified the HEAD tag in a git repo: <code>git reflog</code></p>

<p>The output for one of my demo apps:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Git, you&rsquo;re my hero </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>5075d26 HEAD@<span class="o">{</span>0<span class="o">}</span>: checkout: moving from master to kleonard/add_skyline_background
</span><span class='line'>531c396 HEAD@<span class="o">{</span>1<span class="o">}</span>: pull: fast forward
</span><span class='line'>435f6de HEAD@<span class="o">{</span>2<span class="o">}</span>: commit: Adds logic <span class="k">for </span>running and testing
</span><span class='line'>043e35a HEAD@<span class="o">{</span>3<span class="o">}</span>: commit: Adds logic to process input
</span><span class='line'>5155ba4 HEAD@<span class="o">{</span>4<span class="o">}</span>: commit: Adds input file
</span><span class='line'>a629871 HEAD@<span class="o">{</span>5<span class="o">}</span>: rebase finished: returning to refs/heads/kleonard/create_input_files
</span><span class='line'>a010021 HEAD@<span class="o">{</span>6<span class="o">}</span>: rebase: Add input file
</span><span class='line'>b7cd86a HEAD@<span class="o">{</span>7<span class="o">}</span>: commit: Initial commit arbitrage
</span><span class='line'>5ed00ea HEAD@<span class="o">{</span>8<span class="o">}</span>: commit: Adds launcher
</span><span class='line'>7b2d720 HEAD@<span class="o">{</span>9<span class="o">}</span>: commit: Adds logic to find smallest number of moves
</span><span class='line'>9c0dfce HEAD@<span class="o">{</span>10<span class="o">}</span>: commit: Adds implementation <span class="k">for </span>bin creation
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Hmmm&hellip; looks like my commit messages need a little work&hellip; Still, it is a great tool for catching up on the changes to a repo (especially if you haven&rsquo;t touched it in a while), finding out where the bulk of the work is happening, or just reminding yourself what you did yesterday.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Afraid of Commitment]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/afraid-of-commitment/"/>
    <updated>2014-02-04T08:04:27-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/afraid-of-commitment</id>
    <content type="html"><![CDATA[<h3>or, how to not fubar your git history</h3>

<p>As with all the git lessons I have learned, this one started with a huge mistake. I had merged a commit to master that was breaking pages I didn&rsquo;t know existed. The sage developer sitting on my right shoulder told me that since I was unsure of how to fix the problem I should revert the offending commit forthwith. <!--more--></p>

<p>I had two choices of commit to revert:</p>

<ol>
<li>remove the offending commit from the branch history</li>
<li>remove the merge commit, where the broken code had infiltrated master</li>
</ol>


<p>While the former is like a surgical excision of a moment in history (eternal sunshine of a spotless git history?), the latter will preserve your branch history, and the context surrounding the changes made. I like a lot of context, so I chose to revert the merge commit.</p>

<p>When you undo a merge, git doesn&rsquo;t know how to reassign the branches. Was the left one master? The right? Does git know left from right? Who is on first? Take the guesswork out of the equation</p>

<p><code>bash
$ git checkout -b revert_branch_name
$ git revert -m 1 &lt;SHA of commit to be reverted&gt;
</code></p>

<p>Warning: If you don’t make the new branch first, you will mess up your merge history on master. Trust me. Just make the branch first. Now you can ensure that your test suite will pass with the commit reverted before you do something silly, like merge even more breakage into master. Crisis averted.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Add -p]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/git-add-p/"/>
    <updated>2014-02-01T20:51:09-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/git-add-p</id>
    <content type="html"><![CDATA[<p>I learned a new tool that has quickly become an essential part of my workflow. <code>git add -p</code><!--more--> lets you add small hunks of modified code to the index from your working tree in order to prepare your next commit.</p>

<p>The best refactors are small atomic changes, and while I may not always work incrementally, I still want my git history to reflect the ideal. I use <code>git add -p</code> before every commit to ensure that each code change is intentional.</p>

<p>``` bash An example from my latest test project.
$ git add -p
diff &mdash;git a/send.rb b/send.rb
index 5e89eaf..a0f25b6 100644
&mdash;&ndash; a/send.rb
+++ b/send.rb
@@ -17,5 +17,5 @@ queue = channel.queue(&ldquo;hello&rdquo;)
 channel.default_exchange.publish(&ldquo;Hello world!&rdquo;, :routing_key => q.name)
 puts &ldquo; [x] Sent &lsquo;Hello World!&rsquo;&rdquo;</p>

<p>&ndash;# close the connection
-conn.close
\ No newline at end of file
+#close the connection
+connection.close
Stage this hunk [y,n,q,a,d,/,e,?]?
```</p>

<p>Woah &mdash; that is a lot of information&hellip; lets go through by the numbers:</p>

<ol>
<li>the initial command</li>
<li>tells me that it is showing the changes made in the send.rb file. &lsquo;a&rsquo; is the version already in the commit history, and &lsquo;b&rsquo; is the copy in the working directory.</li>
<li>shows the commit SHA range for this branch</li>
<li>tells me that lines marked with a &lsquo;&ndash;&rsquo; are from the committed version of send.rb</li>
<li>tells me that lines marked with a &lsquo;+&rsquo; are from the working directory version of send.rb</li>
<li><code>@@ -17,5 +17,5 @@</code> indicates that the hunk under scrutiny begins at line 17 of the committed version (&lsquo;-17&rsquo;) and affects 5 lines. It corresponds to the working directory version starting at line 17 (&lsquo;+17&rsquo;), also affecting 5 lines.</li>
<li>the remaining lines contain the details of the changes in the hunk.</li>
</ol>


<h3>Know your options</h3>

<p>Now that you have a hunk, what can you do with it?</p>

<p><code>bash Type '?' to learn what you can do with your hunk
...
Stage this hunk [y,n,q,a,d,/,e,?] ?
y - stage this hunk
n - do not stage this hunk
q - quit, do not stage this hunk nor any of the remaining ones
a - stage this and all the remaining hunks in the file
d - do not stage this hunk nor any of the remaining hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
</code></p>

<p>The first few options are obvious choices &mdash; <code>y</code> (&ldquo;Yes, please!&rdquo;), and <code>n</code> (&ldquo;What was I thinking there?&rdquo;), as well as <code>q</code> (&ldquo;Hey, Jane! Get me off this crazy thing!&rdquo;).</p>

<p>I haven&rsquo;t quite got a handle on the middle options, but I have skimmed down and used <code>s</code> to split the hunk into smaller pieces. Split will only divide a hunk if there is a logical place for separation, like a gap between changes. For real index-finesse and line-by-line control you have to&hellip; edit the hunk (gasp).</p>

<p>Seasoned veterans may blanch at the thought of editing a hunk without a GUI, but I have discovered the secret to command-line-hunk-editing-prowess. The secret is:</p>

<h2>Read the instructions</h2>

<p>Revisiting the earlier example, I choose <code>e</code> to edit my hunk. I think the original comment on line 10 is better than the new one on line 13 (spacy == better). Selecting <code>e</code> opens your editor of choice with the now familiar hunk, along with&hellip;</p>

<p>Lo, and behold! Instructions after the hunk!</p>

<p><img src="/images/addp-hunk-edit_diff-8.png"></p>

<p>Simple enough:</p>

<ul>
<li><code>-# close the connection</code> becomes <code># close the connection</code> &mdash; mind the space!</li>
<li>remove <code>+#close the connection</code> entirely</li>
<li>save and close.</li>
</ul>


<p>Success? If you have done everything right, the hunk will be staged and git will move on to the next hunk in your working directory. If you have made an error you will see the following message:</p>

<p><code>
Your edited hunk does not apply.
Edit again (saying "no" discards!) [y/n]?
</code></p>

<p>Aw nuts. <code>y</code> will let you amend your transgressions (did you remember to save? did you forget to leave a space in place of the &lsquo;&ndash;&rsquo;?), and <code>n</code> will abandon your changes and take you back to the drawing board, where you are free to transgress anew.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
</feed>
