<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2016-03-30T22:16:20-07:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    <email><![CDATA[keighty.leonard@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keep Your Code Close and Your Notes Closer With a Global Gitignore]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/keeping-your-notes-close-to-the-code/"/>
    <updated>2015-09-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/keeping-your-notes-close-to-the-code</id>
    <content type="html"><![CDATA[<p>I like to keep my notes as close to the code as possible. When I start on a new code base, I create a folder at the top called <code>aa_notes</code>. Super obvious, and it makes an awesome scratch pad for things I don&rsquo;t want to lose. So, how can you do this without checking your folder in to source control? Adding it to a local .gitignore is one strategy, but that change will also need to be checked in to git.</p>

<!--more-->


<p>The answer is to use a global gitgnore.</p>

<p>You can configure a global gitignore file in your home directory that will ignore items in every repo on your machine.</p>

<h3>1. Add a folder to your source control</h3>

<p><img src="/images/150918-keep-your-notes-close/add_note_folder.png"></p>

<h3>2. Create a file and git will suggest to track it</h3>

<p>```
➜  virtualplaybill2 git:(master) touch aa_notes/this_is_a_note_file.md
➜  virtualplaybill2 git:(master) ✗ git status
On branch master
Your branch is up-to-date with &lsquo;origin/master&rsquo;.
Untracked files:
  (use &ldquo;git add file&hellip;&rdquo; to include in what will be committed)</p>

<pre><code>    aa_notes/
</code></pre>

<p>nothing added to commit but untracked files present (use &ldquo;git add&rdquo; to track)
```</p>

<h3>3. Set up your global gitignore</h3>

<p><code>
➜  virtualplaybill2 git:(master) ✗ git config --global core.excludesfile ~/.gitignore_global
➜  virtualplaybill2 git:(master) ✗ echo "aa_notes" &gt; ~/.gitignore_global
</code></p>

<h3>4. Git will ignore all folders on your machine named aa_notes</h3>

<p><code>
➜  virtualplaybill2 git:(master) ✗ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
</code></p>

<p>This comes in super handy when you want to make clarifying notes to yourself without sharing them with all of your collaborators. Of course, if they are good things to share, you should probably add them to the project wiki.</p>

<p>I keep things like daily <a href="https://www.safaribooksonline.com/blog/2014/06/26/information-flow/">infobits</a>, backdoor patches, bits of scripts, and other things. Sometimes writing a note about something helps me remember it a little better, so I still keep my own notes, even if the info is already on the wiki.</p>

<p>Checkout <a href="https://help.github.com/articles/ignoring-files/">this post on GitHub</a> for this and more ideas for fine tuning what git ignores.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Git Goodies]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/more-git-goodies/"/>
    <updated>2015-03-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/more-git-goodies</id>
    <content type="html"><![CDATA[<p>Becoming a git expert is essential to efficiency and confidence as a software developer. I have evolved from someone who would re-clone the repo in case of a botched merge to a savvy git handler, through:</p>

<ul>
<li>Moving files between working directory, index, stash, and commit history</li>
<li>Working with multiple remotes with many contributors</li>
<li>Handling changes to forks, branches, and pull requests</li>
<li>Accidental merges from pulling upstream, and checking out pull requests or remote branches</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>My old favourites </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rebase -i &lt;sha&gt; <span class="c"># pick a sha from your git history and start squashing</span>
</span><span class='line'>git clean -f <span class="c"># removes untracked files from your working directory</span>
</span><span class='line'>git stash <span class="c"># save your idea for later</span>
</span><span class='line'>git stash pop <span class="c"># revive your last idea</span>
</span><span class='line'>git reflog <span class="c"># oh my goodness, what did I just do?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>My alii </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Add this to your .bashrc <span class="o">(</span>or .zshrc<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;alias <span class="nv">wip</span><span class="o">=</span>&amp;ldquo;git add .; git commit -m &amp;lsquo;WIP&amp;rsquo;&amp;rdquo;  <span class="c"># saves and commits the current state</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">popwip</span><span class="o">=</span>&amp;ldquo;git reset &amp;mdash;soft head~1; git reset head .&amp;rdquo;  <span class="c"># pops the top commit off the stack&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Add this to your git config&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span><span class="nb">alias</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">hist</span> <span class="o">=</span> log &amp;mdash;pretty<span class="o">=</span>format:<span class="se">\&amp;</span>ldquo;%h %ad | %s%d <span class="o">[</span>%an<span class="o">]</span><span class="se">\&amp;</span>rdquo; &amp;mdash;graph &amp;mdash;date<span class="o">=</span>short&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>git hist <span class="c"># opens a human readable history &amp;mdash; essential for verifying where you are:</span>
</span><span class='line'>* 2ae2be1 2015-03-08 | WIP <span class="o">(</span>HEAD, origin/source, <span class="nb">source</span><span class="o">)</span> <span class="o">[</span>keighty<span class="o">]</span>
</span><span class='line'>* 247f86f 2015-02-16 | Change portfolio subtitle. <span class="o">[</span>keighty<span class="o">]</span>
</span><span class='line'>* e2a4fd0 2015-02-16 | Add facebook and google+ sharing options. <span class="o">[</span>keighty<span class="o">]</span>
</span><span class='line'>* e41ca0a 2015-02-16 | Replace comments in draft and post tasks. <span class="o">[</span>keighty<span class="o">]</span>
</span><span class='line'>&amp;hellip;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Check out a remote branch </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -b &lt;name of the <span class="nb">local </span>branch to create&gt; upstream/&lt;name of the remote branch&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>My new favourites </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout &amp;ndash; <span class="c"># checks out the last branch you were on</span>
</span><span class='line'>git checkout -p <span class="c"># checks out changes in chunks</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I have already shared a few tools that have become so much a part of my tool box, and have developed such a muscle memory that my fingers will perform the tasks as I think them. Every time I pair with another developer I gain another shortcut! Thanks to Vince for those last two&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Giving the Cold Shoulder With Git]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/giving-the-cold-shoulder-with-git/"/>
    <updated>2014-09-08T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/giving-the-cold-shoulder-with-git</id>
    <content type="html"><![CDATA[<p>Some files become unnecessary to track using version control, but still belong in the repository. Compiled assets, for example may require a placeholder for a functional deploy, but don&rsquo;t need to be checked in every time a change is made.</p>

<p>Adding the file to your gitignore is not enough to stop tracking file changes. You must also clear the file from your git cache:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gitignore, this time with spite </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm &amp;mdash;cached <span class="o">[</span>filename<span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m &amp;ldquo;I really mean to ignore this file.&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To untrack everything that has been added to the .gitignore:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>For realz </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm -r &amp;mdash;cached .
</span><span class='line'><span class="nv">$ </span>git commit -a -m &amp;ldquo;I mean it!&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Resources</h3>

<p><a href="http://stackoverflow.com/a/1139797">Here&rsquo;s where I found this gem</a>,
 <a href="http://git-scm.com/docs/gitignore">and here are the docs where I verified it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Remotes]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/multiple-remotes/"/>
    <updated>2014-03-19T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/multiple-remotes</id>
    <content type="html"><![CDATA[<p>Somehow I had worked out in my head that there could be only one remote. Origin. Turns out you can set and push to a (presumably) infinite number of remote repositories <!--more-->:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Checkout your git config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config &mdash;list
</span><span class='line'>push.default=nothing
</span><span class='line'>alias.hist=log &mdash;pretty=format:&ldquo;%h %ad | %s%d [%an]&rdquo; &mdash;graph &mdash;date=short
</span><span class='line'>user.name=Katie Leonard
</span><span class='line'>…
</span><span class='line'>remote.origin.url=git@github.com:keighty/thorfiles.git
</span><span class='line'>remote.origin.fetch=+refs/heads/&lt;em>:refs/remotes/origin/&lt;/em>
</span><span class='line'>branch.master.remote=origin
</span><span class='line'>branch.master.merge=refs/heads/master</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(On a side note, I am not sure I remember putting <code>alias.hist</code> in my git config, but I find it to be wickedly useful.)</p>

<p>Setting a new remote is as easy as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>1 2 3 a b c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote add new_destination git@github.com:otheruser/thorfiles.git</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Standing back to admire the results:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Simple, but does it work? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config &mdash;list
</span><span class='line'>push.default=nothing
</span><span class='line'>alias.hist=log &mdash;pretty=format:&ldquo;%h %ad | %s%d [%an]&rdquo; &mdash;graph &mdash;date=short
</span><span class='line'>user.name=Katie Leonard
</span><span class='line'>…
</span><span class='line'>remote.origin.url=git@github.com:keighty/thorfiles.git
</span><span class='line'>remote.origin.fetch=+refs/heads/&lt;em>:refs/remotes/origin/&lt;/em>
</span><span class='line'>branch.master.remote=origin
</span><span class='line'>branch.master.merge=refs/heads/master
</span><span class='line'>remote.new_destination.url=git@github.com:otheruser/thorfiles.git
</span><span class='line'>remote.new_destination.fetch=+refs/heads/&lt;em>:refs/remotes/new_destination/&lt;/em></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Fast-forward through some excellent and brilliant feature work on <code>my_branch</code>, and I naturally want to save it for posterity:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Chizeled in metal on GitHub servers </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin my_branch
</span><span class='line'>Counting objects: 611, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (263/263), done.
</span><span class='line'>Writing objects: 100% (375/375), 63.40 KiB | 0 bytes/s, done.
</span><span class='line'>Total 375 (delta 280), reused 189 (delta 105)
</span><span class='line'>To git@github.com:keighty/thorfiles.git
</span><span class='line'> * [new branch]      my_branch &ndash;> my_branch</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I can also share it with my friend&rsquo;s repo, presuming I have write access, and knowing full well he will want to use my new feature:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Update your friends! </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push new_destination my_branch
</span><span class='line'>Counting objects: 611, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (263/263), done.
</span><span class='line'>Writing objects: 100% (375/375), 63.40 KiB | 0 bytes/s, done.
</span><span class='line'>Total 375 (delta 280), reused 189 (delta 105)
</span><span class='line'>To git@github.com:otheruser/thorfiles.git
</span><span class='line'> * [new branch]      my_branch &ndash;> my_branch</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Git is so awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git, What Have I Done?]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/git-what-have-i-done/"/>
    <updated>2014-03-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/git-what-have-i-done</id>
    <content type="html"><![CDATA[<p>Git, the superhero of version control, allows you to review all the commands that have modified the HEAD tag in a git repo: <code>git reflog</code></p>

<p>The output for one of my demo apps:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Git, you&rsquo;re my hero </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>5075d26 HEAD@<span class="o">{</span>0<span class="o">}</span>: checkout: moving from master to kleonard/add_skyline_background
</span><span class='line'>531c396 HEAD@<span class="o">{</span>1<span class="o">}</span>: pull: fast forward
</span><span class='line'>435f6de HEAD@<span class="o">{</span>2<span class="o">}</span>: commit: Adds logic <span class="k">for </span>running and testing
</span><span class='line'>043e35a HEAD@<span class="o">{</span>3<span class="o">}</span>: commit: Adds logic to process input
</span><span class='line'>5155ba4 HEAD@<span class="o">{</span>4<span class="o">}</span>: commit: Adds input file
</span><span class='line'>a629871 HEAD@<span class="o">{</span>5<span class="o">}</span>: rebase finished: returning to refs/heads/kleonard/create_input_files
</span><span class='line'>a010021 HEAD@<span class="o">{</span>6<span class="o">}</span>: rebase: Add input file
</span><span class='line'>b7cd86a HEAD@<span class="o">{</span>7<span class="o">}</span>: commit: Initial commit arbitrage
</span><span class='line'>5ed00ea HEAD@<span class="o">{</span>8<span class="o">}</span>: commit: Adds launcher
</span><span class='line'>7b2d720 HEAD@<span class="o">{</span>9<span class="o">}</span>: commit: Adds logic to find smallest number of moves
</span><span class='line'>9c0dfce HEAD@<span class="o">{</span>10<span class="o">}</span>: commit: Adds implementation <span class="k">for </span>bin creation
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Hmmm&hellip; looks like my commit messages need a little work&hellip; Still, it is a great tool for catching up on the changes to a repo (especially if you haven&rsquo;t touched it in a while), finding out where the bulk of the work is happening, or just reminding yourself what you did yesterday.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
</feed>
