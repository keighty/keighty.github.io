<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Message Queue | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/message-queue/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-01-20T07:40:43-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fanout]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/fanout/"/>
    <updated>2014-02-06T14:38:12-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/fanout</id>
    <content type="html"><![CDATA[<p>Continuing my exploration of message queues&hellip;</p>

<p>A common MQ modality is publish/subscribe. A simplistic queue model has producers publishing messages directly to a queue and consumers taking messages off a queue. In the publish/subscribe model, the producer sends messages to an <strong>exchange</strong>, who&rsquo;s only job is to publish messages to queues. In this scenario, the exchange knows to which queue(s) the message should be published according to established rules. The relationship between an exchange and a queue is called a <strong>binding</strong>.</p>

<!--more-->


<h3>Types of exchanges</h3>

<ol>
<li><strong>direct</strong></li>
<li><strong>topic</strong></li>
<li><strong>headers</strong></li>
<li><strong>fanout</strong> &ndash; broadcasts every message it receives to all the queues it knows</li>
</ol>


<h3>Create a fanout exchange:</h3>

<p>{% codeblock lang:ruby emit_log.rb %}</p>

<h1>create and start the connection</h1>

<p>connection = Bunny.new()
connection.start</p>

<h1>create and start the channel</h1>

<p>channel = connection.create_channel</p>

<h1>create the exchange:</h1>

<p>exchange = channel.fanout(&lsquo;logs&rsquo;)</p>

<h1>publish to your named exchange:</h1>

<p>exchange.publish(msg)</p>

<h1>close the connection</h1>

<p>connection.close
{% endcodeblock %}</p>

<h3>Create a fanout worker</h3>

<p>{% codeblock lang:ruby receive_log.rb %}</p>

<h1>create and start the connection</h1>

<p>connection = Bunny.new()
conn.start</p>

<h1>create and start the channel</h1>

<p>channel  = connection.create_channel</p>

<h1>name the exchange to listen to</h1>

<p>exchange = ch.fanout(&ldquo;logs&rdquo;)</p>

<h1>name the queue</h1>

<p>q = ch.queue(&ldquo;&rdquo;, :exclusive => true)</p>

<h1>bind the queue to the exchange</h1>

<p>q.bind(exchange)</p>

<h1>subscribe to the bound queue</h1>

<p>q.subscribe(:block => true) do |delivery_info, properties, body|
  puts &ldquo; [x] #{body}&rdquo;
end
{% endcodeblock %}</p>

<h3>In action</h3>

<p>Start three terminals:</p>

<ol>
<li><code>$ ruby -rubygems receive_logs.rb &gt; logs_from_rabbit.log</code></li>
<li><code>$ ruby -rubygems receive_logs.rb</code></li>
<li><code>$ ruby -rubygems emit_log.rb</code></li>
</ol>


<p>In the last terminal, add a few more messages:</p>

<p><code>
$ ruby -rubygems emit_log.rb this is a longer message
$ ruby -rubygems emit_log.rb this message should be logged in a file AND appear in my terminal window
</code></p>

<p>The output in terminal 2:</p>

<p><code>
$ ruby -rubygems receive_logs.rb
 [*] Waiting for logs. To exit press CTRL+C
 [x] Hello World!
 [x] this is a longer message
 [x] this message should be logged in a file AND appear in my terminal
</code></p>

<p>The output from the log file:</p>

<p><code>
$ cat logs_from_rabbit.log
 [*] Waiting for logs. To exit press CTRL+C
 [x] Hello World!
 [x] this is a longer message
 [x] this message should be logged in a file AND appear in my terminal
</code></p>

<h2>Resources</h2>

<ul>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-three-ruby.html">RabbitMQ.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First in, First Out]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/first-in-first-out/"/>
    <updated>2014-02-05T11:14:30-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/first-in-first-out</id>
    <content type="html"><![CDATA[<h3>Why use message queues?</h3>

<p>Message queues offer the benefits of high reliability at the cost of performance. This is particularly useful for web tasks that may take longer than the typical HTTP request. Requests are persisted, acknowledged, and confirmed asynchronously. They are not dropped or timed out, no matter how long they take to process.</p>

<!--more-->


<h3>Asynchronous request processing with RabbitMQ</h3>

<p>A program that sends messages is a <strong>producer</strong>. A producer drops a message onto a <strong>queue</strong> (like a mailbox). A <strong>consumer</strong> is a program that mostly waits to receive messages, and processes them when they arrive.</p>

<p>RabbitMQ provides message acknowledgments. An ack(nowledgement) is sent back from the consumer to tell the queue that a particular message has been received and processed, and that the queue is free to delete it</p>

<h3>Lets be fair</h3>

<p>By default, RabbitMQ will dispatch messages equitably to all workers, and will not check first to see if the worker is already busy. You can ask the queue to only send messages to a worker if it is available to process a message.</p>

<p>Use <code>channel.prefetch(1)</code> to prevent dispatching a new message to a worker until it has processed and acknowledged the previous one. Instead, RabbitMQ will dispatch it to the next worker that is not still busy. One possible ramification of prefetching is that the queue can become backed up if all workers are busy with long processes, so watch your queue length!</p>

<h3>Useful Commands</h3>

<ul>
<li>list active queues: <code>sudo rabbitmqctl list_queues</code></li>
<li>list queues along with unacknowledged messages: <code>sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</code></li>
</ul>


<h3>Resources</h3>

<ul>
<li><a href="http://www.amazon.com/gp/product/B00HNG8ZFQ/ref=kinw_myk_ro_title">Queue based system architecture</a></li>
<li><a href="http://manning.com/videla/">RabbitMQ in Action: Distributed messaging for everyone</a></li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-one-ruby.html">RabbitMQ.com</a></li>
<li><a href="http://www.rabbitmq.com/install-debian.html">Installation</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
