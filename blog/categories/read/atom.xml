<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Read | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/read/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-04-16T07:53:30-07:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bird by Bird]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/bird-by-bird/"/>
    <updated>2015-03-01T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/bird-by-bird</id>
    <content type="html"><![CDATA[<p>Virtue is its own reward, and so is writing. Anne Lamott&rsquo;s <a href="http://www.amazon.com/Bird-Some-Instructions-Writing-Life/dp/0385480016/ref=sr_1_1?ie=UTF8&amp;qid=1425241344&amp;sr=8-1&amp;keywords=bird+by+bird">Bird by Bird: Some Instructions on Writing and Life</a> is full of beautiful prose, characters, and personal anecdotes, and while her advice is tuned to the creative writer, there are three useful lessons that can be applied to all writing.</p>

<ol>
<li>write short assignments</li>
<li>write only what you can see through a 1-inch picture frame</li>
<li>write a terrible first draft</li>
</ol>


<p>Blogging about what I am learning and reading forces me to think about what I experience. Almost every day I learn another 1-inch picture frame of programming, and writing it down helps me understand it better. My ugly first drafts usually consist of a question, a few links to resources, and some console output &mdash; not Pulitzer Prize winning prose, but an awesome personal resource and record of growth.</p>

<blockquote><p>All you can give us is what life is about from your point of view. You are not going to be able to give us the plans to the submarine. Life is not a submarine. There are no plans.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everybody Writes (and Why You Should Blog)]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/everybody-writes/"/>
    <updated>2015-02-16T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/everybody-writes</id>
    <content type="html"><![CDATA[<p>In <em>Everybody Writes</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, Ann Handley teaches content marketers how to generate &ldquo;ridiculously good&rdquo; content. Anyone who has recently enjoyed the pain of the job hunt will notice that much of the advice can be adapted to self-marketing. In my recent code school experience, developing an online presence was as important as learning web development, and since it is hard to market yourself as a web developer without developing anything for the web, a blog is a great place to start. You have picked a career where your ability to learn is one of your most marketable skills, as well as your ability to communicate &mdash; both of which you can showcase in your blog. You don&rsquo;t have to worry about having something original to say: treat it as an opportunity to organize your thoughts and to teach a beginner what you know. Handley gives great advice for people learning to blog and how to generally optimize your online presence &mdash; both are great ways to market yourself as a fresh code-school alum.</p>

<!--more-->


<h3>Show up</h3>

<p>Write early, write often. If something is new to you, it will likely be new to someone else as well. The more writing practice you get, the easier it becomes &mdash; &ldquo;writing is a habit, not an art&rdquo;, and you can&rsquo;t help but improve in an art that you practice every day. Handley recommends starting with the ugly first draft<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> &mdash; make it ugly, don&rsquo;t delete anything, don&rsquo;t rephrase or reread. Just get it out of you and on to your screen, then walk away for a day. Maybe two. If you are really stuck on how to begin, you could start with &ldquo;Dear diary&rdquo;<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. This helps you get in the mood to write, and keeps your tone conversational. Also, if you are writing to a non-technical person, it will keep your writing clear, and inspire you to give enough back story so that they aren&rsquo;t lost.</p>

<h3>Write a tight post</h3>

<h4>Decide on a goal</h4>

<p>Is it to teach? To share? To critique? The goal for technical blogs is not usually to obtain a following &mdash; it is to share a bit of experience that will turn up when another frustrated developer puts keywords into a search engine. An online presence is important, but it should not be a blow by blow of how hard it is to learn to code. A handy formula for creating quality content is:</p>

<blockquote><p>Utility * Inspiration * Empathy = Quality Content<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p></blockquote>

<p>Make it useful, make it reader centric (even if that reader is you six months from now), and make it thoughtful.</p>

<h4>Forget the 5 paragraph essay format from high school</h4>

<p>I rarely read a long blog post from beginning to end, and the sweet spot for length is around 1500 words<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. Make it easy for the reader to get the gist of your post by providing sub-headings, bold text, and code samples &mdash; these are strong visual elements that can help your reader anchor what they are learning.</p>

<h4>Rewrite</h4>

<p>Once you have written the ugly first draft with your goal in mind, rewrite it with the reader in mind &mdash; will they understand the context of what you are trying to get across? Assume the reader knows nothing, but isn’t stupid. Find data and examples that illustrate what you are trying to share (and make sure that you give credit where credit is due<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>).</p>

<h4>Work on your grammar</h4>

<p>After reframing, examine your sentence structure. Are you using a passive voice? Microsoft Word grammar check hates the passive voice, but I never knew what that meant. Try <a href="https://www.grammarly.com/">grammarly</a> if you need help, and even if you think you don&rsquo;t. Editing your own work is hard, because your brain will fill in all the things you meant to say but didn&rsquo;t. Also, put the important words at the start of the sentence, just in case the reader dozes off half-way through.</p>

<h3>About Me pages</h3>

<p>Be intentional about the words that describe you in your About Me page<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>. Describe your accomplishments with examples, and if possible, try to mirror the language used by the companies you want to work for. Check out the keywords they use, and make sure to encorporate them in your headlines and personal summary.</p>

<blockquote><p>About us pages aren’t really about the company; instead they focus on relaying who they are <em>in relation to the visitor</em>.</p></blockquote>

<p>If your reader is an employer, let them know you are for hire &mdash; your posts should always be in the context of what you can do for the reader.</p>

<p>Showing up can be the hardest thing &mdash; finding something original to say, or fearing a public mistake is what keeps many people from writing, but blogging shows you are interested in, well, something. Being interesting means being interested in things, and wanting to share the things you find interesting is a natural follow through. Given the right mentorship, your technical abilities will grow, but getting in the door is step one. So, if you are looking to update your web presence, or create a web presence, this book is for you.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Handley, A. (2014). <a href="http://www.amazon.com/Everybody-Writes-Go--Creating-Ridiculously-ebook/dp/B00LMB5P0G/ref=sr_1_1?ie=UTF8&amp;qid=1424115248&amp;sr=8-1&amp;keywords=everybody+writes"><em>Everybody Writes : Your Go-To Guide to Creating Ridiculously Good Content</em></a>. Wiley &amp; Sons Canada, Limited, John.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Tip 9: &ldquo;Embrace the Ugly First Draft&rdquo;, p. 41.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Tip 14: &ldquo;Start with <em>Dear Mom&hellip;</em>&rdquo;, p. 54.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>&ldquo;Introduction&rdquo;, p. 7.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Tip 60: &ldquo;The Ideal Length for Blog Posts, Podcast, Facebook Posts, Tweets, and Other Marketing Content&rdquo;, p. 184.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>Tip 57: &ldquo;Seek Permission, Not Forgiveness&rdquo;, p. 170.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>Tip 71: &ldquo;Writing the About Us Page&rdquo;, p 244.<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our Healthcare System Is a Legacy Application]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/healthcare-is-a-legacy-application/"/>
    <updated>2015-01-20T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/healthcare-is-a-legacy-application</id>
    <content type="html"><![CDATA[<p>One of my favourite blogs is <a href="http://www.brainpickings.org">Brain Pickings</a>, written by Maria Popova, which is a collection of thoughts spanning art, science, psychology, and almost every other subject I read voraciously. Recently I stumbled upon <a href="http://www.brainpickings.org/2014/09/17/sherwin-nuland-how-we-die/">this gem</a>, Sherwin B. Nuland&rsquo;s <a href="http://www.amazon.com/How-We-Die-Sherwin-Nuland-ebook/dp/B004CJ8QCE"><em>How We Die</em></a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. It is a raw look at the biological processes that occur at the end of life, which resonated with me on many levels.</p>

<!--more-->


<p>The biologist within was fascinated by Nuland&rsquo;s ability to reduce the &ldquo;ten thousand several doors for men to take their exits&rdquo;<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> to the same basic process of poor oxygenation and nutrition of vital tissues resulting in organ failure. Whether the process is long or slow, instigated by heart disease, Alzheimer&rsquo;s disease, AIDS, accident, or old age, the end must come when the heart stops nourishing the brain.</p>

<p>As a Clinical Professor of Surgery at Yale University, Nuland became intimate with death and its increasingly dehumanizing circumstances. Life’s final chapter has become invisible to most of us. It is likely to be carried out in an intensive care unit, the person reduced to data on a screen, and the advancing disease perceived as a failure of management rather than a natural and inevitable process. He shares the lessons he learned about providing true patient care rather than solving a biological riddle (sometimes the best patient care is no care at all).</p>

<p>Most importantly, he calls attention to the deplorable state of healthcare today, where the &ldquo;provider&rdquo; has usurped the role of the physician:</p>

<blockquote><p>[Our] present system of in-hospital care&hellip; has simply accreted by the constant piling on or insinuation of patches of not necessarily compatible structure to an edifice already jerry-built of competing needs.</p></blockquote>

<p>Sounds remarkably like a long-lived legacy application that is impossibly complex and difficult to work in. The healthcare system is in need of a great refactoring, which isn&rsquo;t without precedent (read about Abraham Flexner&rsquo;s report <a href="https://books.google.com/books?id=lxgTAAAAYAAJ&amp;printsec=frontcover&amp;dq=inauthor:%22Abraham+Flexner%22&amp;hl=en&amp;sa=X&amp;ei=rmXAVIvHLYKYoQSM5YGgDQ&amp;ved=0CCwQ6AEwAg#v=onepage&amp;q&amp;f=false">Medical Education in the United States and Canada</a> that started the movement to raise &ldquo;American medical education&hellip; to the highest [status] in the civilized world&rdquo;<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>)</p>

<p><em>How We Die</em> won the National Book Award, was a finalist for the Pulitzer Prize, and perched atop the New York Times' bestseller list for more than thirty weeks. This book answers a question we have all asked at some point &mdash; what will it be like to die? A hope many of us share is to have a dignified death with little suffering for ourselves and our families, but reflecting on his many years and experiences with death, Nuland has found that</p>

<blockquote><p>the greatest dignity to be found in death is the dignity of the life that preceded it. This is a form of hope we can all achieve, and it is the most abiding of all. Hope resides in the meaning of what our lives have been.</p></blockquote>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Nuland, Sherwin B. (2014-06-25). <em>How We Die: Reflections on Life&rsquo;s Final Chapter</em>. Kindle Edition<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Webster, John. (1612) <em>The Duchess of Malfi</em><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Flenxer, Abraham. (1910). <em>Medical Education in the United States and Canada</em>.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cleaning the Campground]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/cleaning-the-campground/"/>
    <updated>2015-01-10T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/cleaning-the-campground</id>
    <content type="html"><![CDATA[<p>If you work in a code base with many other contributors, you may have learned the scouting philosophy to &ldquo;leave the campground cleaner than you found it.&rdquo; Sometimes the code you are working in can seem so entangled and complex that it is hard to know where to begin, but <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1420928385&amp;sr=8-1&amp;keywords=clean+code">Robert C. Martin&rsquo;s foundational book, *Clean Code</a>*, tells us that very small changes can improve the readability and maintainability of a piece of code.</p>

<blockquote><p>&ldquo;It is not enough to write the code well. The code has to be <em>kept clean</em> over time.&rdquo;</p></blockquote>

<!--more-->


<p><a href="http://en.wikipedia.org/wiki/Software_rot">Code rot</a> happens to every well-intentioned but long-lived code base, and it can happen either by neglect or by constant development. Surround your pullquote like this {" text to be quoted "}</p>

<p>There is hope for your legacy application, as long as you establish a culture of constant small improvements:</p>

<ol>
<li>Change one variable name for the better</li>
<li>Break one large function into two or more smaller ones.</li>
<li>Eliminate one small bit of duplication</li>
<li>Clean up one composite if statement.</li>
</ol>


<p>That last one is a bit like low-hanging fruit. Take this complex if statement in <a href="https://github.com/rack/rack/blob/rack-1.5/lib/rack/deflater.rb#L30-L33">Rack::Deflater#call</a></p>

<p>```
def call
  &hellip;</p>

<p>  # Skip compressing empty entity body responses and responses with
  # no-transform set.
  if Utils::STATUS_WITH_NO_ENTITY_BODY.include?(status) ||</p>

<pre><code>  headers['Cache-Control'].to_s =~ /\bno-transform\b/ ||
 (headers['Content-Encoding'] &amp;&amp; headers['Content-Encoding'] !~ /\bidentity\b/)
return [status, headers, body]
</code></pre>

<p>  end
  &hellip;
```</p>

<p>The comment attempts to explain what the code cannot: skip response compression under certain conditions. The intention could easily be described by extracting both the comment and the if statement to a method:</p>

<p>```
def call
  &hellip;
  if skip_compression?</p>

<pre><code>return [status, headers, body]
</code></pre>

<p>  end
  &hellip;
end</p>

<p>private</p>

<h1>Skip compressing empty entity body responses and responses with</h1>

<h1>no-transform set.</h1>

<p>def skip_compression?
  Utils::STATUS_WITH_NO_ENTITY_BODY.include?(status) ||</p>

<pre><code>headers['Cache-Control'].to_s =~ /\bno-transform\b/ ||
</code></pre>

<p>   (headers[&lsquo;Content-Encoding&rsquo;] &amp;&amp; headers[&lsquo;Content-Encoding&rsquo;] !~ /\bidentity\b/)
end
```</p>

<p>While the <code>if</code> statement itself is not much better, at least <code>#call</code> is a little more readable. Fight against code rot while building new features in a legacy code base by making small improvements where you can.</p>

<!-- resources
http://en.wikipedia.org/wiki/Software_entropy
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD and the Senior Software Engineer]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/the-senior-software-engineer/"/>
    <updated>2015-01-04T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/the-senior-software-engineer</id>
    <content type="html"><![CDATA[<p>Many developers embrace test-driven development (TDD) as an ideal but rarely put it into practice. I often find myself writing code that works and then writing tests that exercise it to ensure that its behaviour doesn&rsquo;t break when changes are made. Writing tests first is a great way to organize your approach to solving a problem, and in <a href="http://www.amazon.com/Senior-Software-Engineer-Practices-Effective/dp/0990702804/ref=sr_1_1?ie=UTF8&amp;qid=1420403139&amp;sr=8-1&amp;keywords=on+being+a+senior+engineer"><strong>The Senior Software Engineer</strong></a>, David Copeland describes how TDD will help you grow your career as well.</p>

<!--more-->


<p>A senior software engineer is efficient, and delivers a quality product in a timely fashion. Surround your pullquote like this {" text to be quoted "}</p>

<p>Explicitly describing your plan in a test suite has another benefit that I had not considered before, and that is making you resilient to interruption. If your plan is not layed out on paper, you are maintaining it all in your head, and you have to hold on to a lot of context in your working memory. Surround your pullquote like this {" text to be quoted "}</p>

<p>Time and context management are essential skills for becoming a senior software engineer, and I am going to try using test driven development to become more interruptable and more productive.</p>

<!-- RESOURCES
* http://act-r.psy.cmu.edu/wordpress/wp-content/uploads/2012/12/448preparing.to.resume.pdf
* http://interruptions.net/literature/Fogarty-CHI05-p331-fogarty.pdf
* http://contenthere.net/2012/10/what-it-takes-to-be-a-senior-engineer.html
* http://www.amazon.com/Senior-Software-Engineer-Practices-Effective/dp/0990702804/ref=sr_1_1?ie=UTF8&qid=1420403139&sr=8-1&keywords=on+being+a+senior+engineer
* [The Senior Software Engineer](http://www.amazon.com/Senior-Software-Engineer-Practices-Effective/dp/0990702804/ref=sr_1_1?ie=UTF8&qid=1420403139&sr=8-1&keywords=on+being+a+senior+engineer) by David Bryant Copeland

OUTLINE
Test-driven development can help you grow your career.
1. test-driven development is an ideal that many strive for and few embrace.
2. many developers embrace the ideas of test-driven development, but few practice it rigorously.
3. writing tests is important to delivering quality, robust code, and is essential for writing code that you ever hope to change.
4. did you know that test-driven development can help you grow your career as well?
-->

]]></content>
  </entry>
  
</feed>
