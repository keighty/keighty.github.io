<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Read | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/read/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-01-20T07:42:26-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objects vs Data Structures]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/objects-vs-data-structures/"/>
    <updated>2015-01-18T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/objects-vs-data-structures</id>
    <content type="html"><![CDATA[<p>&ldquo;It is impossible to create an abstraction unknowingly or by accident,&rdquo; says Sandi Metz in <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330/ref=sr_1_1?ie=UTF8&amp;qid=1421723392&amp;sr=8-1&amp;keywords=practical+object+oriented+design+in+ruby"><em>Practical Object Oriented Design in Ruby</em></a>. An abstraction is a common, stable quality, such that you would find in a java interface. An interface is an idea that cannot be made concrete, but contains behaviour <a href="http://en.wikipedia.org/wiki/Interface_%28Java%29">encoding similarities</a> which objects might share. Even the definition of abstraction is abstract, and it wasn&rsquo;t until I read Robert C. Martin&rsquo;s chapter on Objects and Data Structures in <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"><em>Clean Code</em></a> that I really started to understand them.</p>

<!--more-->


<h3>What is a data structure</h3>

<p>A data structure is a class that exposes its data to the public. It should have no meaningful behaviour, and can be characterized by a set of attributes along with getters and setters.</p>

<p>{% codeblock lang:ruby Point as data structure %}
class Point1
  attr_accessor :x, :y, :z
end</p>

<p>p = Point1.new
p.x = 1
p.y = 1
p.z = 1
p
=> #&lt;Point1:0x007f86092452e8 @x=1, @y=1, @z=1>
{% endcodeblock %}</p>

<p>In this example, a Point is defined as an object at some location on a coordinate grid of some kind. That sounds abstract enough: you can create a point, {% pullquote %}access all of the point&rsquo;s data, and set its location along each axis independently. You have an instance of a point, but it is not an abstraction of a point &mdash; it is a data structure. {&ldquo;Hiding implementation is not about putting a layer of functions between the variables. It is about abstractions.&rdquo;}
{% endpullquote %} Adding an initializer that sets each variable, or a <code>to_s</code> method for getting a pretty output, would not make the Point1 class any more an abstraction of a position in space. To make an abstraction you can&rsquo;t just use getters and setters &mdash; you have to think about how you are representing the data.</p>

<h3>What is an object</h3>

<p>An object hides its data behind abstractions. A Point is not defined by its <code>[@x, @y, @z]</code>, but by its location in space. If space is a coordinate system, it could be 2- or 3-dimensional.</p>

<p>{% codeblock Point as abstraction %}
class Point2
  def initialize(x, y, z = nil)</p>

<pre><code>set_location(x, y, z)
</code></pre>

<p>  end</p>

<p>  def to_s</p>

<pre><code>"(#{[@x, @y, @z].compact.join(',')})"
</code></pre>

<p>  end
  alias_method :location, :to_s</p>

<p>  def set_location(x, y, z = nil)</p>

<pre><code>@x = x
@y = y
@z = z
location
</code></pre>

<p>  end
  private :set_location</p>

<p>  alias_method :move_point, :set_location
  public :move_point</p>

<p>end</p>

<p>p = Point2.new(1, 1)
=> #&lt;Point2:0x007fca39927038 @x=1, @y=1, @z=nil>
p.move_point(2, 3)
=> &ldquo;(2,3)&rdquo;
p.move_point(2, 3, 7)
=> &ldquo;(2,3,7)&rdquo;
{% endcodeblock %}</p>

<p>A point cannot exist separate from it&rsquo;s coordinates, and coordinates cannot exist or be altered without using the abstraction of moving in space.</p>

<blockquote><p>&ldquo;We do not want to expose the details of our data. Rather we want to express our data in abstract terms. This is not merely accomplished by using interfaces and/or getters and setters. Serious thought needs to be put into the best way to represent the data that an object contains.&rdquo;</p>

<p>&mdash; Martin</p></blockquote>

<p>This is why <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">fat models are an anti-pattern in Rails</a>. ActiveRecord makes an object out of a data structure, and adding behaviour beyond data validation makes the model a hybrid data object. <a href="http://railscasts.com/episodes/398-service-objects">Service Objects</a> are abstractions of model behaviour (pun intended).</p>

<p>Now I know what an abstraction is, and I understand that simply extracting methods into interfaces doesn&rsquo;t magically make an abstraction. As Metz says, &ldquo;good design naturally progresses toward small independent objects that rely on abstractions.&rdquo; An object is more than a data structure; it is an idea and it must be applied deliberately.</p>

<!-- resources
http://www.cgore.com/programming/ruby/public-aliases-of-private-methods.lisp
-->


<!-- resources
http://railscasts.com/episodes/398-service-objects
http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cleaning the Campground]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/cleaning-the-campground/"/>
    <updated>2015-01-10T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/cleaning-the-campground</id>
    <content type="html"><![CDATA[<p>If you work in a code base with many other contributors, you may have learned the scouting philosophy to &ldquo;leave the campground cleaner than you found it.&rdquo; Sometimes the code you are working in can seem so entangled and complex that it is hard to know where to begin, but <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1420928385&amp;sr=8-1&amp;keywords=clean+code">Robert C. Martin&rsquo;s foundational book, *Clean Code</a>*, tells us that very small changes can improve the readability and maintainability of a piece of code.</p>

<blockquote><p>&ldquo;It is not enough to write the code well. The code has to be <em>kept clean</em> over time.&rdquo;</p></blockquote>

<!--more-->


<p><a href="http://en.wikipedia.org/wiki/Software_rot">Code rot</a> happens to every well-intentioned but long-lived code base, and it can happen either by neglect or by constant development. {% pullquote %}Neglected software will suffer a gradual deterioration in performance and responsiveness over time. Security vulnerabilities and incompatibilities aside, as new applications are built in newer and faster frameworks, your application will perform poorly in comparison. If your software is actively developed it will be modified, and as it is modified it&rsquo;s complexity will increase. {&ldquo;Add in more developers, each with different coding styles, and before long you will find your code to be impenetrably complex and impossible to modify.&rdquo;}
{% endpullquote %}</p>

<p>There is hope for your legacy application, as long as you establish a culture of constant small improvements:</p>

<ol>
<li>Change one variable name for the better</li>
<li>Break one large function into two or more smaller ones.</li>
<li>Eliminate one small bit of duplication</li>
<li>Clean up one composite if statement.</li>
</ol>


<p>That last one is a bit like low-hanging fruit. Take this complex if statement in <a href="https://github.com/rack/rack/blob/rack-1.5/lib/rack/deflater.rb#L30-L33">Rack::Deflater#call</a></p>

<p>```
def call
  &hellip;</p>

<p>  # Skip compressing empty entity body responses and responses with
  # no-transform set.
  if Utils::STATUS_WITH_NO_ENTITY_BODY.include?(status) ||</p>

<pre><code>  headers['Cache-Control'].to_s =~ /\bno-transform\b/ ||
 (headers['Content-Encoding'] &amp;&amp; headers['Content-Encoding'] !~ /\bidentity\b/)
return [status, headers, body]
</code></pre>

<p>  end
  &hellip;
```</p>

<p>The comment attempts to explain what the code cannot: skip response compression under certain conditions. The intention could easily be described by extracting both the comment and the if statement to a method:</p>

<p>```
def call
  &hellip;
  if skip_compression?</p>

<pre><code>return [status, headers, body]
</code></pre>

<p>  end
  &hellip;
end</p>

<p>private</p>

<h1>Skip compressing empty entity body responses and responses with</h1>

<h1>no-transform set.</h1>

<p>def skip_compression?
  Utils::STATUS_WITH_NO_ENTITY_BODY.include?(status) ||</p>

<pre><code>headers['Cache-Control'].to_s =~ /\bno-transform\b/ ||
</code></pre>

<p>   (headers[&lsquo;Content-Encoding&rsquo;] &amp;&amp; headers[&lsquo;Content-Encoding&rsquo;] !~ /\bidentity\b/)
end
```</p>

<p>While the <code>if</code> statement itself is not much better, at least <code>#call</code> is a little more readable. Fight against code rot while building new features in a legacy code base by making small improvements where you can.</p>

<!-- resources
http://en.wikipedia.org/wiki/Software_entropy
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD and the Senior Software Engineer]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/the-senior-software-engineer/"/>
    <updated>2015-01-04T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/the-senior-software-engineer</id>
    <content type="html"><![CDATA[<p>Many developers embrace test-driven development (TDD) as an ideal but rarely put it into practice. I often find myself writing code that works and then writing tests that exercise it to ensure that its behaviour doesn&rsquo;t break when changes are made. Writing tests first is a great way to organize your approach to solving a problem, and in <a href="http://www.amazon.com/Senior-Software-Engineer-Practices-Effective/dp/0990702804/ref=sr_1_1?ie=UTF8&amp;qid=1420403139&amp;sr=8-1&amp;keywords=on+being+a+senior+engineer"><strong>The Senior Software Engineer</strong></a>, David Copeland describes how TDD will help you grow your career as well.</p>

<!--more-->


<p>A senior software engineer is efficient, and delivers a quality product in a timely fashion. {% pullquote left %}{&ldquo;Effective problem solvers first spend time understanding the problem space and then design a plan&rdquo;}: documenting feature behaviour in a test suite allows you to plan your implementation. Code maintenance and modification are also more efficient when you have a good test suite. If the code has been built using TDD, its behaviour is already well tested. When someone needs to build on top of your feature, the tests will protect it and eliminate the worry of causing regressions (win-win).
{% endpullquote %}</p>

<p>Explicitly describing your plan in a test suite has another benefit that I had not considered before, and that is making you resilient to interruption. If your plan is not layed out on paper, you are maintaining it all in your head, and you have to hold on to a lot of context in your working memory. {% pullquote %}Every time you are interrupted, you have to dump things out of your working memory, and reloading the problem space takes time and energy. You won&rsquo;t suffer interruptions well if reloading the context takes 15 minutes each time. You will become unresponsive as you block out the outside world, trying to maintain your context.</p>

<p>{&ldquo;TDD can help you structure your coding task so that it has natural breaking points. If you are interrupted while trying to fix a failing test, you know exactly where you can pick the task up again.&rdquo;} If you are interrupted after getting a test to pass you can easily read through your test suite to regain your context and pick up the next task.
{% endpullquote %}</p>

<p>Time and context management are essential skills for becoming a senior software engineer, and I am going to try using test driven development to become more interruptable and more productive.</p>

<!-- RESOURCES
* http://act-r.psy.cmu.edu/wordpress/wp-content/uploads/2012/12/448preparing.to.resume.pdf
* http://interruptions.net/literature/Fogarty-CHI05-p331-fogarty.pdf
* http://contenthere.net/2012/10/what-it-takes-to-be-a-senior-engineer.html
* http://www.amazon.com/Senior-Software-Engineer-Practices-Effective/dp/0990702804/ref=sr_1_1?ie=UTF8&qid=1420403139&sr=8-1&keywords=on+being+a+senior+engineer
* [The Senior Software Engineer](http://www.amazon.com/Senior-Software-Engineer-Practices-Effective/dp/0990702804/ref=sr_1_1?ie=UTF8&qid=1420403139&sr=8-1&keywords=on+being+a+senior+engineer) by David Bryant Copeland

OUTLINE
Test-driven development can help you grow your career.
1. test-driven development is an ideal that many strive for and few embrace.
2. many developers embrace the ideas of test-driven development, but few practice it rigorously.
3. writing tests is important to delivering quality, robust code, and is essential for writing code that you ever hope to change.
4. did you know that test-driven development can help you grow your career as well?
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Happiness Hypothesis]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/the-happiness-hypothesis/"/>
    <updated>2015-01-01T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/the-happiness-hypothesis</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;Nothing is miserable unless you think it so; and on the other hand, nothing brings happiness unless you are content with it.&rdquo; &mdash;Buddha</p></blockquote>

<p>In <a href="http://www.amazon.com/Happiness-Hypothesis-Finding-Modern-Ancient/dp/0465028020/ref=sr_1_1?ie=UTF8&amp;qid=1420146441&amp;sr=8-1&amp;keywords=the+happiness+hypothesis">The Happiness Hypothesis</a>: Finding Modern Truth in Ancient Wisdom, Jonathan Haidt provides an extensive overview of the state of positive psychology today.</p>

<!--more-->


<p>He uses the analogy of a rider on an elephant to describe how the mind is divided into two parts: the conscious, reasoning part (the rider), and the unconscious mind that is actually driving our behaviour (the elephant). Stepping in to the New Year, the twitter-verse is alive with resolutions to eat less, exercise more, and spend less money &mdash; all laudable goals for the rider, but unless you can re-train the elephant to want those same things, you will find yourself in line for a 16oz hot chocolate with whipped cream by the end of the week.</p>

<h3>On the happiness equation: H = S + C + V</h3>

<blockquote><p>The level of happiness that you actually experience (H) is determined by your biological set point (S) plus the conditions of your life &copy; plus the voluntary activities (V) you do.</p></blockquote>

<p>This has certainly been true in my life. I tend towards a positive outlook (as Haidt describes it, a winner of the &lsquo;cortical lottery&rsquo;), but that doesn&rsquo;t mean I don&rsquo;t experience ups and downs brought on by circumstances and choices. Changing your level of happiness can come from changing your circumstances, or by participating in rewarding acitivites. (Out of ideas? Try <a href="http://www.bodyvox.com/classes/beginning-ballet-and-wine-tasting-0">beginning ballet and wine tasting</a>!)</p>

<h3>On training the elephant</h3>

<blockquote><p>&ldquo;The goal of meditation is to change automatic thought processes, thereby taming the elephant. And the proof of taming is the breaking of attachments&hellip; For Buddha, attachments are like a game of roulette in which someone else spins the wheel and the game is rigged: The more you play, the more you lose. The only way to win is to step away from the table. And the only way to step away, to make yourself not react to the ups and downs of life, is to meditate and tame the mind. Although you give up the pleasures of winning, you also give up the larger pains of losing.&rdquo;</p></blockquote>

<p>I like the idea of training the elephant through meditation, but disagree with the pursuit of non-attachment. Living life without any attachments means missing out on joy as well as pain. If life is an amuzement park, is it better to spend your time on the teacups or the rollercoaster? Isn&rsquo;t it better to have loved and lost than never to have loved at all?</p>

<h3>On your inner lawyer</h3>

<blockquote><p>[People] are skilled at finding reasons to support their gut feelings. The rider acts like a lawyer whom the elephant has hired to represent it in the court of public opinion&hellip; Studies of everyday reasoning show that&hellip; when people are given difficult questions to think about&hellip; they generally lean one way or the other right away, and then put a call in to reasoning to see whether support for that position is forthcoming.</p></blockquote>

<p>I love the idea of our conscious mind acting as a lawyer defending our actions and decisions. We only look for supporting evidence, and any data that undermines our world-view must be discredited or its importance downplayed.</p>

<h3>On reciprocation and gossip</h3>

<blockquote><p>A species equipped with vengeance and gratitude responses can support larger and more cooperative social groups because the payoff to cheaters is reduced by the costs they bear in making enemies&hellip; Tit for tat appears to be built into human nature as a set of moral emotions that make us want to return favor for favor, insult for insult&hellip;</p></blockquote>

<p>Social groups cannot be formed without cooperation and a set of norms. Norms can be enforced through gossip:</p>

<blockquote><p>Many species reciprocate, but only humans gossip, and much of what we gossip about is the value of other people as partners for reciprocal relationships&hellip; Gossip paired with reciprocity allow karma to work here on earth, not in the next life.</p></blockquote>

<h3>On writing your life story</h3>

<blockquote><p>The third level of personality is that of the &ldquo;life story.&rdquo; Human beings in every culture are fascinated by stories; we create them wherever we can.. It&rsquo;s no different with our own lives. We can&rsquo;t stop ourselves from creating what McAdams describes as an &ldquo;evolving story that integrates a reconstructed past, perceived present, and anticipated future into a coherent and vitalizing life myth.&rdquo; Although the lowest level of personality is mostly about the elephant, the life story is written primarily by the rider. You create your story in consciousness as you interpret your own behavior, and as you listen to other people&rsquo;s thoughts about you.</p></blockquote>

<p>Every time I relate a personal anecdote to a new listener I find that I am refining the narrative &mdash; using the same words and phrases, pausing at the same moments each time. My partner and I have developed a cadence when we tell people about our drive across Canada, or our trip to the Maritimes. We are building our life story through relatable moments.</p>

<h3>On growing through adversity</h3>

<blockquote><p>Be sure you have done your best to answer these two questions: Why did this happen? What good might I derive from it?</p></blockquote>

<p>Whatever doesn&rsquo;t kill you doesn&rsquo;t always make you stronger, but we can grow through adversity. Pain doesn&rsquo;t always equal gain, but a root cause analysis (why did this happen?), and reframing to find something positive in the experience (lessons learned), is a great approach.</p>

<h3>On the ideological differences in moral ethics:</h3>

<blockquote><p>The ethic of autonomy, the ethic of community, and the ethic of divinity.</p></blockquote>

<p>Policial and ideological differences arise from approaching life from different moral perspectives. In the ethic of autonomy, the goal is to protect individuals from harm and interference. In the ethic of community the goal is to protect the integrity of groups, families, companies, or nations, and its virtues are obedience, and loyalty. In the ethic of divinity, the goal is to protect the sacred from the profane. They value living in a pure and holy way, free from pollutants such as lust, greed, and hatred.</p>

<h3>Vital engagement (or flow)</h3>

<blockquote><p>Vital engagement does not reside in the person or in the environment; it exists in the relationship between the two.</p></blockquote>

<p>Memories that encorporate more than one sensation are the strongest. Similarly, finding meaning and flow in an activity requires more than just a connection through commitment. There must be connections through a community, a shared history, and a shared experience. I didn&rsquo;t come to love programming because it seemed like a rewarding career path. I built a script that was useful to a coworker, drew excitment from other programmers, and began peeling back the layers of abstraction, enjoying the &lsquo;A-ha!&rsquo; when understanding occurred.</p>

<h3>On happiness and the meaning of life</h3>

<blockquote><p>Happiness is not something that you can find, acquire, or achieve directly. You have to get the conidtions right and then wait.</p></blockquote>

<p>This is the first book I have read that really tried to approach the meaning of life, and my inner elephant has decided that Haidt is on the right track.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Situations Matter]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/situations-matter/"/>
    <updated>2014-03-28T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/situations-matter</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/Situations-Matter-Understanding-Context-Transforms-ebook/dp/B005ERIS5S/ref=sr_1_1?ie=UTF8&amp;qid=1396016834&amp;sr=8-1&amp;keywords=situations+matter">Situations Matter</a> by Sam Sommers is an eye-opening study of the influence of context on human interactions. Social psychologists call it &ldquo;fundamental attribution error&rdquo;, which is a tendency to interpret someone else&rsquo;s behavior as stemming from their core characteristics, rather than to external circumstances. A simplistic example of attribution error is assuming that the person driving the speeding car is a reckless speed-freak rather than someone rushing a woman in labor to the hospital. Sommers has studied the power of situations over human interactions and how the attribution error interferes with our ability to empathize with the unfamiliar. I have read similar studies of how bias infiltrates our relationships, but what surprised me the most is how it also influences our perception of the self. <!--more--></p>

<h3>You&rsquo;re not the person you thought you were</h3>

<p>A provocative but aptly named chapter, Sommers overturns the concept of an &ldquo;authentic self&rdquo; with a simple fill-in-the-blanks exercise:</p>

<ol>
<li>I am _________________</li>
<li>I am _________________</li>
<li>I am _________________</li>
<li>I am _________________</li>
<li>I am _________________</li>
</ol>


<p>His study subjects were required to fill in 20 of these blanks, but 5 is enough to illustrate his point to the reader. The open-endedness of this exercise allows for a fantastic range of responses: &ldquo;I am 36 years old, I am hungry, I am tall, I am a lifelong learner&rdquo;. Taking the 20 questions test in different contexts will yield different definitions of yourself. Sommers has discovered that &ldquo;we tend to think of ourselves in terms of that which makes us distinctive&rdquo;, so your answers will have more to do with the people around you than with a fixed set of characteristics. A woman is more likely to include gender on her list if she is in a room full of men than if she is in a room full of women. So it seems that &ldquo;identity is malleable and personal preferences are constructed on the spot.&rdquo; Introspection will gain us little but a hazy snap-shot of our identity at any given moment.</p>

<blockquote><p>&ldquo;It&rsquo;s refreshing to realize that you&rsquo;re not a finished product &mdash; that who you are in the here and now may not be the same person you&rsquo;ll be in the then and there. In fact, it&rsquo;s the opposite view of the self as a fixed entity that causes problems. When you assume that there&rsquo;s a true core self waiting to be discovered, that&rsquo;s when your potential seems limited and the world around you is full of threats to be rationalized away.&rdquo;</p></blockquote>

<p>One quality that is typically presumed to be fixed is intelligence. Challenging this truism, another study was conducted where students were grouped according to their belief that either intelligence is a stable attribute, or that their intellect can be changed. The researchers asked the students to predict the likelihood that they will attend a remedial language course, and then tracked their performance. It was found that among the students who fared poorly in the language course, those who viewed intelligence as a permanent, unchangeable trait were less likely to enroll in the remedial course &mdash; that is, to take steps in order to improve their performance. For students who believe that intelligence is fixed, a poor exam grade is a mark of their limitations rather than an opportunity for improvement. Students who believe that intelligence is malleable are more likely to show the stick-to-itiveness necessary for self-improvement.</p>

<p>Viewing the self less like a rigid Rubik&rsquo;s Cube to be solved, and more like Silly Putty that conforms to the shape of its container, will likely free up a lot of my time. Instead of trying to solve the puzzle. I can spend energy on finding the container that makes me happy&hellip; for the moment.</p>
]]></content>
  </entry>
  
</feed>
