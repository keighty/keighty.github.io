<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2018-02-28T09:09:48-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    <email><![CDATA[keighty.leonard@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing Test Cases in Java With Enums]]></title>
    <link href="http://www.katieleonard.ca/blog/2017/writing-test-cases-with-enums/"/>
    <updated>2017-03-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2017/writing-test-cases-with-enums</id>
    <content type="html"><![CDATA[<p>I recently discovered some new (to me) features of enums, and so naturally I am now using them for everything. One of these new-to-me features is using a constructor to give enum members properties and behaviour.<!--more--></p>

<p>For example, if I were making a list of colours, a simple enum would look like this:</p>

<p>```java
enum Colors {</p>

<pre><code>RED,
BLUE,
YELLOW;
</code></pre>

<p>}
```</p>

<p>Everywhere in my code where I used to use the string <code>"red"</code>, I could replace with a less-spelling-error-prone-and-IDE-friendly <code>Colors.RED</code>. If I want to iterate over all the colors in my collection, I can use the <code>values</code> method:</p>

<p>```java
&hellip;
public void loopColorEnum() {</p>

<pre><code>for (Color color : Color.values()) {
    System.out.println(color);
}
</code></pre>

<p>}
&hellip;</p>

<p>// console output:
// RED
// BLUE
// YELLOW
```</p>

<p>If I wanted to store the hex value for each colour, I can add a constructor and provide arguments for each member of the enum:</p>

<p>```java
enum Color {</p>

<pre><code>RED("#FF0000"),
BLUE("#0000FF"),
YELLOW("#FFFF00");

final String hex;
Color(String hexCode) {
    this.hex = hexCode;
}
</code></pre>

<p>}
```</p>

<p>Now I can access the hex property on all of my colours:</p>

<p>```java
&hellip;</p>

<pre><code>public void loopColorEnum() {
    for (Color color : Color.values()) {
        System.out.println(color.hex);
    }
}
</code></pre>

<p>&hellip;</p>

<p>// console output:
// #FF0000
// #0000FF
// #FFFF00
```</p>

<p>Finally, if I wanted to create a custom output for my enum that included the hex value, I can add a <code>toString()</code> function:</p>

<p>```java
enum Color {</p>

<pre><code>RED("#FF0000"),
BLUE("#0000FF"),
YELLOW("#FFFF00");

String hex;
Color(String hexCode) {
    this.hex = hexCode;
}

public String toString() {
    return String.format("Color: %s (Hex: %s)", super.toString(), hex);
}
</code></pre>

<p>}</p>

<p>&hellip;</p>

<pre><code>public void loopColorEnum() {
    for (Color color : Color.values()) {
        System.out.println(color);
    }
}
</code></pre>

<p>&hellip;</p>

<p>// console output:
// Color: RED (Hex: #FF0000)
// Color: BLUE (Hex: #0000FF)
// Color: YELLOW (Hex: #FFFF00)
```</p>

<p>Pretty cool! Pair a constructor with the <code>values()</code> iterable, and you have yourself a handy-dandy test framework for repetitive but important tests. For example, I was re-visiting an old exercise from a data structures class and wanted to write a bunch of test cases without the repetitive boilerplate code for each one &mdash; so I built an enum:</p>

<p>```java
public class CalculatorTest extends InfixCalculator {</p>

<pre><code>private enum Expression {
    ADDITION("1+2+3", 6),
    SUBTRACTION("9-4", 5),
    MULTIPLICATION("5*4*2", 40),
    DIVISION("9/3", 3),
    ADDITION_WITH_SPACES("5 + 7", 12),
    MULTI_DIGITS("12 + 3 - 5", 10);

    final String expression;
    final int result;
    Expression(String expression, int result) {
        this.expression = expression;
        this.result = result;
    }
}

@Test
public void test_solves_an_expression() {
    Calculator calc = new Calculator();
    for (Expression exp : Expression.values()) {
        assertEquals("for expression " + exp.expression,
                exp.result,
                calc.calculate(exp.expression));
    }
}
</code></pre>

<p>}
```</p>

<p>When I create a new test case, I just add another member to the enum, and provide the string input and the expected result. Reducing the boilerplate made developing around edge cases far more wieldy, and I spent more time writing the actual code of the Calculator than I did creating tests.</p>

<p>Adding a constructor, methods and properties to an enum makes it looks suspiciously like a class. In fact, that is how enums are implemented under the hood: they are classes with <em>benefits</em>, such as:</p>

<ul>
<li>retrieve the constant value with <code>valueOf</code>,</li>
<li>guaranteed singletons,</li>
<li>clarity in switch statements, and</li>
<li>built in ordering of members &mdash; an enum can act like an array, and return the order of a member the <code>ordinal()</code> method</li>
</ul>


<p>Sure, you could accomplish most of these using a class with <code>public static final</code> constants and a few hand-rolled methods, but you will impress your neighbours more with a well crafted enum.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thread Safety]]></title>
    <link href="http://www.katieleonard.ca/blog/2017/thread-safety/"/>
    <updated>2017-02-04T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2017/thread-safety</id>
    <content type="html"><![CDATA[<p>While wading into the wide world of high throughput production Java, I have been enjoying guidance from &ldquo;Java Concurrency in Practice&rdquo; by Brian Goetz, as well as my friend and coworker, David Copeland. In a recent talk, David boiled down the range of concurrency problems to three main issues: atomicity, visibility, and ordering conflicts.<!--more--></p>

<h3>Atomicity</h3>

<p>An atomic operation is one that executes in a single operation. A variable assignment (<code>int x = 2;</code>) is an example of an atomic operation (mostly* &mdash; see footnote). Incrementing a variable, on the other hand, is NOT an atomic operation.</p>

<p>```java
public class NonAtomicCounter {
  private int count = 0;</p>

<p>  public int getCount() { return count; }
  public void doWork() { count++; }
}
```</p>

<p>While <code>count++</code> <em>appears</em> to be a single action it is actually three:</p>

<ul>
<li>read count,</li>
<li>modify count, and</li>
<li>write count.</li>
</ul>


<p>If ThreadA and ThreadB share a NonAtomicCounter and both call <code>doWork()</code>, ThreadA can read the value of count while ThreadB is modifying it, making <code>count</code> vulnerable to lost updates.</p>

<blockquote><p>Be suspicious of any shared state that is involved in <em>read-modify-write</em> or <em>test-then-act</em> sequences of actions.</p></blockquote>

<h3>Visibility</h3>

<p>Once a thread has read a value, there is no guarantee that it will ever check to see if another thread has modified that value.</p>

<p>```java
public class Main {</p>

<pre><code>static boolean stop;

public static void main(String[] args) throws InterruptedException {

    new Thread(() -&gt; {
        while (! stop) {
            System.out.println("still working");
        }
    }).start();

    new Thread(() -&gt; { stop = true; }).start();
}
</code></pre>

<p>}
```</p>

<p>Each thread can cache a local copy of <code>stop</code>, which means they will read the value once and then never check to see if it has been changed.</p>

<blockquote><p>Be suspicious of loops that are gated by a variable that is visible to other threads.</p></blockquote>

<h3>Ordering</h3>

<p>The JVM has a just-in-time compiler that optimizes execution at runtime. The memory model guarantees deterministic behaviour <em>within</em> a thread, but makes no promises about how instructions are ordered in the meantime.</p>

<p>```java
public class Main {</p>

<pre><code>static int A;
static int B;

public static void main(String[] args) throws InterruptedException {

    Thread t1 = new Thread(() -&gt; {
        int localA = A;
        B = 1;
        System.out.println("local A: " + localA);
    });

    Thread t2 = new Thread(() -&gt; {
        int localB = B;
        A = 2;
        System.out.println("local B: " + localB);
    });

    t1.start();
    t2.start();
}
</code></pre>

<p>}</p>

<p>/<em> POSSIBLE LOCAL VALUES
* localA: 0, localB: 0
* &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;
* localA: 0, localB: 1
* &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
* localA: 2, localB: 1 => THIS SHOULD BE IMPOSSIBLE, RIGHT?
* &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
* localA: 2, localB: 0 => WAT?
</em>/
```</p>

<p>How is it possible that t1 sees that A = 2? From <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4">the docs</a>:</p>

<blockquote><p>&ldquo;The semantics of the Java programming language allow compilers and microprocessors to perform optimizations that can interact with incorrectly synchronized code in ways that can produce behaviors that seem paradoxical.&rdquo;"</p></blockquote>

<p>What this means, is that even though the instructions are written in such a way that localA should not be able to see the reassignment of A, the compiler can reorder instructions to optimize evaluation. As long as the result of the computation is deterministic <strong>within</strong> a thread, the compiler is free to change the execution order, inline assignments, simplify algebra, etc.</p>

<p>In the above example,</p>

<p><code>java
int localB = B;
A = 2;
</code></p>

<p>is the same as
<code>java
A = 2;
int localB = B;
</code></p>

<p>When the instructions for thread1 and thread2 are interleaved, thread1 will occasionally see <code>A = 2</code>.</p>

<blockquote><p>Be suspicious of operations involving multiple variables and ordering requirements.</p></blockquote>

<h3>Thread Safety Analysis Guidelines</h3>

<p>If you are dealing with a thread safety issue, ask these three questions:</p>

<ol>
<li>Do your threads share mutable state? Look for public getters and setters, or methods that return references to state rather than copies or primitive values.</li>
<li>Do your threads share multi-variable states (invariants)? Can one component  change independently from others when they should always be treated as a single unit?</li>
<li>For any publicly mutable state, is it an atomicity, visibility, or ordering issue?</li>
</ol>


<h3>Solutions for thread safety issues</h3>

<p>The Java language has a few solutions to offer:</p>

<h4>The <code>volatile</code> keyword</h4>

<p>Adding the keyword <code>volatile</code> to a variable declaration tells the JVM not to use a cached value for any read operations. This keyword will ensure that writes to a variable are always visible to other threads, but will not fix atomicity or ordering issues.</p>

<h4>The <code>synchronized</code> keyword</h4>

<p>Using a <code>synchronized</code> lock around a variable will address all three issues, at the cost of concurrency. If only one thread at a time can access your data, your program is single threaded. Common lock-gotchas include locking writes but not reads!</p>

<h4>The <code>final</code> keyword</h4>

<p>Making variables <code>final</code> addresses all three issues, but requires your state to be immutable. This approach is most useful in composition with other techniques.</p>

<h4>Use guava libraries</h4>

<p>Google has published a library of thread-safe collections that handle concurrent access for you. ConcurrentHashMap is one of my favourites, and you can check out the <a href="https://github.com/google/guava/wiki">user guide</a> for more.</p>

<hr />


<h4>Note</h4>

<blockquote><ul>
<li>A variable&rsquo;s declaration and assignment are really two operations: the allocation of memory to hold the value, and the writing of that value into memory. If a variable is declared and assigned within an object constructor, the object will not be published without variable initialization. However, if it is declared and assigned anywhere else, there are no such guarantees. For the purpose of this example, I am completely ignoring these implications :D</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effectively Final]]></title>
    <link href="http://www.katieleonard.ca/blog/2017/effectively-final/"/>
    <updated>2017-01-11T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2017/effectively-final</id>
    <content type="html"><![CDATA[<p>I have been working on a Java concurrency bug at work for the last few weeks, and the intertwining concepts of immutability and publication have recurred several times. With the help of <a href="https://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601">&ldquo;Java Concurrency in Practice,&rdquo; by Brian Goetz</a>, I am starting to make sense of these concepts, and why these kinds of bugs can be difficult to reproduce.<!--more--></p>

<h3>What does it mean to publish an object?</h3>

<p>&ldquo;Publishing an object means making it available to code outside of its current scope, such as by storing a reference to it where other code can find it, returning it from a nonprivate method, or passing it to a method in another class.&rdquo; (Goetz et al.)</p>

<p>An object that is published is available for use outside of its declared context. Publication can be direct or indirect. Storing a reference to an object in a public static field, directly publishes that object to any client of the class.</p>

<p>```java
public class PublishedObject {</p>

<pre><code>public static void main(String[] args) {
    System.out.println(DirectlyPublishedObject.stringArray[0]);

    DirectlyPublishedObject.stringArray[0] = "changed";

    System.out.println(DirectlyPublishedObject.stringArray[0]);
}

public static class DirectlyPublishedObject {
    public static String[] stringArray = {"gotcha"};
}
</code></pre>

<p>}</p>

<p>/<em>
* Console output:
* gotcha
* changed
</em>/
```</p>

<p><code>DirectlyPublishedObject.stringArray</code> can be retrieved and modified by any client that has access to the class (in this case, <code>PublishedObject#main</code> is the client). An object can also be indirectly published if it is a visible member of another object that is published:</p>

<p>```java
public class PublishedObject {</p>

<pre><code>public static void main(String[] args) {
    IndirectlyPublishedObject ipo = new IndirectlyPublishedObject();
    String[] myPersonalStringArray = ipo.getStringArray();

    System.out.println(myPersonalStringArray[0]);
    myPersonalStringArray[0] = "changed again";
    System.out.println(myPersonalStringArray[0]);
}

public static class IndirectlyPublishedObject {
    private String[] stringArray = {"gotcha"};

    public String[] getStringArray() {
        return stringArray;
    }
}
</code></pre>

<p>}</p>

<p>/<em>
* Console output:
* gotcha
* changed again
</em>/
```</p>

<p>If ObjectA obtains a reference to ObjectB, it doesn&rsquo;t matter if ObjectB is declared private, it has now been publicly published.</p>

<p>Why does publication matter? Shared objects have different publication requirements depending on whether they are mutable. From Goetz:</p>

<ul>
<li>&ldquo;Immutable objects can be published through any mechanism;</li>
<li>Effectively immutable objects must be safely published;</li>
<li>Mutable objects must be safely published, and must be either thread safe or guarded by a lock."</li>
</ul>


<h3>What does it mean to for an object to be immutable?</h3>

<p>An immutable object must satisfy these criteria:</p>

<ul>
<li>The class is not extensible (no methods can be overridden)</li>
<li>All fields are marked final</li>
<li>All fields are assigned in the constructor</li>
<li>No internal state is modifiable by the client of the class (ie: no setters)</li>
<li>No fields that reference mutable objects are made available to clients of the class</li>
</ul>


<p>```java
public final class ImmutableObject {</p>

<pre><code>private final String name;

public ImmutableObject(String name) {
    if (null == name)
        throw new IllegalArgumentException("Must supply a valid name.");

    this.name = name;
}

public String getName() {
    return name;
}

public static void main(String[] args) {
    ImmutableObject io = new ImmutableObject("keighty");
    System.out.println("name = " + io.getName());
}
</code></pre>

<p>}
```</p>

<p>The ImmutableObject will not have any state other than a single field <code>name</code> that is initialized to the String value passed to its constructor. Because <code>name</code> is marked <code>final</code> and initialized in the constructor, there is no danger of encountering an instance of ImmutableObject in the wild whose name is not initialized.</p>

<p>If an object violates <em>some</em> of the requirements for immutability, but its state will never be modified after publication, it will still be treated as immutable by the compiler and JVM &mdash; it is <strong>effectively immutable</strong>.</p>

<h3>The String class is &ldquo;effectively immutable&rdquo;</h3>

<p>In Java, an instance of the String class is not technically immutable, even though Strings are constant and cannot be modified after creation. They have another property (a private hash) that is lazy loaded only as it is needed:</p>

<p><img src="/images/170111-effectively-final/string_constructor.png">
<img src="/images/170111-effectively-final/string_lazy_hash.png"></p>

<p>A String is considered effectively immutable because its internal state is completely encapsulated and its external state isn&rsquo;t changed after it has been published. Even though the hash field is not final, and is only assigned as it is required (a performance optimization), it is not modifiable by any client. The program can treat Strings as if they are immutable, even if they don&rsquo;t strictly fit all of the criteria.</p>

<h3>How can I make my objects effectively immutable?</h3>

<p>By ensuring that the internal state is completely encapsulated, and any mutable internal objects returned by a public method are copies, not references, you too can enjoy the benefits of at-will publication.</p>

<p>```java
public class ImmutableObject {</p>

<p>  public static class EffectivelyImmutableObject {</p>

<pre><code>private String[] stringArray = {"gotcha"};

public String[] getStringArray() {
  // return a COPY of the mutable object, not a reference
  return Arrays.copyOf(stringArray, stringArray.length);
}
</code></pre>

<p>  }</p>

<p>  public static void main(String[] args) {</p>

<pre><code>  EffectivelyImmutableObject eio = new EffectivelyImmutableObject();
  String[] myPersonalStringArray = eio.getStringArray();

  System.out.println(eio.getStringArray()[0]);

  myPersonalStringArray[0] = "changed a copy only";

  System.out.println(myPersonalStringArray[0]);
  System.out.println(eio.getStringArray()[0]);
</code></pre>

<p>  }
}
/<em>
* Console output:
* gotcha
* changed a copy only
* gotcha
</em>/
```</p>

<h4>RESOURCES</h4>

<ul>
<li><p>Peierls, Tim; Goetz, Brian; Bloch, Joshua; Bowbeer, Joseph; Lea, Doug; Holmes, David (2006-05-09). Java Concurrency in Practice. Pearson Education. Kindle Edition.</p></li>
<li><p><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html">javadoc for String</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Annotating Java]]></title>
    <link href="http://www.katieleonard.ca/blog/2017/annotating-java/"/>
    <updated>2017-01-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2017/annotating-java</id>
    <content type="html"><![CDATA[<p>Annotations are a means of adding metadata to Java source code. They can be applied to declarations of classes, fields, methods, and types (as of Java8) in order to pass instructions to the compiler. Annotations can even be evaluated at Runtime.  <!--more-->For example, <code>@Inject</code> is an annotation from the Dagger dependency injection library used to indicate which constructor should be used to instantiate a class. <code>@Inject</code> also tells Dagger to create the dependencies identified in the constructor parameter list.</p>

<h4>Provided by <code>java.lang</code></h4>

<ul>
<li><code>@Deprecated</code>: don&rsquo;t use the marked object. This annotation should be accompanied by a comment explaining the reason and alternative.</li>
<li><code>@Override</code>: this method overrides a superclass method.</li>
<li><code>@SuppressWarnings</code>: the compiler will not report warnings generated by this method.</li>
</ul>


<h2>Create your own</h2>

<p>Annotations can be used to replace verbose code comment templates, and since they are ostensibly interfaces, they can be created the same way you would any other interface.</p>

<p>```java
// src/CustomAnnotation.java
import java.lang.annotation.Documented;</p>

<p>@Documented // Annotation of an Annotation &mdash; so meta! [1]
@interface CustomAnnotation { // [2]</p>

<pre><code>int id(); // [3]
String description();
String author() default "[unknown]"; // [4]
</code></pre>

<p>}
<code>``
1.</code>CustomAnnotation<code>has an annotation of its own! The</code>@Documented<code>annotation ensures that CustomAnnotation and its properties will be included in the Javadoc when it is generated.
2. Declare a new annotation using</code>@interface<code>instead of</code>interface<code>
3. Fields</code>id<code>and</code>description<code>are considered required because they are not given default values. Values for</code>id<code>and</code>description<code>must be provided when using</code>@CustomAnnotation<code>.
4.</code>author` is an unrequired field because a default value will be used if one is not provided.</p>

<h4>Annotations for Annotations</h4>

<p>When defining an annotation, you can indicate how it should be used:</p>

<ul>
<li><code>@RetentionPolicy</code>: How should the annotation be stored? Only in source, included in the generated Class, or passed all the way to the JVM for Runtime evaluation?</li>
<li><code>@Documented</code>: Include the annotation when generating Javadocs (default is false).</li>
<li><code>@Target</code>: A list of locations where the annotation can be used (constructor, field, method, etc).</li>
<li><code>@Inherited</code>: The annotation properties can be inherited from the superclass.</li>
<li><code>@Repeatable</code>: The annotation can be used more than once (declaring multiple authors, for example).</li>
</ul>


<h2>Using your CustomAnnotation</h2>

<p>Use <code>@CustomAnnotation</code> to decorate your code:</p>

<p>```java
// src/Main.java
public class Main {</p>

<pre><code>...

@CustomAnnotation(id = 1, description = "Custom description")
public void printSlogan() {
    System.out.println("This method uses a @CustomAnnotation");
}

@CustomAnnotation(id = 2, description = "Custom banner", author = "keighty")
public void printBanner() {
    System.out.println("This is a printed banner for: " + message);
}
</code></pre>

<p>}
```</p>

<p>When you generate the javadoc for Main.class, the annotations will be included in the method descriptions:</p>

<p><code>
$  javadoc src/com/keighty/Main.java -d .
</code></p>

<p><img src="/images/170108-annotations/javadoc_annotated.png"></p>

<h2>Annotating a field vs annotating a parameter</h2>

<p>There are no hard rules about whether one should annotate a field or a constructor parameter, but which ever you choose you should use that pattern consistently.</p>

<p><img src="/images/170108-annotations/nonnull_annotation.png"></p>

<p>If you use the <code>@Nonnull</code> annotation in the constructor, the compiler will warn if there is any use of the constructor where the parameter could be null. If you use the <code>@Nonnull</code> annotation on the field, you will have to do your own null checking when assigning the field.</p>

<h4>RESOURCES</h4>

<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/index.html">java tutorials</a></li>
<li><a href="http://crunchify.com/understanding-java-annotation-annotation-examples/">crunchify.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preflight Check With CORS -- chainPreflight Option]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/preflight-check-with-cors-chainpreflight-option/"/>
    <updated>2016-04-09T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/preflight-check-with-cors-chainpreflight-option</id>
    <content type="html"><![CDATA[<p>I am working through setting up CORS on a web server, and <a href="http://katieleonard.ca/blog/2016/preflight-check-with-cors/">learning all about Cross-Origin Resource Sharing</a>. When I came across the <strong>chainPreflight</strong> option, I also learned that I didn&rsquo;t have a strong enough understanding of web server vocabulary.<!--more--> Here are the docs for the standard Jetty CrossOriginFilter object:</p>

<p><img src="/images/160329-preflight-cors/chainPreflight-docs.png"></p>

<p>Most references and docs for CORS filtering use the exact same language to describe <code>chainPreflight</code>, but what does it mean for requests to be &ldquo;chained to their target resource?&rdquo; Is this a good thing? If it defaults to true, it must be the expected behaviour&hellip; What about &ldquo;otherwise the filter will response to the preflight?&rdquo; Is that even proper grammar? I asked on <a href="http://stackoverflow.com/q/36414029/1279340">StackOverflow</a>, and five days later, still no answers.</p>

<p>Luckily, I have access to an army of experts at work, and this is what I learned about <strong>chainPreflight</strong>:</p>

<p><img src="/images/160329-preflight-cors/chainPreflight-seq.png"></p>

<p>The &lsquo;target resource&rsquo; is the server endpoint that the request is targeting. If the preflight request is chained to the target resource, it it will pass through the filter (which adds the necessary <code>Allows-*</code> headers) all the way to the endpoint, and the endpoint must have some business logic for handling and responding to the request.</p>

<p>If the preflight request is NOT chained to the target resource, then the filter will add the necessary <code>Allows-*</code> headers and send a response back directly.</p>

<p>Since I don&rsquo;t want to do anything with the OPTIONS preflight request, I can confidently set this option to false, saying &ldquo;whatever you&rsquo;ve got, send it over!&rdquo;</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
</feed>
