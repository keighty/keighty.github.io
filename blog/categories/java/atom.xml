<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2016-04-09T11:47:49-07:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    <email><![CDATA[keighty.leonard@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Preflight Check With CORS -- chainPreflight Option]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/preflight-check-with-cors-chainpreflight-option/"/>
    <updated>2016-04-09T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/preflight-check-with-cors-chainpreflight-option</id>
    <content type="html"><![CDATA[<p>I am working through setting up CORS on a web server, and <a href="http://katieleonard.ca/blog/2016/preflight-check-with-cors/">learning all about Cross-Origin Resource Sharing</a>. When I came across the <strong>chainPreflight</strong> option, I also learned that I didn&rsquo;t have a strong enough understanding of web server vocabulary.<!--more--> Here are the docs for the standard Jetty CrossOriginFilter object:</p>

<p><img src="/images/160329-preflight-cors/chainPreflight-docs.png"></p>

<p>Most references and docs for CORS filtering use the exact same language to describe <code>chainPreflight</code>, but what does it mean for requests to be &ldquo;chained to their target resource?&rdquo; Is this a good thing? If it defaults to true, it must be the expected behaviour&hellip; What about &ldquo;otherwise the filter will response to the preflight?&rdquo; Is that even proper grammar? I asked on <a href="http://stackoverflow.com/q/36414029/1279340">StackOverflow</a>, and five days later, still no answers.</p>

<p>Luckily, I have access to an army of experts at work, and this is what I learned about <strong>chainPreflight</strong>:</p>

<p><img src="/images/160329-preflight-cors/chainPreflight-seq.png"></p>

<p>The &lsquo;target resource&rsquo; is the server endpoint that the request is targeting. If the preflight request is chained to the target resource, it it will pass through the filter (which adds the necessary <code>Allows-*</code> headers) all the way to the endpoint, and the endpoint must have some business logic for handling and responding to the request.</p>

<p>If the preflight request is NOT chained to the target resource, then the filter will add the necessary <code>Allows-*</code> headers and send a response back directly.</p>

<p>Since I don&rsquo;t want to do anything with the OPTIONS preflight request, I can confidently set this option to false, saying &ldquo;whatever you&rsquo;ve got, send it over!&rdquo;</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serving Some Java]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/serving-some-java/"/>
    <updated>2013-08-24T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/serving-some-java</id>
    <content type="html"><![CDATA[<p>For a recent java coding challenge I was asked, among other things, to make a server. It has been several years since I last attempted it, and I had forgotten how easy it could be.</p>

<!--more-->


<h4>Server</h4>

<p>A server, like any good conversationalist, is a good listener. A server is a program running on a computer that listens at a port, waiting to receive instructions.</p>

<p><div>
  <pre><code class='java'>public class Server {
  private static String inputLine;&lt;/p&gt;

&lt;p&gt;  public static void main(String[] args) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static final int PORT_NUMBER = 63400

try {
  // Socket variables
  ServerSocket serverSocket = new ServerSocket(PORT_NUMBER);
  Socket clientSocket = serverSocket.accept();

  // IO variables
  InputStreamReader inputReader = new InputStreamReader(clientSocket.getInputStream());
  BufferedReader bReader = new BufferedReader(inputReader);

  while ((inputLine = bReader.readLine()) != null) {
    System.out.println(inputLine);
  }

} catch (Exception e) {
  System.out.println(e);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
}</code></pre>
</div>
</p>

<p>The server opens a socket on a specified port (in this case, port 63400). A socket is the point at which two-way communication happens between computer programs. The server opens a socket at a port and waits for a client to bind the socket so they can exchange information. It waits for input from the client, with instructions to print out anything the client puts in (line 18). So where is the client?</p>

<h4>Client</h4>

<p>The client is even simpler than the server: it finds the server at the specified port and connects to the socket.</p>

<p><div>
  <pre><code class='java'>public class Client {&lt;/p&gt;

&lt;p&gt;  private static final int PORT_NUMBER = 63400&lt;/p&gt;

&lt;p&gt;  public static void main(String[] args) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try {

  // Socket variables
  Socket socket = new Socket(&quot;localhost&quot;, PORT_NUMBER);
  PrintWriter pWriter = new PrintWriter(socket.getOutputStream(), true);

  pWriter.println(&quot;Hello World!&quot;);

} catch (Exception e) {
  System.out.println(e);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
}</code></pre>
</div>
</p>

<p>With a successful connection, it generates an output stream. If you start the server in one console it will look like it isn&rsquo;t doing anything, but when you start the client in another console you can watch them communicate. The client writes &ldquo;Hello World&rdquo; directly into the port where the server is listening (socket.getOutputStream()), and as instructed, the server obediently prints &ldquo;Hello World&rdquo; to the console.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
</feed>
