<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Interviewing | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/interviewing/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-04-12T12:21:48-07:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Your Foot in the Door]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/get-your-foot-in-the-door/"/>
    <updated>2015-04-12T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/get-your-foot-in-the-door</id>
    <content type="html"><![CDATA[<p>Many people have asked me what it is like on the other side of code school, and if there is any advice I would give to someone before they get their first programming job. Technical ability, problem solving, and communication skills are all essential to success as a developer, and your online presence is a way to demonstrate all three. Getting your foot in the door requires having something to show &mdash; keeping your foot in the door requires a little bit more.</p>

<!--more-->


<h3>Have something to show</h3>

<p>Not every developer spends every waking moment working on open source projects or inventing the next big framework. We all have lives, families, and other pursuits that take priority; <img class="left" src="/images/150412-getting-a-job/Octocat.png" width="300" title="Octocat from www.github.com" >however, experienced programmers likely have solid work-related contributions they can point to during an interview. First-timers need some proof that they can apply what they learn. Side projects show potential employers what you are learning, and that you are interested in programming, not just the salary it comes along with.</p>

<p>Create a <a href="https://github.com/">GitHub</a> account. If you are in code school, you are likely already working towards a portfolio of apps and widgets to show off during an interview. If you are considering code school, this is something you should not wait to do. When you work through a tutorial, commit it to GitHub, give it a README, and include what you are working through and why.</p>

<h3>Start filling your toolbox</h3>

<p>You can usually assemble a piece of Ikea furniture with only an allen key, but what about that desk drawer that suddenly calls for a screwdriver? Completing the task requires the right tools for the job, and your ability to solve a programming problem is no different. Git, Chrome Developer Tools, and Pry are part of the the Swiss Army knife for any web developer.
<img class="right" src="/images/150412-getting-a-job/toolbox.jpg" width="300" title="Fill your toolbox." ></p>

<ul>
<li><p><a href="http://git-scm.com/"><strong>Git</strong></a> is like &ldquo;track changes&rdquo; for source code. The docs describe it as a series of snapshots of your code base. &ldquo;Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to <a href="" title="[Getting started with git](http://git-scm.com/book/en/v2/Getting-Started-Git-Basics)">it</a>.&rdquo; Source control allows you to work in the same code base with other developers and not step on one another&rsquo;s toes. Start with <a href="http://gitimmersion.com/">Git Immersion</a> for some practical experience.</p></li>
<li><p><a href="https://developer.chrome.com/devtools"><strong>Chrome Developer Tools</strong></a> give you access to everything that happens to your application when it is sent to the browser. Troubleshoot Javascript, CSS, and layout issues without having to refresh the page. Check out the tutorials at <a href="http://discover-devtools.codeschool.com/">discover-devtools</a> by CodeSchool.</p></li>
<li><p><a href="https://github.com/pry/pry"><strong>Pry</strong></a> gives you an interactive debugging session wherever you put a breakpoint in a Rails application. <code>binding.pry</code> throws you down the rabbit hole into the inner workings of your program&rsquo;s psyche. Check out <a href="http://katieleonard.ca/blog/2015/exploring-the-stack/">exploring the stack</a> for more details about this powerful tool.</p></li>
<li><p><strong>Use the docs</strong>. Knowing how to find and navigate documentation is more important than remembering how to do File I/O. If you find yourself in a technical interview where they don&rsquo;t let you search the web for help, share your thought process, imagine the solution you might have found had you performed the search, and work your way through the problem with pseudocode. Experienced developers use Google search and StackOverflow constantly, so pop that error message into the search bar to see what turns up. A word to the wise: if an answer was posted more than two years ago, it may no longer be relevant.</p></li>
</ul>


<h3>Get to know your community</h3>

<p>Your next job in programming is more likely to come from someone in your network than from hitting the street with your resume. If you can claim an acquaintance with someone from a company you want to work for, that is one more point in your favour.</p>

<p>Go to meetups. If you are shy about meeting lots of new people at once, try introducing yourself to the invited speakers at the end &mdash; they are usually well connected and respected in the community. If you approach them with your name and a question or comment about their talk, they are likely to remember you.</p>

<h3>Do scary things</h3>

<p>Not like skydiving, or alligator wrestling. Write blogs, contribute to open source projects, start <a href="http://createyourproglang.com/">your own programming language</a>, or become visible on social media. You don&rsquo;t need to be an expert to have an opinion. Don&rsquo;t stop taking risks after you land your first job, either.</p>

<ul>
<li><p><img class="left" src="/images/150412-getting-a-job/against-the-grain.jpg" width="300" title="Do something risky." >Find an area of your work that people are avoiding and become an expert. You will be known as the person who can do that thing we all hate, and your colleagues will value your expertise.</p></li>
<li><p>Take the hardest ticket from the top of the stack. Don&rsquo;t sift through them until you find something you think you know how to do. Your best opportunity to stretch your skills is to do something scary and uncomfortable.</p></li>
</ul>


<p>I work with a lot of people who don&rsquo;t have formal computer science degrees, and while their backgrounds vary, they all share a love of problem solving and a willingness to work hard. Take responsibility for your own learning &mdash; code school will only bring you so far, and the rest is up to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's It Like to Be a Developer?]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/what-is-it-like-to-be-a-programmer/"/>
    <updated>2015-04-11T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/what-is-it-like-to-be-a-programmer</id>
    <content type="html"><![CDATA[<p>My manager has invited me to help her give a talk to students in a Web Development program. I have been working in the field for about 18 months, and a lot of the uncertainty is still fresh in my mind: what is it like to be a programmer? How can I get a job as a junior? What can I do now that will help me in my first job? I didn&rsquo;t know many people in the industry, and was unaware of the vast meetup community<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Answers to these questions were difficult to find online, so over the next few posts I will make an attempt.</p>

<!--more-->


<hr>


<h3>Meetings: Important communication tools.</h3>

<p>Programming is mostly about decision making, and not all decisions can be made alone. Questions like, what technologies to use, how you should spend your time, and how to scale, require meetings with managers and other teams.</p>

<ul>
<li><p><strong>Sprint planning</strong> is a weekly meeting where the team gets together with managers to prioritize tasks for the week. You look back on last week, and either carry over tasks you didn&rsquo;t accomplish, or re-prioritize based on what has arisen in the meantime.</p></li>
<li><p><strong>Standups</strong> happen daily, and should only last around 10 minutes. You each take a turn sharing what you worked on yesterday, what you are working on today, and whether you are blocked by anything. It is important to speak up when you are stuck! Sharing your blockers will usually result in help; someone may have encountered this problem before, have a new approach to suggest, or have insider information that can get you to a solution.</p></li>
<li><p><strong>Demos</strong> will happen on a weekly or bi-weekly basis, and are an opportunity to share your accomplishments. While many stakeholders are involved in the project and sprint planning, they are often disconnected from the work as it is being performed. Regular demos help to keep them in the loop, and are an opportunity to explain both progress and unexpected delays.</p></li>
<li><p><strong>Code reviews</strong> can be formal or informal, and allow your team to gain consensus on style, design, performance, and testing. Your code design decisions will have an impact on the project as a whole, so it never hurts to get feedback from a teammate before you ship it. Readability is more important than cleverness, and is a kindness to future maintainers.</p></li>
</ul>


<p>A portion of your week will always be spent in meetings. Try to identify when your most productive hours are in the day, and keep that time free. For example, if you lump meetings around lunch (none before 11am or after 2pm) you have a solid chunk of time in the morning and the afternoon to focus effectively.</p>

<h3>Stories: How big ideas are turned into actions.</h3>

<p>An idea like &ldquo;improve the user&rsquo;s experience of widget B&rdquo; is a goal, not a task. It can be broken down into <strong>stories</strong> such as: <em>identify the problem</em>, <em>brainstorm solutions</em>, <em>design the new widget</em>, and <em>implement the new widget</em>. Each of these stories are actionable: there is a clear path from start to finish. Use the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">single-responsibility principle</a> in your stories as well as in your code: if you use the word AND to describe the task, that is a hint that you should have two stories instead of one. Most companies will use a task management, or <strong>ticket</strong> system such as Pivotal Tracker or Jira, where you can see what work is assigned to you, and where managers can check in on your progress.</p>

<h3>Feature Work: What should be built?</h3>

<p>Product managers have their eye on the market. They know what features our customers want, and they know what our competitors offer. A product manager will build a product road-map with a long schedule (think months and years, not weeks). The team will sit down with the feature requirements and a first-draft design, break it down into stories, and estimate the time/complexity of each story. Managers then apportion those estimates into chunks of work &mdash; in <strong>Agile</strong>, these chunks are laid out in <strong>sprints<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></strong>.</p>

<p>Defining work in this way lets you identify what can be done in parallel and what needs to be in place before the next task can be accomplished. It also gives project managers the information they need to make decisions about what to sacrifice in order to meet a deadline. If the project is over the time budget, and gold-plated widget A needs features 1, 2, and 3, then maybe you can ship the widget with only 1 and 2, but save 3 for later. Sometimes you have to compromise on feature completeness just to get it out the door.</p>

<h3>Troubleshooting and Maintenance: Detective work.</h3>

<p>Finding a bug is like being a detective: you gather clues, follow leads, and occasionally end up lost in a blind alley. A single line of code can hold multiple bugs (Pro tip: watch out for Regexes<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> &mdash; they are a great place for bugs to hide). In a code base with hundreds of thousands of lines, you will inevitably spend more time hunting and fixing bugs than writing new code.</p>

<h3>Deploying code: Sending it into the wild.</h3>

<p>Running an application in production is not the same as running it on your computer. Your application may need to serve thousands of requests per second, and a single instance running on a single server won&rsquo;t cut it. There is a whole stack of management software that you would do well to be familiar with, and having at least a passing familiarity with <a href="https://jenkins-ci.org/">Jenkins</a>, <a href="http://capistranorb.com/">Capistrano</a>, and <a href="http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html">bash scripting</a> will help you when it is your turn to carry the pager.</p>

<h3>Pager duty: Evil alarm clock.</h3>

<p>When you write software that your customers use around the clock, you have to be there when things break, no matter what time. Most companies will institute a rotation to share the burden of vigilence around the team. Having great documentation about what to do in an emergency is essential to finding a clear path of action at 3am. As with anything, the more you prepare, the higher your confidence level will be.</p>

<p>The job is far from routine because of the diverse set of problems to solve. I have become comfortable grabbing a story without already knowing the answer, partly from knowing that if I get stuck I am no more than a &ldquo;Hey Bryan,&rdquo; or &ldquo;Hey KWu,&rdquo; away from someone who wants to help, even if it is at 3am (thanks again, Vince!).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If you are in Portland, Oregon, checkout <a href="http://calagator.org/">Calagator</a>. Otherwise, try <a href="http://www.meetup.com/">Meetup.com</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Read more about <a href="http://en.wikipedia.org/wiki/Agile_software_development">Agile methodology</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Regex (short for regular expression) is a search pattern based on a sequence of characters.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
