<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2014-08-09T15:04:51-07:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript Getters and Setters]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/javascript-getters-and-setters/"/>
    <updated>2014-08-09T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/javascript-getters-and-setters</id>
    <content type="html"><![CDATA[<p>Getters and setters make sense in java, and I just learned that there is an equivalent pattern in javascript:</p>

<p>
```javascript</p>

<blockquote><p>var favouriteBook = {
  _title: &ldquo;Catch-22&rdquo;,
  get title() {</p>

<pre><code>console.log("Getting title", this._title);
</code></pre>

<p>  },
  set title(value) {</p>

<pre><code>this._title = value;
console.log("Setting title", this._title);
</code></pre>

<p>  }
}
favouriteBook.title
 Getting title Catch-22</p>

<p>favouriteBook.title = &ldquo;Slaughterhouse 5&rdquo;
 Setting title Slaughterhouse 5</p>

<p>favouriteBook.title
 Getting title Slaughterhouse 5
```
</p></blockquote>

<p>The <code>get</code> and <code>set</code> key words are reserved for accessing or mutating a data property (instance variable). Of course, one can get and set data properties directly:</p>

<p>
```javascript</p>

<blockquote><p>favouriteBook.title
&ldquo;Catch-22&rdquo;</p>

<p>favouriteBook.title = &ldquo;Slaughterhouse 5&rdquo;
favouriteBook.title
&ldquo;Slaughterhouse 5&rdquo;
```
</p></blockquote>

<p>The advantage of using a getter and setter is that if a setter is defined without a getter, one can change the value of the data property, but can never read it. If a getter is defined without a setter, then the variable can be read but not be changed:</p>

<p>
```javascript</p>

<blockquote><p>var favouriteBook = {
  _title: &ldquo;Catch-22&rdquo;,
  get title() {</p>

<pre><code>console.log("Getting title", this._title);
</code></pre>

<p>  }
}</p>

<p>favouriteBook.title
Getting title Catch-22</p>

<p>favouriteBook.title = &ldquo;Slaughterhouse 5&rdquo;</p>

<p>favouriteBook.title
Getting title Catch-22
```
</p></blockquote>

<p>The setter function will fail silently, which makes troubleshooting difficult but ensures that the property remains undisturbed.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/Principles-Object-Oriented-JavaScript-Nicholas-Zakas/dp/1593275404/ref=sr_1_1?ie=UTF8&amp;qid=1407339036&amp;sr=8-1&amp;keywords=principles+of+object+oriented+javascript">The principles of object-oriented javascript</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Constructors and Prototypes]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/constructors-and-prototypes/"/>
    <updated>2014-08-07T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/constructors-and-prototypes</id>
    <content type="html"><![CDATA[<p>Object-oriented programming (OOP) can be thought of as describing the properties and behaviour of a noun in a blueprint, which is used to create instances of an object. The blueprint is defined as a Constructor &mdash; a function that identifies a class of objects and begins with a capital letter. New objects are created by calling a Constructor with the keyword <code>new</code>.</p>

<p>
```javascript</p>

<blockquote><p>function Book(title, author) {</p>

<pre><code>this.title = title;
this.author = author;
this.listing = function() {
  console.log([this.title, "by", this.author].join(' '));
}
</code></pre>

<p>  }</p>

<p>var book1 = new Book(&ldquo;Catch-22&rdquo;, &ldquo;Joseph Heller&rdquo;)</p>

<p>book1.title
&ldquo;Catch-22&rdquo;</p>

<p>book1.author
&ldquo;Joseph Heller&rdquo;</p>

<p>book1.listing()
Catch-22 by Joseph Heller
```
</p></blockquote>

<p>The Book constructor specifies two properties, <code>title</code> and <code>author</code>, and one method, <code>listing</code>. Defining a method in a constructor ensures that all instances of the Object have the same method, but it also results in duplication of the method in the memory stack for every instance of the Object. If I made 1000 instances of Book, there would be 1000 instances of the listing method, even though it is only defined once, and is the same for every object.</p>

<h4>Memory stack of objects with instance methods:</h4>

<p><img src="http://www.katieleonard.ca/images/post_constructor_memory_stack.png"></p>


<p>Enter Prototypes.</p>

<p>A Prototype is a property that is shared by all instances of an object. When the constructor for an object is called for the first time, all the object&rsquo;s properties are loaded onto the memory stack as well as the object&rsquo;s Prototype. All subsequent instances of that object include a pointer to the same Prototype, and they pass in a pointer to themselves as <code>this</code> whenever they call a method from the Prototype.</p>

<p>
```javascript
function Book(title, author) {
  this.title = title;
  this.author = author;
}</p>

<p>Book.prototype = {
  listing: function() {</p>

<pre><code>console.log([this.title, "by", this.author].join(' '));
</code></pre>

<p>  }
}</p>

<blockquote><p>var book1 = new Book(&ldquo;Catch-22&rdquo;, &ldquo;Joseph Heller&rdquo;)
var book2 = new Book(&ldquo;Slaughterhouse 5&rdquo;, &ldquo;Kurt Vonnegut&rdquo;)</p>

<p>book1.listing()
Catch-22 by Joseph Heller
book2.listing()
Slaughterhouse 5 by Kurt Vonnegut</p>

<p>book1.hasOwnProperty(&ldquo;listing&rdquo;)
false
&lsquo;listing&rsquo; in book1
true
```
</p></blockquote>

<h4>Memory stack of object with prototypes:</h4>

<p><img src="http://www.katieleonard.ca/images/post_prototype_memory_stack.png"></p>


<p>Reduced memory consumption is one advantage of keeping a reference to a prototype instead of a complete copy. Another advantage is that if additions are made to the Prototype, the changes will be extended to all instances.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['In' Operator Avoids False Falsies]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/in-operator-avoid-false-falsies/"/>
    <updated>2014-08-05T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/in-operator-avoid-false-falsies</id>
    <content type="html"><![CDATA[<p>I have encountered more than my share of javascript errors because I have made assumptions about the object I am working with, such as assuming that an object contains a property, and that I can call methods on that property:</p>

<p>
```javascript</p>

<blockquote><p>myObject.data[0]
TypeError: Cannot read property &lsquo;0&rsquo; of undefined
```
</p></blockquote>

<p>This line contains four assumptions, and therefore four places it can fail:</p>

<ol>
<li><code>myObject</code> exists</li>
<li><code>myObject</code> contains a property called <code>data</code></li>
<li><code>data</code> is an array</li>
<li><code>data</code> is non-empty</li>
</ol>


<p>Presuming that if <code>myObject</code> does not exist means you have bigger problems, it is easy to fall into the trap of checking for the existence of a property by gating a conditional with it:</p>

<p>
<code>javascript
if(myObject.data) {
  //do something important with the data
}
</code>
</p>

<p>This technique will work in development, but the voice of experience tells us that it will not work in production. The reason it will not work is that javascript has more falsy values than most languages. Falsy values include the number zero, empty strings, null, undefined, NaN, and of course, the boolean false. So, if it is possible <code>myObject.data</code> to contain derived information, you have signed up to troubleshoot some unexpected behaviour.</p>

<p>Fortunately, javascript has provided a failsafe way to check the existence of a property, regardless of the data it contains. The <code>in</code> operator checks if the key exists in the object&rsquo;s hash table, and doesn&rsquo;t care if it is a prototype or singleton property.</p>

<p>
```javascript</p>

<blockquote><p>var myObject = {}
undefined
&lsquo;data&rsquo; in myObject
false</p>

<p>myObject.data = &lsquo;&rsquo;
&ldquo;&rdquo;
&lsquo;data&rsquo; in myObject
true
myObject.data == true
false
```
</p></blockquote>

<p><code>('data' in myObject)</code> returns false if the property is undefined. If the property is defined, it returns true even if data contains a falsy value.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/Principles-Object-Oriented-JavaScript-Nicholas-Zakas/dp/1593275404/ref=sr_1_1?ie=UTF8&amp;qid=1407339036&amp;sr=8-1&amp;keywords=principles+of+object+oriented+javascript">The principles of object-oriented javascript</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stringify Cyclic Structures With Censors]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/stringify-cyclic-structures-with-censors/"/>
    <updated>2014-07-23T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/stringify-cyclic-structures-with-censors</id>
    <content type="html"><![CDATA[<p>Troubleshooting a d3 data visualization sometimes requires visual inspection of the underlying JSON data structure. You can convert linear data structures to a JSON string using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"><code>JSON.stringify</code></a><!--more-->:</p>

<p>
```javascript JSON.stringify</p>

<blockquote><p>x = {}
JSON.stringify(x)
&ldquo;{}&rdquo;
x.y = [&ldquo;1&rdquo;, &ldquo;2&rdquo;, &ldquo;3&rdquo;]
JSON.stringify(x)
&ldquo;{"y&rdquo;:[&ldquo;1&rdquo;,&ldquo;2&rdquo;,&ldquo;3&rdquo;]}&ldquo;
x.z = {a: ["b&rdquo;, &ldquo;c&rdquo;]}
JSON.stringify(x)
&ldquo;{"y&rdquo;:[&ldquo;1&rdquo;,&ldquo;2&rdquo;,&ldquo;3&rdquo;],&ldquo;z&rdquo;:{&ldquo;a&rdquo;:[&ldquo;b&rdquo;,&ldquo;c&rdquo;]}}&ldquo;
```
</p></blockquote>

<p>Data structures that contain both upstream and downstream links between objects are cyclic structures. From the docs:</p>

<blockquote><p>JSON does not support cyclic structures.  Attempting to convert such an object into JSON format will result in a TypeError exception.</p></blockquote>

<p>
```javascript</p>

<blockquote><p>x = {}
  y = {}
  x.children = [y]
  y.parent = x
Object {children: [Object]}</p>

<p>JSON.stringify(x)
TypeError: Converting circular structure to JSON
```
</p></blockquote>

<p>How can I look at a tree, or double-linked list data structure that is rife with circular links? JSON.stringify() takes a second argument called a censor in the docs. The censor is the programmatic court of appeal for whenever a cyclic structure is encountered:</p>

<p>
```javascript
function censor(key, value) {
  if (typeof value === &ldquo;object&rdquo;) {</p>

<pre><code>return undefined;
</code></pre>

<p>  }
  return value;
}
```
</p>

<p>Of course, this approach will eliminate most of the tree structure by removing all objects from the JSON. Certainly we can return something more creative than <code>undefined</code>&hellip;</p>

<p>
```javascript
function censor(key, value) {
  if (value &amp;&amp; typeof value === &ldquo;object&rdquo; &amp;&amp; value.parent) {</p>

<pre><code>value.parent = value.parent.name;
</code></pre>

<p>  }
  return value;
}
```
</p>

<p>In this censor, we replace the parent object with the parent&rsquo;s name, and JSON.stringify has no complaints:</p>

<p>
```javascript</p>

<blockquote><p>function censor(key, value) {
  if (value &amp;&amp; typeof value === &ldquo;object&rdquo; &amp;&amp; value.parent) {</p>

<pre><code>value.parent = value.parent.name;
</code></pre>

<p>  }
  return value;
}</p>

<p>x = {name: &ldquo;Theodore&rdquo;}
Object {name: &ldquo;Theodore&rdquo;}
y = {name: &ldquo;Alvin&rdquo;}
Object {name: &ldquo;Alvin&rdquo;}
x.children = [y]
[Object]
y.parent = x
Object {name: &ldquo;Theodore&rdquo;, children: Array[1]}</p>

<p>JSON.stringify(x)
TypeError: Converting circular structure to JSON</p>

<p>JSON.stringify(x, censor)
&ldquo;{"name&rdquo;:&ldquo;Theodore&rdquo;,&ldquo;children&rdquo;:[{&ldquo;name&rdquo;:&ldquo;Alvin&rdquo;,&ldquo;parent&rdquo;:&ldquo;Theodore&rdquo;}]}&ldquo;
```
</p></blockquote>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery-UI and Meteor]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/jquery-ui-and-meteor/"/>
    <updated>2014-06-16T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/jquery-ui-and-meteor</id>
    <content type="html"><![CDATA[<p>I have been working on <a href="virtualplaybill.net">Virtual Playbill</a> for the last few weeks using meteor, bootstrap, and a number of other UI packages. I wanted to use a datepicker as a form field, but getting jQuery-ui working was not a straightforward package download as many other features are. There are currently 5 packages available for installation on <a href="https://atmospherejs.com/package/jquery-ui?q=jquery-ui">Atmosphere</a> (the meteor package manager), and I attempted several of them before finding the combination that worked<!--more-->:</p>

<h3>1. Install the jQuery-ui package from <a href="https://atmospherejs.com/package/jquery-ui">Atmosphere</a></h3>

<p><code>
mrt add jquery-ui
</code></p>

<h3>2. Download jQuery-ui</h3>

<p>For me, the meteorite package did not properly install the css or images I needed to get the datepicker working, so I downloaded <a href="http://jqueryui.com/">jquery-ui</a>, swiped the css file (un-minified), and added it to my <code>client/stylesheets</code> folder.</p>

<h3>3. Add jQuery-ui images</h3>

<p>The css styled the datepicker calendar perfectly, except for the previous month and next month buttons. jQuery-ui comes with a few standard icons, so I placed the jQuery-ui images folder in <code>/public</code>, since static files must be kept in a public folder for meteor to acknowledge them.</p>

<h3>4. Relocate the images</h3>

<p>The jQuery-ui css file tries to locate the images in its parent folder, but as I mentioned, static assets = public folder. The advantage of the public folder is that all assets can be referenced with a leading slash: <code>/images</code>. I scanned the un-minified version of the css and changed the image url locations from <code>images/...</code> to <code>/images/...</code></p>

<p>Voila! A beautiful, functional datepicker!</p>

<p><img src="/images/post_datepicker.png" /></p>
]]></content>
  </entry>
  
</feed>
