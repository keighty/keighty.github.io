<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2014-02-21T07:15:47-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functional Arguing]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/functional-arguing/"/>
    <updated>2014-02-20T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/functional-arguing</id>
    <content type="html"><![CDATA[<p>The <code>arguments</code> variable is a hidden parameter in javascript functions that contains all the arguments for the invocation in a pseudo-array (ie: it does not have array functions other than length and indexing).</p>

<p><code>javascript
instance.headline = function (h) {
  if (!arguments.length) return headline;
  headline = h;
  return instance;
};
</code>
Even though the function specifically calls for an argument (<code>h</code>), it can still be called without one. This construction has a ruby equivalent, <code>attr_accessor :headline</code>, which behaves as a getter and a setter, depending on the arguments provided (none, or <code>headline = new_value</code>).</p>

<p>This &ldquo;variable-parameter&rdquo; function design is what enables method chaining. When the function is called as a getter it returns a string, but when it is called as a setter it returns the invoking object, passing itself along to the next method:</p>

<p>```javascript
var widget = SimpleWidget({ color: &ldquo;#6439ed&rdquo; })</p>

<pre><code>            .headline("SimpleWidget")
            .description("This is a simple widget")
            .render();
</code></pre>

<p>```</p>

<!--more-->


<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For Score]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/for-score/"/>
    <updated>2014-02-11T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/for-score</id>
    <content type="html"><![CDATA[<p>The <code>for in</code> statement can function as a quick and semantic iterator for looping over object properties.</p>

<p>```javascript In your console, try</p>

<blockquote><p>var person = {</p>

<pre><code>first_name: "Katie",
last_name : "Leonard"
</code></pre>

<p>  };</p>

<p>var name;</p>

<p>for(name in person){</p>

<pre><code>console.log(name + " : " + person[name];
</code></pre>

<p>  )};</p></blockquote>

<p>first_name : Katie
last_name : Leonard
```</p>

<!--more-->


<p>Awesome</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=bridgeforpoke-20">JavaScript: The Good Parts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Augmented Objects]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/augmented-objects/"/>
    <updated>2014-02-09T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/augmented-objects</id>
    <content type="html"><![CDATA[<p>Because it bears repeating: javascript and ruby have many features in common, including the ability to add functionality to existing objects.</p>

<!--more-->


<h2>Ruby singleton</h2>

<p>You can add methods to an instance of a class without affecting any other instances of that class.
```bash</p>

<blockquote><p>x, y = &ldquo;stringA&rdquo;, &ldquo;stringB&rdquo;
def x.baz
  puts &ldquo;I can haz?&rdquo;
end</p>

<h1>=> nil</h1>

<p>x.baz
I can haz?</p>

<h1>=> nil</h1>

<p>y.baz
NoMethodError: undefined method <code>baz' for "stringB":String
  from (irb):62
  from /home/katherine/.rvm/rubies/ruby-2.0.0-rc1/bin/irb:12:in</code><main>&lsquo;
```</p></blockquote>

<h2>Javascript augmenting</h2>

<p>You can add methods to an of an Array object without affecting any other array objects.</p>

<p>```</p>

<blockquote><p>var data1 = [1, 2, 3, 4, 5, 6];
undefined
var data2 = [2, 4, 6, 8, 10, 12];
undefined
data1.total = function() { return 21; };
function () { return 21; }
data1.total();
21
data2.total()
TypeError: Object [object Array] has no method &lsquo;total&rsquo;
```</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Augmented Types]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/augmented-types/"/>
    <updated>2014-02-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/augmented-types</id>
    <content type="html"><![CDATA[<p>Javascript and Ruby have many features in common, including the ability to add functionality to existing objects.</p>

<!--more-->


<h2>Ruby monkeypatching</h2>

<p>Ruby allows you to reopen classes to add new functionality. For example, I can reopen the String class to add a new method, &ldquo;foo()&rdquo;:</p>

<p>```bash
irb > class String
irb >   def foo
irb >     &ldquo;I see you!&rdquo;
irb >   end
irb > end</p>

<h1>=> nil</h1>

<p>irb > &ldquo;&rdquo;.class</p>

<h1>=> String</h1>

<p>irb > &ldquo;&rdquo;.foo</p>

<h1>=> &ldquo;I see you!&rdquo;</h1>

<p>```</p>

<h2>Javascript augmenting</h2>

<p>Javascript allows you to augment existing objects with additional functionality.</p>

<p>```javascript</p>

<blockquote><p>String.prototype.foo = function foo() {</p>

<pre><code>return "I see you!";
</code></pre>

<p>  }
function foo() {</p>

<pre><code>return "I see you!";
</code></pre>

<p>  }
typeof(&ldquo;&rdquo;);
&ldquo;string&rdquo;
&ldquo;&rdquo;.foo()
&ldquo;I see you!&rdquo;
```</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Abatement]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/global-abatement/"/>
    <updated>2014-02-07T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/global-abatement</id>
    <content type="html"><![CDATA[<h3>or, What the heck is global abatement?</h3>

<p><strong>tldr</strong>: Global variables are <a href="http://en.wikipedia.org/wiki/Code_smell">code smells</a>. Declaring variables inside an application-level function serves to namespace the variables and minimizes the use of global variables. <!--more--></p>

<p>Javascript has function-level scoping, which means that variables declared anywhere within a function are scoped to that function. Writing a javascript without an enclosing function leaves your declared variables vulnerable to name collisions, or reassignment by other javascripts.</p>

<p>A <strong>global abatement</strong> is a strategy used to reduce the vulnerability of your javascript variables by removing them from the global scope. Application namespacing is one such strategy:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>BAD GLOBAL</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">first_name</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Hello</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="nx">last_name</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Kitty</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>GOOD LOCAL</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">first_name</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Hello</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="nx">last_name</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Kitty</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Declaring an application-level function ensures that the correct <code>person</code> is called when needed. It improves readability by essentially flagging the scope of the variable and reducing ambiguity.</p>

<p><a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=bridgeforpoke-20">JavaScript: The Good Parts</a></p>
]]></content>
  </entry>
  
</feed>
