<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2016-03-30T22:05:58-07:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    <email><![CDATA[keighty.leonard@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Preflight Check With CORS]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/preflight-check-with-cors/"/>
    <updated>2016-03-29T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/preflight-check-with-cors</id>
    <content type="html"><![CDATA[<p>Modern web applications can draw resources from anywhere on the web. Fonts, JavaScript libraries, images, and other data can be fetched from CDNs, Amazon, IMDB, or anywhere else that provides a public API. Early browsers restricted web applications to same-origin requests, which prevented the sharing of resources between applications, but also ensured that data from one application could not be tampered with by another. The thinkers at the W3C came up with a means of communicating safe cross-origin requests that would allow even destructive remote actions to be performed, as long as the server consented to receive the request. Enter CORS, and preflighting.</p>

<!--more-->


<h3>What is CORS?</h3>

<p>Cross-Origin Resource Sharing occurs when JavaScript on a web page requests data from (or sends data to) a location on a different host. Any website that embeds a video from YouTube, uses a custom font, or posts to social media on your behalf, is making a CORS request. CORS is a <a href="https://www.w3.org/TR/cors/">set of web standards</a> developed to enable safe cross-domain communication.</p>

<h3>What is preflighting?</h3>

<p>CORS functions through the specification of new HTTP headers that allow servers to describe the origin and nature of the request. For each outgoing request to a different domain, the browser will look at the headers to determine if the request that looks like it will affect data on the receiving server. Any simple request that uses one of the common HTTP verbs and a basic Content-Type are allowed to pass without further comment. But if the request has different header values, the browser checks with the server first to make sure the request is expected. This is called a pre-flight check.</p>

<h3>What does a simple CORS request look like?</h3>

<p>For simple requests (no pre-flight check), the method must be one of:</p>

<pre><code>- GET
- HEAD
- POST
</code></pre>

<p>The only extra headers allowed are:</p>

<pre><code>- Accept
- Accept-Language
- Content-Language
- Content-Type
</code></pre>

<p>For the Content-Type header, the only allowed values are:</p>

<pre><code>- application/x-www-form-urlencoded
- multipart/form-data
- text/plain
</code></pre>

<p>XMLHttpRequests (aka XHRs or ajax) use CORS to mitigate the risks of pulling or pushing sensitive data across domains. For example:</p>

<p><code>javascript
var body = 'very safe, ordinary text content'
var url = 'http://api.example.com'
var request = new XMLHttpRequest()
request.open('POST', url, true)
request.setRequestHeader('Content-Type', 'text/plain')
request.send()
</code></p>

<p><img src="/images/160329-preflight-cors/cors-without-preflight.png"></p>

<p>The browser checks out the request, sees that it is unlikely to have any negative consequences, and passes it along to the requested endpoint. In the Network tab, simple CORS requests will appear by themselves:</p>

<p><img src="/images/160329-preflight-cors/one-request.png"></p>

<h3>What does a pre-flight CORS request look like?</h3>

<p>For non-simple requests, the method could be any of the HTTP verbs along with any other combination of headers. For example:</p>

<p><code>javascript
var body = 'possibly unstable or malicious content'
var url = 'http://api.example.com'
var request = new XMLHttpRequest()
request.open('POST', url, true)
request.setRequestHeader('Content-Type', 'application/json')
request.send()
</code></p>

<p>In this request I am trying to POST a JSON object to an API endpoint, which could potentially have destructive consequences for data on the other side of the endpoint. When the browser inspects the headers of this request it gets suspicious, and fires off a preliminary request to the endpoint with the meta data from the request:</p>

<p><img src="/images/160329-preflight-cors/cors-with-preflight.png"></p>

<p>The server at the endpoint responds to the pre-flight request with a list of authorized headers, including acceptable request origins, content, and actions.</p>

<p>Ignoring for a moment that the requests fail (because api.example.com does not exist), the non-simple CORS request produces two requests instead of one:
<img src="/images/160329-preflight-cors/two-requests.png"></p>

<p>The result of the pre-flight OPTIONS request will determine if the second is ever sent on to the endpoint. This is how browsers keep your application data secure from malicious or unintended changes.</p>

<h3>Why OPTIONS, and not POST?</h3>

<p>I found <a href="http://stackoverflow.com/a/16945321">this great answer</a> on stackoverflow that explains why the creators of CORS made a new request type, <code>OPTIONS</code>. Before the CORS standards were introduced, neither browsers nor servers knew how to handle cross-domain requests. Browsers would throw an error, but servers would process the request without concern. Inventing a new method type that CORS-enabled browsers AND CORS-aware servers could handshake with ensures that both sides are sensible to the meaning of the pre-flight request.</p>

<h4>RESOURCES</h4>

<ul>
<li>Learn more about the web standards at <a href="https://www.w3.org/TR/cors/">W3C</a></li>
<li>Find out more about how CORS is <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests:">implemented at Mozilla</a></li>
<li>Find out what web browsers support CORS at <a href="http://caniuse.com/#search=CORS">caniuse.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Object Property Meta Properties]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/javascript-object-property-meta-properties/"/>
    <updated>2015-11-07T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/javascript-object-property-meta-properties</id>
    <content type="html"><![CDATA[<p>JavaScript Objects are complex types, and even defined properties have a control panel of their own. You can view the content of the control panel using <code>Object.getOwnPropertyDescriptor()</code>, and flip their switches using <code>Object.defineProperty()</code>. <!--more--></p>

<blockquote><p>Note: These property descriptors are for <code>own properties</code> &mdash; that is, properties that are directly defined on an object, not those that come along for the ride on the object&rsquo;s prototype chain.</p></blockquote>

<h3>The property descriptor holds meta data</h3>

<p>```</p>

<blockquote><p>var me = {
  name: &ldquo;Katie&rdquo;
}</p>

<p>Object.getOwnPropertyDescriptor( me, &ldquo;name&rdquo; )
{
  value: &ldquo;Katie&rdquo;, // the value associated with the property
  writable: true,   // true if the value of the property can be changed
  enumerable: true, // true if the property shows up during enumeration of the properties
  configurable: true // true if any of these meta properties can be changed
}
```</p></blockquote>

<h3>Change the property value</h3>

<p>```
Object.defineProperty( me, &ldquo;name&rdquo;, {
  value: &ldquo;keighty&rdquo;
})</p>

<p>me.name // &ldquo;keighty&rdquo;
```</p>

<h3>Make the property read only</h3>

<p>```
Object.defineProperty(me, &ldquo;name&rdquo;, {
  writable: false
})</p>

<p>me.name = &ldquo;k80&rdquo;
me.name  //&ldquo;keighty&rdquo; &mdash; actual value of me.name did not change
```</p>

<h3>Make the property hidden from for-loops (or any enumeration)</h3>

<p>```
me.hobbies = [&ldquo;bridge&rdquo;, &ldquo;curling&rdquo;, &ldquo;tap dancing&rdquo;]
me // Object {hobbies: Array[3], name: &ldquo;keighty&rdquo;}</p>

<p>for(fact in me) {
 console.log(fact)
}
// All the properties defined on me are written to the console:
// name
// hobbies</p>

<p>Object.defineProperty(me, &ldquo;name&rdquo;, {
 enumerable: false
})</p>

<p>for(fact in me) {
 console.log(fact)
}
// Actually.. only enumerable properties are written to the console:
// hobbies
```</p>

<h3>Freeze the property</h3>

<p>```
Object.defineProperty(me, &ldquo;name&rdquo;, {
 configurable: false
})</p>

<p>Object.getOwnPropertyDescriptor(me, &ldquo;name&rdquo;)
// { value: &ldquo;keighty&rdquo;,
//   writable: false,
//   enumerable: false,
//   configurable: false }</p>

<p>Object.defineProperty(me, &ldquo;name&rdquo;, {
 writable: true
})</p>

<p>Uncaught TypeError: Cannot redefine property: name(â€¦)
```</p>

<p>From <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-8.10">the docs</a>: &ldquo;The Property Descriptor type is used to explain the manipulation and reification of named property attributes. Use Object.defineProperty for fine-grained control over the visibility and mutability of your object&rsquo;s properties.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gaining Closure Through Modules]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/managing-modules/"/>
    <updated>2014-09-06T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/managing-modules</id>
    <content type="html"><![CDATA[<p>If you have more than one javascript running on a page, you have likely experienced the hell of trying to debug a problem caused by naming collisions. Developing the scripts in isolation, it makes sense to assign widgetA.name dynamically using jQuery, but then why does the title of widgetGraphB disappear? Avoid the pain of unintended consequences by namespacing your scripts. <!--more--></p>

<p>Closures occur when you pass functions to variables to call at a later date. The javascript engine does all the work of compiling the script and loading the contents into the memory stack, but until the function is called the stack just sits there, sealed like a time capsule.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Closure in the wild </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">timeCapsule</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">year</span> <span class="o">=</span> <span class="mi">1999</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">party</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;We&#39;re gonna party like it&#39;s &quot;</span> <span class="o">+</span> <span class="nx">year</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="nx">party</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">year</span> <span class="o">=</span> <span class="mi">2099</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tonight</span> <span class="o">=</span> <span class="nx">timeCapsule</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">tonight</span><span class="p">();</span> <span class="c1">// We&amp;rsquo;re gonna party like it&amp;rsquo;s 1999</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>party()</code> function has a closure over <code>timeCapsule()</code>, which means all the variables and functions within timeCapsule remain unmolested by any assignments made outside of their scope.</p>

<h3>Modules use closure to encapsulate scope.</h3>

<p>Breaking your monolithic javascript into modules is a great way to separate concerns and create closures.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myModule.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">myModuleFunction</span><span class="p">()</span> <span class="p">{</span> <span class="err">/&lt;em&gt; Do work1 &lt;/em&gt;/ }</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">mySecondModuleFuntion</span><span class="p">()</span> <span class="p">{</span> <span class="err">/&lt;em&gt; Do work2 &lt;/em&gt;/ }&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">exports</span><span class="p">.</span><span class="nx">myModuleFunction</span> <span class="o">=</span> <span class="nx">myModuleFunction</span><span class="p">;</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">mySecondModuleFunction</span> <span class="o">=</span> <span class="nx">mySecondModuleFunction</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Using the module </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myModule</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">myModule</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">myModule</span><span class="p">.</span><span class="nx">myModuleFunction</span><span class="p">();</span> <span class="c1">// performs work1</span>
</span><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">mySecondModuleFunction</span><span class="p">();</span> <span class="c1">// performs work2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Using modules will prevent naming conflicts on functions and variables:</p>

<p>
```javascript
var module1 = require(&ldquo;myModuleName&rdquo;);</p>

<p>myModuleFunction() {
  console.log(&ldquo;All work and no play makes module1 a dull script;&rdquo;);
}</p>

<p>module1.myModuleFunction(); // performs work1
myModuleFunction(); // outputs snarky phrase</p>

<p>```
</p>

<p>Voila &mdash; no conflicts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Formatting Numbers the Easy Way]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/formatting-numbers-the-easy-way/"/>
    <updated>2014-08-23T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/formatting-numbers-the-easy-way</id>
    <content type="html"><![CDATA[<p>D3 has an awesome number formatting function that I discovered only after hacking my own. My first approach was to use string and array manipulation to convert 1234567890 to 1,234,567,890:</p>

<p>
`&ldquo;javascript
function numberSmoothing(value) {
  // split the number into a character array and reverse it
  reversedNumber = (value).toString().split(&rdquo;).reverse();</p>

<p>  // [&ldquo;0&rdquo;, &ldquo;9&rdquo;, &ldquo;8&rdquo;, &ldquo;7&rdquo;, &ldquo;6&rdquo;, &ldquo;5&rdquo;, &ldquo;4&rdquo;, &ldquo;3&rdquo;, &ldquo;2&rdquo;, &ldquo;1&rdquo;]</p>

<p>  // push the numbers onto another array in groups of 3 and add a comma
  chunkedNumber = [];
  while(reversedNumber.length > 3) {</p>

<pre><code>var numberChunk = reversedNumber.splice(3);
chunkedNumber.push(reversedNumber.join('') + ',');
reversedNumber = numberChunk;
</code></pre>

<p>  }</p>

<p>  // push the remaining digits onto the array
  chunkedNumber.push(reversedNumber.join(&lsquo;&rsquo;));</p>

<p>  // [&ldquo;098,&rdquo;, &ldquo;765,&rdquo;, &ldquo;432,&rdquo;, &ldquo;1&rdquo;]</p>

<p>  // reverse each of the strings in the array and rejoin them
  for(var j = 0; j &lt; chunkedNumber.length; j++){</p>

<pre><code>chunkedNumber[j] = chunkedNumber[j].split('').reverse().join('');
</code></pre>

<p>  }</p>

<p>  // [&ldquo;,890&rdquo;, &ldquo;,567&rdquo;, &ldquo;,234&rdquo;, &ldquo;1&rdquo;]</p>

<p>  return chunkedNumber.reverse().join(&lsquo;&rsquo;);
}</p>

<blockquote><p>numberSmoothing(1234567890)
&ldquo;1,234,567,890&rdquo;</p></blockquote>

<p>```
</p>

<p>While it was a fun mental exercise to implement number formatting, I stumbled across this handy d3 function after I was already done:</p>

<p>
```</p>

<blockquote><p>var format = d3.format(&ldquo;,&rdquo;);
format(1234567890);
&ldquo;1,234,567,890&rdquo;
```
</p></blockquote>

<p>As it turns out, any way one might want to format a number has <a href="https://github.com/mbostock/d3/wiki/Formatting#d3_format">already been implemented in d3</a>. It is similar to the mini-formatting language from python:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[â€‹[fill]align][sign][symbol][0][width][,][.precision][type]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
```javascript
// add commas for the thousands separator</p>

<blockquote><p>var format = d3.format(&lsquo;,&rsquo;)
format(1234567890)
&ldquo;1,234,567,890&rdquo;</p></blockquote>

<p>// add a sign for positive and negative numbers</p>

<blockquote><p>var format = d3.format(&lsquo;+,&rsquo;)
format(1234567890)
&ldquo;+1,234,567,890&rdquo;</p>

<p>format(-1234567890)
&ldquo;-1,234,567,890&rdquo;</p></blockquote>

<p>// add a currency sign</p>

<blockquote><p>var format = d3.format(&lsquo;+$,&rsquo;)
format(1234567890)
&ldquo;+$1,234,567,890&rdquo;</p></blockquote>

<p>// as a percentage</p>

<blockquote><p>var format = d3.format(&lsquo;p&rsquo;)
format(1/6)
&ldquo;16.666666666666664%&rdquo;</p></blockquote>

<p>// as a rounded percentage</p>

<blockquote><p>var format = d3.format(&lsquo;%&rsquo;)
format(1/6)
&ldquo;17%&rdquo;</p></blockquote>

<p>// as a percent rounded to a single sig fig</p>

<blockquote><p>var format = d3.format(&lsquo;.1%&rsquo;)
format(1/6)
&ldquo;16.7%&rdquo;</p></blockquote>

<p>// as a rounded value</p>

<blockquote><p>var format = d3.format(&lsquo;.2r&rsquo;)
format(123.456)
&ldquo;120&rdquo;</p>

<p>format(123456789.66)
&ldquo;120000000&rdquo;</p></blockquote>

<p>// as a rounded, comma separated value</p>

<blockquote><p>var format = d3.format(&lsquo;,.2r&rsquo;)
format(123456789.66)
&ldquo;120,000,000&rdquo;
```
</p></blockquote>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Getters and Setters]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/javascript-getters-and-setters/"/>
    <updated>2014-08-09T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/javascript-getters-and-setters</id>
    <content type="html"><![CDATA[<p>Getters and setters make sense in java, and I just learned that there is an equivalent pattern in javascript:</p>

<p>
```javascript</p>

<blockquote><p>var favouriteBook = {
  _title: &ldquo;Catch-22&rdquo;,
  get title() {</p>

<pre><code>console.log("Getting title", this._title);
</code></pre>

<p>  },
  set title(value) {</p>

<pre><code>this._title = value;
console.log("Setting title", this._title);
</code></pre>

<p>  }
}
favouriteBook.title
 Getting title Catch-22</p>

<p>favouriteBook.title = &ldquo;Slaughterhouse 5&rdquo;
 Setting title Slaughterhouse 5</p>

<p>favouriteBook.title
 Getting title Slaughterhouse 5
```
</p></blockquote>

<p>The <code>get</code> and <code>set</code> key words are reserved for accessing or mutating a data property (instance variable). Of course, one can get and set data properties directly:</p>

<p>
```javascript</p>

<blockquote><p>favouriteBook.title
&ldquo;Catch-22&rdquo;</p>

<p>favouriteBook.title = &ldquo;Slaughterhouse 5&rdquo;
favouriteBook.title
&ldquo;Slaughterhouse 5&rdquo;
```
</p></blockquote>

<p>The advantage of using a getter and setter is that if a setter is defined without a getter, one can change the value of the data property, but can never read it. If a getter is defined without a setter, then the variable can be read but not be changed:</p>

<p>
```javascript</p>

<blockquote><p>var favouriteBook = {
  _title: &ldquo;Catch-22&rdquo;,
  get title() {</p>

<pre><code>console.log("Getting title", this._title);
</code></pre>

<p>  }
}</p>

<p>favouriteBook.title
Getting title Catch-22</p>

<p>favouriteBook.title = &ldquo;Slaughterhouse 5&rdquo;</p>

<p>favouriteBook.title
Getting title Catch-22
```
</p></blockquote>

<p>The setter function will fail silently, which makes troubleshooting difficult but ensures that the property remains undisturbed.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/Principles-Object-Oriented-JavaScript-Nicholas-Zakas/dp/1593275404/ref=sr_1_1?ie=UTF8&amp;qid=1407339036&amp;sr=8-1&amp;keywords=principles+of+object+oriented+javascript">The principles of object-oriented javascript</a></p>
]]></content>
  </entry>
  
</feed>
