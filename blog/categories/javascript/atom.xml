<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-09-26T11:46:20-07:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gaining Closure Through Modules]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/managing-modules/"/>
    <updated>2014-09-06T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/managing-modules</id>
    <content type="html"><![CDATA[<p>If you have more than one javascript running on a page, you have likely experienced the hell of trying to debug a problem caused by naming collisions. Developing the scripts in isolation, it makes sense to assign widgetA.name dynamically using jQuery, but then why does the title of widgetGraphB disappear? Avoid the pain of unintended consequences by namespacing your scripts. <!--more--></p>

<p>Closures occur when you pass functions to variables to call at a later date. The javascript engine does all the work of compiling the script and loading the contents into the memory stack, but until the function is called the stack just sits there, sealed like a time capsule.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Closure in the wild </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">timeCapsule</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">year</span> <span class="o">=</span> <span class="mi">1999</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">party</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;We&#39;re gonna party like it&#39;s &quot;</span> <span class="o">+</span> <span class="nx">year</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="nx">party</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">year</span> <span class="o">=</span> <span class="mi">2099</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tonight</span> <span class="o">=</span> <span class="nx">timeCapsule</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">tonight</span><span class="p">();</span> <span class="c1">// We&amp;rsquo;re gonna party like it&amp;rsquo;s 1999</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>party()</code> function has a closure over <code>timeCapsule()</code>, which means all the variables and functions within timeCapsule remain unmolested by any assignments made outside of their scope.</p>

<h3>Modules use closure to encapsulate scope.</h3>

<p>Breaking your monolithic javascript into modules is a great way to separate concerns and create closures.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>myModule.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">myModuleFunction</span><span class="p">()</span> <span class="p">{</span> <span class="err">/&lt;em&gt; Do work1 &lt;/em&gt;/ }</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">mySecondModuleFuntion</span><span class="p">()</span> <span class="p">{</span> <span class="err">/&lt;em&gt; Do work2 &lt;/em&gt;/ }&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">exports</span><span class="p">.</span><span class="nx">myModuleFunction</span> <span class="o">=</span> <span class="nx">myModuleFunction</span><span class="p">;</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">mySecondModuleFunction</span> <span class="o">=</span> <span class="nx">mySecondModuleFunction</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Using the module </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myModule</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">myModule</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">myModule</span><span class="p">.</span><span class="nx">myModuleFunction</span><span class="p">();</span> <span class="c1">// performs work1</span>
</span><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">mySecondModuleFunction</span><span class="p">();</span> <span class="c1">// performs work2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Using modules will prevent naming conflicts on functions and variables:</p>

<p>
```javascript
var module1 = require(&ldquo;myModuleName&rdquo;);</p>

<p>myModuleFunction() {
  console.log(&ldquo;All work and no play makes module1 a dull script;&rdquo;);
}</p>

<p>module1.myModuleFunction(); // performs work1
myModuleFunction(); // outputs snarky phrase</p>

<p>```
</p>

<p>Voila &mdash; no conflicts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Formatting Numbers the Easy Way]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/formatting-numbers-the-easy-way/"/>
    <updated>2014-08-23T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/formatting-numbers-the-easy-way</id>
    <content type="html"><![CDATA[<p>D3 has an awesome number formatting function that I discovered only after hacking my own. My first approach was to use string and array manipulation to convert 1234567890 to 1,234,567,890:</p>

<p>
`&ldquo;javascript
function numberSmoothing(value) {
  // split the number into a character array and reverse it
  reversedNumber = (value).toString().split(&rdquo;).reverse();</p>

<p>  // [&ldquo;0&rdquo;, &ldquo;9&rdquo;, &ldquo;8&rdquo;, &ldquo;7&rdquo;, &ldquo;6&rdquo;, &ldquo;5&rdquo;, &ldquo;4&rdquo;, &ldquo;3&rdquo;, &ldquo;2&rdquo;, &ldquo;1&rdquo;]</p>

<p>  // push the numbers onto another array in groups of 3 and add a comma
  chunkedNumber = [];
  while(reversedNumber.length > 3) {</p>

<pre><code>var numberChunk = reversedNumber.splice(3);
chunkedNumber.push(reversedNumber.join('') + ',');
reversedNumber = numberChunk;
</code></pre>

<p>  }</p>

<p>  // push the remaining digits onto the array
  chunkedNumber.push(reversedNumber.join(&lsquo;&rsquo;));</p>

<p>  // [&ldquo;098,&rdquo;, &ldquo;765,&rdquo;, &ldquo;432,&rdquo;, &ldquo;1&rdquo;]</p>

<p>  // reverse each of the strings in the array and rejoin them
  for(var j = 0; j &lt; chunkedNumber.length; j++){</p>

<pre><code>chunkedNumber[j] = chunkedNumber[j].split('').reverse().join('');
</code></pre>

<p>  }</p>

<p>  // [&ldquo;,890&rdquo;, &ldquo;,567&rdquo;, &ldquo;,234&rdquo;, &ldquo;1&rdquo;]</p>

<p>  return chunkedNumber.reverse().join(&lsquo;&rsquo;);
}</p>

<blockquote><p>numberSmoothing(1234567890)
&ldquo;1,234,567,890&rdquo;</p></blockquote>

<p>```
</p>

<p>While it was a fun mental exercise to implement number formatting, I stumbled across this handy d3 function after I was already done:</p>

<p>
```</p>

<blockquote><p>var format = d3.format(&ldquo;,&rdquo;);
format(1234567890);
&ldquo;1,234,567,890&rdquo;
```
</p></blockquote>

<p>As it turns out, any way one might want to format a number has <a href="https://github.com/mbostock/d3/wiki/Formatting#d3_format">already been implemented in d3</a>. It is similar to the mini-formatting language from python:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[​[fill]align][sign][symbol][0][width][,][.precision][type]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
```javascript
// add commas for the thousands separator</p>

<blockquote><p>var format = d3.format(&lsquo;,&rsquo;)
format(1234567890)
&ldquo;1,234,567,890&rdquo;</p></blockquote>

<p>// add a sign for positive and negative numbers</p>

<blockquote><p>var format = d3.format(&lsquo;+,&rsquo;)
format(1234567890)
&ldquo;+1,234,567,890&rdquo;</p>

<p>format(-1234567890)
&ldquo;-1,234,567,890&rdquo;</p></blockquote>

<p>// add a currency sign</p>

<blockquote><p>var format = d3.format(&lsquo;+$,&rsquo;)
format(1234567890)
&ldquo;+$1,234,567,890&rdquo;</p></blockquote>

<p>// as a percentage</p>

<blockquote><p>var format = d3.format(&lsquo;p&rsquo;)
format(1/6)
&ldquo;16.666666666666664%&rdquo;</p></blockquote>

<p>// as a rounded percentage</p>

<blockquote><p>var format = d3.format(&lsquo;%&rsquo;)
format(1/6)
&ldquo;17%&rdquo;</p></blockquote>

<p>// as a percent rounded to a single sig fig</p>

<blockquote><p>var format = d3.format(&lsquo;.1%&rsquo;)
format(1/6)
&ldquo;16.7%&rdquo;</p></blockquote>

<p>// as a rounded value</p>

<blockquote><p>var format = d3.format(&lsquo;.2r&rsquo;)
format(123.456)
&ldquo;120&rdquo;</p>

<p>format(123456789.66)
&ldquo;120000000&rdquo;</p></blockquote>

<p>// as a rounded, comma separated value</p>

<blockquote><p>var format = d3.format(&lsquo;,.2r&rsquo;)
format(123456789.66)
&ldquo;120,000,000&rdquo;
```
</p></blockquote>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Getters and Setters]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/javascript-getters-and-setters/"/>
    <updated>2014-08-09T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/javascript-getters-and-setters</id>
    <content type="html"><![CDATA[<p>Getters and setters make sense in java, and I just learned that there is an equivalent pattern in javascript:</p>

<p>
```javascript</p>

<blockquote><p>var favouriteBook = {
  _title: &ldquo;Catch-22&rdquo;,
  get title() {</p>

<pre><code>console.log("Getting title", this._title);
</code></pre>

<p>  },
  set title(value) {</p>

<pre><code>this._title = value;
console.log("Setting title", this._title);
</code></pre>

<p>  }
}
favouriteBook.title
 Getting title Catch-22</p>

<p>favouriteBook.title = &ldquo;Slaughterhouse 5&rdquo;
 Setting title Slaughterhouse 5</p>

<p>favouriteBook.title
 Getting title Slaughterhouse 5
```
</p></blockquote>

<p>The <code>get</code> and <code>set</code> key words are reserved for accessing or mutating a data property (instance variable). Of course, one can get and set data properties directly:</p>

<p>
```javascript</p>

<blockquote><p>favouriteBook.title
&ldquo;Catch-22&rdquo;</p>

<p>favouriteBook.title = &ldquo;Slaughterhouse 5&rdquo;
favouriteBook.title
&ldquo;Slaughterhouse 5&rdquo;
```
</p></blockquote>

<p>The advantage of using a getter and setter is that if a setter is defined without a getter, one can change the value of the data property, but can never read it. If a getter is defined without a setter, then the variable can be read but not be changed:</p>

<p>
```javascript</p>

<blockquote><p>var favouriteBook = {
  _title: &ldquo;Catch-22&rdquo;,
  get title() {</p>

<pre><code>console.log("Getting title", this._title);
</code></pre>

<p>  }
}</p>

<p>favouriteBook.title
Getting title Catch-22</p>

<p>favouriteBook.title = &ldquo;Slaughterhouse 5&rdquo;</p>

<p>favouriteBook.title
Getting title Catch-22
```
</p></blockquote>

<p>The setter function will fail silently, which makes troubleshooting difficult but ensures that the property remains undisturbed.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/Principles-Object-Oriented-JavaScript-Nicholas-Zakas/dp/1593275404/ref=sr_1_1?ie=UTF8&amp;qid=1407339036&amp;sr=8-1&amp;keywords=principles+of+object+oriented+javascript">The principles of object-oriented javascript</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Constructors and Prototypes]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/constructors-and-prototypes/"/>
    <updated>2014-08-07T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/constructors-and-prototypes</id>
    <content type="html"><![CDATA[<p>Object-oriented programming (OOP) can be thought of as describing the properties and behaviour of a noun in a blueprint, which is used to create instances of an object. The blueprint is defined as a Constructor &mdash; a function that identifies a class of objects and begins with a capital letter. New objects are created by calling a Constructor with the keyword <code>new</code>.</p>

<p>
```javascript</p>

<blockquote><p>function Book(title, author) {</p>

<pre><code>this.title = title;
this.author = author;
this.listing = function() {
  console.log([this.title, "by", this.author].join(' '));
}
</code></pre>

<p>  }</p>

<p>var book1 = new Book(&ldquo;Catch-22&rdquo;, &ldquo;Joseph Heller&rdquo;)</p>

<p>book1.title
&ldquo;Catch-22&rdquo;</p>

<p>book1.author
&ldquo;Joseph Heller&rdquo;</p>

<p>book1.listing()
Catch-22 by Joseph Heller
```
</p></blockquote>

<p>The Book constructor specifies two properties, <code>title</code> and <code>author</code>, and one method, <code>listing</code>. Defining a method in a constructor ensures that all instances of the Object have the same method, but it also results in duplication of the method in the memory stack for every instance of the Object. If I made 1000 instances of Book, there would be 1000 instances of the listing method, even though it is only defined once, and is the same for every object.</p>

<h4>Memory stack of objects with instance methods:</h4>

<p><img src="http://www.katieleonard.ca/images/post_constructor_memory_stack.png"></p>


<p>Enter Prototypes.</p>

<p>A Prototype is a property that is shared by all instances of an object. When the constructor for an object is called for the first time, all the object&rsquo;s properties are loaded onto the memory stack as well as the object&rsquo;s Prototype. All subsequent instances of that object include a pointer to the same Prototype, and they pass in a pointer to themselves as <code>this</code> whenever they call a method from the Prototype.</p>

<p>
```javascript
function Book(title, author) {
  this.title = title;
  this.author = author;
}</p>

<p>Book.prototype = {
  listing: function() {</p>

<pre><code>console.log([this.title, "by", this.author].join(' '));
</code></pre>

<p>  }
}</p>

<blockquote><p>var book1 = new Book(&ldquo;Catch-22&rdquo;, &ldquo;Joseph Heller&rdquo;)
var book2 = new Book(&ldquo;Slaughterhouse 5&rdquo;, &ldquo;Kurt Vonnegut&rdquo;)</p>

<p>book1.listing()
Catch-22 by Joseph Heller
book2.listing()
Slaughterhouse 5 by Kurt Vonnegut</p>

<p>book1.hasOwnProperty(&ldquo;listing&rdquo;)
false
&lsquo;listing&rsquo; in book1
true
```
</p></blockquote>

<h4>Memory stack of object with prototypes:</h4>

<p><img src="http://www.katieleonard.ca/images/post_prototype_memory_stack.png"></p>


<p>Reduced memory consumption is one advantage of keeping a reference to a prototype instead of a complete copy. Another advantage is that if additions are made to the Prototype, the changes will be extended to all instances.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['In' Operator Avoids False Falsies]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/in-operator-avoid-false-falsies/"/>
    <updated>2014-08-05T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/in-operator-avoid-false-falsies</id>
    <content type="html"><![CDATA[<p>I have encountered more than my share of javascript errors because I have made assumptions about the object I am working with, such as assuming that an object contains a property, and that I can call methods on that property:</p>

<p>
```javascript</p>

<blockquote><p>myObject.data[0]
TypeError: Cannot read property &lsquo;0&rsquo; of undefined
```
</p></blockquote>

<p>This line contains four assumptions, and therefore four places it can fail:</p>

<ol>
<li><code>myObject</code> exists</li>
<li><code>myObject</code> contains a property called <code>data</code></li>
<li><code>data</code> is an array</li>
<li><code>data</code> is non-empty</li>
</ol>


<p>Presuming that if <code>myObject</code> does not exist means you have bigger problems, it is easy to fall into the trap of checking for the existence of a property by gating a conditional with it:</p>

<p>
<code>javascript
if(myObject.data) {
  //do something important with the data
}
</code>
</p>

<p>This technique will work in development, but the voice of experience tells us that it will not work in production. The reason it will not work is that javascript has more falsy values than most languages. Falsy values include the number zero, empty strings, null, undefined, NaN, and of course, the boolean false. So, if it is possible <code>myObject.data</code> to contain derived information, you have signed up to troubleshoot some unexpected behaviour.</p>

<p>Fortunately, javascript has provided a failsafe way to check the existence of a property, regardless of the data it contains. The <code>in</code> operator checks if the key exists in the object&rsquo;s hash table, and doesn&rsquo;t care if it is a prototype or singleton property.</p>

<p>
```javascript</p>

<blockquote><p>var myObject = {}
undefined
&lsquo;data&rsquo; in myObject
false</p>

<p>myObject.data = &lsquo;&rsquo;
&ldquo;&rdquo;
&lsquo;data&rsquo; in myObject
true
myObject.data == true
false
```
</p></blockquote>

<p><code>('data' in myObject)</code> returns false if the property is undefined. If the property is defined, it returns true even if data contains a falsy value.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/Principles-Object-Oriented-JavaScript-Nicholas-Zakas/dp/1593275404/ref=sr_1_1?ie=UTF8&amp;qid=1407339036&amp;sr=8-1&amp;keywords=principles+of+object+oriented+javascript">The principles of object-oriented javascript</a></p>
]]></content>
  </entry>
  
</feed>
