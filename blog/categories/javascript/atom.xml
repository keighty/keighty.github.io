<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2014-03-03T08:00:10-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scaling D3]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/d3-scaling/"/>
    <updated>2014-03-03T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/d3-scaling</id>
    <content type="html"><![CDATA[<p>Add scales to a d3 plot in three easy steps:</p>

<h3>1. Define the scale</h3>

<p>``` javascript
// Image dimensions
var width = 500,</p>

<pre><code>height = 500,
margin = 50;
</code></pre>

<p>var scaleX=d3.scale.linear().domain([0,10]).range([margin, width-margin]);
var scaleY=d3.scale.linear().domain([0,10]).range([height-margin, margin]);
```</p>

<h3>2. Draw the scale</h3>

<p>``` javascript
// Image container
var svg=d3.select(&ldquo;body&rdquo;).append(&ldquo;svg&rdquo;)</p>

<pre><code>  .attr("width",width)
  .attr("height",height);
</code></pre>

<p>// Axis definition
var xAxis = d3.svg.axis()
  .scale(scaleX)
  .orient(&ldquo;bottom&rdquo;);</p>

<p>var yAxis = d3.svg.axis()
  .scale(scaleY)
  .orient(&ldquo;left&rdquo;);</p>

<p>// Axis graphics
svg.append(&ldquo;g&rdquo;)
  .attr(&ldquo;class&rdquo;, &ldquo;axis&rdquo;)
  .attr(&ldquo;transform&rdquo;, &ldquo;translate(0,&rdquo; + (height &ndash; margin) + &ldquo;)&rdquo;)
  .call(xAxis);</p>

<p>svg.append(&ldquo;g&rdquo;)
  .attr(&ldquo;class&rdquo;, &ldquo;axis&rdquo;)
  .attr(&ldquo;transform&rdquo;, &ldquo;translate(&rdquo; + margin + &ldquo;,0)&rdquo;)
  .call(yAxis);
```</p>

<h3>3. Apply the scale to your data</h3>

<p>``` javascript Apply the scale. <a href="https://gist.github.com/keighty/9327604">https://gist.github.com/keighty/9327604</a>
d3.csv(&ldquo;test_data.csv&rdquo;,function(csv) {</p>

<p>  svg.selectAll(&ldquo;circle&rdquo;).data(csv).enter()</p>

<pre><code>.append("circle")
.attr("cx",getX)
.attr("cy",getY)
.attr("r", getR)
.style("fill", getColor);
</code></pre>

<p>  // Apply scale to the x value
  function getX(d) {</p>

<pre><code>return scaleX(d.X);
</code></pre>

<p>  }</p>

<p>  //Apply scale to the y value
  function getY(d) {</p>

<pre><code>return scaleY(d.Y);
</code></pre>

<p>  }</p>

<p>  function getR(d) {</p>

<pre><code>return d.Quantity / 10;
</code></pre>

<p>  }</p>

<p>  function getColor(d) {</p>

<pre><code>return d.Colors;
</code></pre>

<p>  }
}
```</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Dates]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/javascript-dates/"/>
    <updated>2014-03-01T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/javascript-dates</id>
    <content type="html"><![CDATA[<p>Javascript Date objects have zero indexed months but not dates.</p>

<p>```</p>

<blockquote><p>(new Date(2014, 0, 1)).strftime(&ldquo;%b %d, %Y&rdquo;)
&ldquo;Jan 1, 2014&rdquo;
(new Date(2013, 11, 31)).strftime(&ldquo;%b %d, %Y&rdquo;)
&ldquo;Dec 31, 2013&rdquo;
(new Date(2014, 0, 0)).strftime(&ldquo;%b %d, %Y&rdquo;)
&ldquo;Dec 31, 2013&rdquo;
```</p></blockquote>

<p>Wat?</p>

<!--more-->


<h3>Resources</h3>

<p><a href="http://tech.bluesmoon.info/2008/04/strftime-in-javascript.html">Javascript strftime</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String Conversion in Javascript]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/to-i-in-javascript/"/>
    <updated>2014-02-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/to-i-in-javascript</id>
    <content type="html"><![CDATA[<p>Almost every day, javascript blows my mind. Today I discovered that you can convert a string to a number simply by prepending a +:</p>

<p>```</p>

<blockquote><p>typeof(+&ldquo;this is a string&rdquo;)
&ldquo;number&rdquo;
typeof(+&ldquo;100&rdquo;)
&ldquo;number&rdquo;
+&ldquo;100&rdquo; + 50
150
```</p></blockquote>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binding Functions as Data]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/binding-functions-as-data/"/>
    <updated>2014-02-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/binding-functions-as-data</id>
    <content type="html"><![CDATA[<p>Primitives and object literals are not the only things you can bind to a D3 visualization. After all, aren&rsquo;t javascript functions objects as well?</p>

<p>```javascript
var data = [];
var next = function(x) { return 15 + x*x };
var newData = function() { data.push(next); return data; }
var selection = d3.select(&ldquo;#container&rdquo;)</p>

<pre><code>              .selectAll("div")
              .data(newData);
</code></pre>

<p>&hellip;</p>

<pre><code>              .select("#span")
                .text(function(d, i) { return d(i); });
</code></pre>

<p>```</p>

<p>If you provide a function to the data function, D3 will simply invoke the function and use the returned value as a parameter of the data function.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implied Functions Applied]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/implied-functions-applied/"/>
    <updated>2014-02-26T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/implied-functions-applied</id>
    <content type="html"><![CDATA[<p>When binding a primitive datum to a node in a D3 visualization, the callback function can be implicitly called on the datum without the typical verbosity<!--more-->:</p>

<p>```javascript
svg.selectAll(&ldquo;circle&rdquo;)</p>

<pre><code>.data([32, 57, 112, 293])
</code></pre>

<p>  .enter().append(&ldquo;circle&rdquo;)</p>

<pre><code>.attr("cy", 90)
.attr("cx", String)
.attr("r", Math.sqrt);
</code></pre>

<p>```</p>

<p>In line 5, String() is performed on the data element, as is Math.sqrt in line 6, with the same result as:</p>

<p>```
svg.selectAll(&ldquo;circle&rdquo;)</p>

<pre><code>.data([32, 57, 112, 293])
</code></pre>

<p>  .enter().append(&ldquo;circle&rdquo;)</p>

<pre><code>.attr("cy", 90)
.attr("cx", function(d) {
  return String(d);
})
.attr("r", function(d) {
  return Math.sqrt(d);
});
</code></pre>

<p>```</p>

<p>&hellip; but better.</p>

<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="http://mbostock.github.io/d3/tutorial/circle.html">Three Little Circles D3 Tutorial</a></p>
]]></content>
  </entry>
  
</feed>
