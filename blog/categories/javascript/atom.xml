<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2018-04-01T15:14:42-07:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    <email><![CDATA[keighty.leonard@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Styled Components and Storybooks]]></title>
    <link href="http://www.katieleonard.ca/blog/2018/styled-components-and-storybooks/"/>
    <updated>2018-03-02T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2018/styled-components-and-storybooks</id>
    <content type="html"><![CDATA[<p>I recently discovered two new react development tools that have changed how I approach React component development: <a href="https://storybook.js.org/basics/introduction/">Storybook</a> and <a href="https://www.styled-components.com/docs/basics#getting-started">styled-components</a>. <!--more-->I can quickly prototype a component with its data requirements, styles, and behaviour in one file, and in isolation from the rest of my application. This rapid prototyping has greatly increased my development cycle time, as I spend more time in code and less time flipping between the browser window, the browser console, css files, jsx files, and my terminal.</p>

<p>Using these libraries has also had the pleasant side-effect of helping me design more pure components: instead of using whatever context is available in my giant application, I think about my component interface with real encapsulation in mind.</p>

<h3>Storybook</h3>

<p>Storybook creates a hot-reloading development sandbox outside of your running application, where you can create components free from global app dependencies. Building a component outside of your application context makes you think about what props are really needed to render a component. Is one component actually two components? What is the least amount of information your component needs to be a single atom.</p>

<p>Writing a story for storybook is like writing a spec: you describe the features of the component variant (&ldquo;with long title&rdquo;), and provide a callback that renders your component with props that you specify.</p>

<p>```javascript
storiesOf(&ldquo;Playbill&rdquo;, module)
  .add(&ldquo;basic&rdquo;, () => (</p>

<pre><code>&lt;Playbill
  onClick={action("navigate to playbill")}
  title="foo"
  imageUrl="https://virtualplaybill.s3.amazonaws.com/1517893742975_Magellanica"
/&gt;
</code></pre>

<p>  ))
  .add(&ldquo;with long title&rdquo;, () => (</p>

<pre><code>&lt;Playbill
  onClick={action("navigate to playbill")}
  title="we are proud to present a presentation"
  imageUrl="https://virtualplaybill.s3.amazonaws.com/1517893742975_Magellanica"
/&gt;
</code></pre>

<p>  ));
```</p>

<p>You can interact with your components and see the consequences of those interactions in the action pane below.</p>

<p><img src="/images/180303-styled-components/styled-components.png"></p>

<h3>Styled-components</h3>

<p>Styled-components remove the disconnect between styles and components (they are literally connected with a hyphen ðŸ˜„). Before styled-components, there were clear sides to the Great CSS debate: why do we even need CSS if we inline component styles? Is it just for performance? Why not use the React render cycle to handle dynamic styles?</p>

<p>I am coming pretty late to the party here, but as a solid supporter of CSS over inline styles, styled components have completely won me over. Instead of filling your markup with <code>style=</code> attributes, you create a new component that expresses the styles you specify.</p>

<p>```javascript
import styled from &ldquo;styled-components&rdquo;;</p>

<p>const PlaybillContainer = styled.div<code>
  height: 415px;
  width: 250px;
  border: 1px solid black;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
</code>;</p>

<p>const Playbill = () => {
  return <PlaybillContainer />;
};
```</p>

<p>Under the hood, styled-components will generate a stylesheet and inject it into the head of your page:</p>

<p>```html</p>



<p>```</p>

<p>Styled-components have effectively put an end to the styles-in-Javascript debate. They are an expressive way to have the best of both worlds: inline styles and cascading style sheets.</p>

<h3>Quick start with both Storybook and styled-components</h3>

<p>```bash</p>

<h1>install create-react-app</h1>

<h1>for babel boilerplate</h1>

<blockquote><p>npm i -g create-react-app
create-react-app storybook-test-app
cd storybook-test-app
npm i</p></blockquote>

<h1>install storybook and styled-components</h1>

<blockquote><p>npm i -g @storybook/cli
getstorybook
npm i styled-components
npm run storybook</p></blockquote>

<h1>open your new storybook at</h1>

<h1><a href="http://localhost:9009/">http://localhost:9009/</a></h1>

<p>```</p>

<p>Your stories are saved in <code>src/stories</code>, and you can import them from an adjacent components folder for both quick development, and quick incorporation into your application.</p>

<h3>Example</h3>

<p>I am doing a React rebuild of my side project Virtual-Playbill, and storybook is the perfect place to play around with tweaks to the UI.</p>

<h4>My component</h4>

<p>```javascript
import React from &ldquo;react&rdquo;;
import styled from &ldquo;styled-components&rdquo;;</p>

<p>const PlaybillContainer = styled.div<code>
  height: 415px;
  width: 250px;
  border: 1px solid black;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
</code>;</p>

<p>const PlaybillHeader = styled.div<code>
  padding: 10px 0 10px 0;
  font-size: x-large;
  max-height: 2em;
  text-align: center;
  width: 100%;
  background-color: yellow;
  border-bottom: 1.5px solid black;
  text-transform: uppercase;
  font-weight: bold;
  letter-spacing: 2.5px;
</code>;</p>

<p>const PlaybillTitle = styled.div<code>
  text-align: center;
  font-weight: bold;
  font-size: large;
  max-width: 95%;
</code>;</p>

<p>const PlaybillImage = styled.img<code>
  display: block;
  height: 300px;
  width: 250px;
</code>;</p>

<p>const Playbill = ({ title, imageUrl, onClick }) => {
  return (</p>

<pre><code>&lt;PlaybillContainer onClick={onClick}&gt;
  &lt;PlaybillHeader&gt;Virtual Playbill&lt;/PlaybillHeader&gt;
  &lt;PlaybillTitle&gt;{title}&lt;/PlaybillTitle&gt;
  &lt;PlaybillImage src={imageUrl} /&gt;
&lt;/PlaybillContainer&gt;
</code></pre>

<p>  );
};</p>

<p>export default Playbill;
```</p>

<h4>My stories</h4>

<p>```javascript
import React from &ldquo;react&rdquo;;</p>

<p>import { storiesOf } from &ldquo;@storybook/react&rdquo;;
import { action } from &ldquo;@storybook/addon-actions&rdquo;;</p>

<p>import Playbill from &ldquo;../components/playbill&rdquo;;</p>

<p>storiesOf(&ldquo;Playbill&rdquo;, module)
  .add(&ldquo;basic&rdquo;, () => (</p>

<pre><code>&lt;Playbill
  onClick={action("navigate to playbill")}
  title="foo"
  imageUrl="https://virtualplaybill.s3.amazonaws.com/1517893742975_Magellanica"
/&gt;
</code></pre>

<p>  ))
  .add(&ldquo;with long title&rdquo;, () => (</p>

<pre><code>&lt;Playbill
  onClick={action("navigate to playbill")}
  title="we are proud to present a presentation"
  imageUrl="https://virtualplaybill.s3.amazonaws.com/1517893742975_Magellanica"
/&gt;
</code></pre>

<p>  ));
```</p>

<p>Between styled-components and storybook, I don&rsquo;t need to leave my component file until the component is finished. Feedback cycles are tight, which means I can try out different variations quickly before dropping the component into my application.</p>

<p>Awesome! ðŸ˜Ž</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decorate Your Javascript]]></title>
    <link href="http://www.katieleonard.ca/blog/2018/decorate-your-javascript/"/>
    <updated>2018-02-28T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2018/decorate-your-javascript</id>
    <content type="html"><![CDATA[<p>Javascript decorators are a form of metaprogramming: they add functionality to classes and properties. Unlike the <a href="https://en.wikipedia.org/wiki/Decorator_pattern">GoF pattern</a>, where decorators modify instances of a class, Javascript decorators are run when the class, method, or property is installed, modifying all instances.</p>

<p>Decorators are useful for adding extra functionality to behaviours and properties that would otherwise look like boilerplate &mdash; such as cacheing, access control, logging, or instrumentation.<!--more--></p>

<h3>How does it work?</h3>

<p>A decorator function runs before the object it decorates is installed on the prototype. When you define an undecorated object like this:</p>

<p>```javascript
class ExampleWithoutDecoration {
  doWork() {</p>

<pre><code>console.log('can\'t you see I\'m working here?')
</code></pre>

<p>  }
}
```</p>

<p>The Javascript engine creates an object and installs the <code>doWork</code> method on its prototype:</p>

<p><code>javascript
Object.defineProperty(ExampleWithoutDecoration.prototype, 'doWork', {
  value: specifiedFunction,
  enumerable: false,
  configurable: true,
  writable: true
})
</code></p>

<p>When you define a DECORATED method like this:</p>

<p>```javascript
class ExampleWithDecoration {</p>

<p>  @DecoratingIsFun
  doWork() {</p>

<pre><code>console.log('can\'t you see I\'m working here?')
</code></pre>

<p>  }
}
```</p>

<p>The Javascript engine saves some temporary state, runs the decorator function, and then installs the <code>doWork</code> method on the object&rsquo;s prototype.</p>

<p>```javascript
let methodDescription = {
  type: &lsquo;method&rsquo;,
  initializer: () => specifiedFunction,
  enumerable: false,
  configurable: true,
  writable: true
};</p>

<p>methodDescription = DecoratingIsFun(ExampleWithDecoration.prototype, &lsquo;doWork&rsquo;, methodDescription) || methodDescription</p>

<p>defineDecoratedProperty(ExampleWithDecoration.prototype, &lsquo;doWork&rsquo;, methodDescription);</p>

<p>function defineDecoratedProperty(target, { initializer, enumerable, configurable, writable }) {
  Object.defineProperty(target, { value: initializer(), enumerable, configurable, writable })
}
```</p>

<p>In this case, the <code>DecoratingIsFun</code> method is run with <code>this</code> set to the object prototype, and it has the opportunity to modify/return a methodDescription, or use the previously specified methodDescription.</p>

<p>Consider <code>DecoratingMakesSense</code>, which makes the <code>doWork</code> method non-writeable:</p>

<p>```javascript
const DecoratingMakesSense = (object, methodName, description) => {
  console.log(&lsquo;Decorating makes sense&rsquo;)</p>

<p>  description.writable = false
  return description
}</p>

<p>class ExampleWithDetailedDecoration {
  @DecoratingMakesSense
  doWork() {</p>

<pre><code>console.log('can\'t you see I\'m working here?')
</code></pre>

<p>  }
}</p>

<p>const makesSense = new ExampleWithDetailedDecoration()
makesSense.doWork()
makesSense.doWork = () => console.log(&lsquo;some other function&rsquo;)
```</p>

<p>```bash</p>

<blockquote><p>node build/main.js
Decorating makes sense
can&rsquo;t you see I&rsquo;m working here?</p></blockquote>

<p>/decorator-example/build/main.js:164
makesSense.doWork = function () {</p>

<pre><code>              ^
</code></pre>

<p>TypeError: Cannot assign to read only property &lsquo;doWork&rsquo; of object &lsquo;#<ExampleWithDetailedDecoration>&rsquo;</p>

<pre><code>at Object.defineProperty.value (/decorator-example/build/main.js:164:19)
</code></pre>

<p>&hellip;
```</p>

<h3>Getting started</h3>

<p>Since decorators are currently in the <a href="https://tc39.github.io/proposal-decorators/">proposal stage</a>, getting started requires a little tweaking of your standard babel/webpack/linter configs.</p>

<h4>Babel</h4>

<p>```</p>

<blockquote><p>npm install -g webpack
npm install &mdash;save-dev babel-core babel-loader babel-preset-es2015 babel-plugin-transform-decorators-legacy
```</p></blockquote>

<p>In your .babelrc</p>

<p>```
{
  &ldquo;presets&rdquo;: [</p>

<pre><code>"es2015"
</code></pre>

<p>  ],
  &ldquo;plugins&rdquo;: [</p>

<pre><code>"transform-decorators-legacy"
</code></pre>

<p>  ]
}
```</p>

<h4>Webpack</h4>

<p>Here is a barebones webpack.config.js example</p>

<p>```
var path = require(&lsquo;path&rsquo;)</p>

<p>module.exports = {
  entry: &lsquo;./index.js&rsquo;,
  output: {</p>

<pre><code>path: path.resolve(__dirname, 'build'),
filename: 'main.js'
</code></pre>

<p>  },
  module: {</p>

<pre><code>  loaders: [
{
  test: /\.js$/,
  exclude: /node_modules/,
  loader: 'babel-loader',
  query: {
    cacheDirectory: true,
    plugins: [
      'transform-decorators-legacy',
    ],
    presets: ['es2015'],
  },
}
</code></pre>

<p>  ]
  },
  stats: {</p>

<pre><code>colors: true
</code></pre>

<p>  }
}
```</p>

<p>(The important bit is to add &lsquo;transform-decorators-legacy&rsquo; to the plugins array.)</p>

<h4>Linting error &mdash; or is it? ðŸ¤”</h4>

<p>If you use VSCode, you will probably run across a linter error that says</p>

<p><code>
[js] Experimental support for decorators is a feature that is subject to
change in a future release. Set the 'experimentalDecorators' option to
remove this warning.
</code></p>

<p>This is an error in the VSCode JS support, rather than a linter error.</p>

<p>Add a jsconfig.json file to your project root with the following contents:</p>

<p>```
{
  &ldquo;compilerOptions&rdquo;: {</p>

<pre><code>"experimentalDecorators": true
</code></pre>

<p>  }
}
```</p>

<p>Be sure to restart VSCode, and the problem should go away. If it doesn&rsquo;t, follow <a href="https://github.com/Microsoft/vscode/issues/28097">this thread</a> for further information.</p>

<h3>Build and run</h3>

<p>```</p>

<blockquote><p>webpack
Hash: 63cf378bd6d165758ed8
Version: webpack 3.8.1
Time: 457ms
  Asset     Size  Chunks             Chunk Names
main.js  4.47 kB       0  [emitted]  main
   [0] ./index.js 1.7 kB {0} [built]
   [1] ./decorator.js 195 bytes {0} [built]</p>

<p>node build/main.js
Decorating is fun
can&rsquo;t you see I&rsquo;m working here?
```</p></blockquote>

<p>For a detailed example checkout <a href="https://github.com/keighty/decorator--example">this repo</a>. For more examples and a deep dive, checkout <a href="https://github.com/wycats/javascript-decorators">wycats&rsquo;s decorator spec</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Least Recently Used (LRU) Cache]]></title>
    <link href="http://www.katieleonard.ca/blog/2018/least-recently-used/"/>
    <updated>2018-02-23T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2018/least-recently-used</id>
    <content type="html"><![CDATA[<p>I was recently challenged to implement a least recently used (LRU) cache in javascript, which taxed both my object-oriented javascripting chops as well as my hazy memory of how to implement a linked list.<!--more--> An LRU cache discards least recently used items first (<a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_(LRU">wikipedia</a>)). Not only do you have to limit the size of the list, but you have to track when an item has been accessed recently and ensure it is not removed before an item that has been accessed less recently.</p>

<p>Judging from the scores of implementations available from my first Google search, this appears to be a fairly common interview question. Here is the approach that I took:</p>

<ol>
<li>Maintain performance by storing items in a hash map</li>
<li>Use a queue-type linked list to keep track of access order: a new item is added to the end of the queue, while an existing item is removed from its place in the queue and re-added to the end of the queue.</li>
<li>Keep the cache at the specified size by lopping off the head of the list (and removing those items from the map).</li>
<li>Do it all using object oriented design principles.</li>
</ol>


<h3>The API/object design</h3>

<p>A simple cache should not have too many bells and whistles. It needs a <code>get</code> and a <code>set</code>, and possbily a <code>size</code> (useful for testing, probably not something most users desperately need). It should take a specific <code>cacheSize</code> as well, so we can set limits on the cache at startup.</p>

<p>```javascript
const LRU = function (cacheSize) {
  this._maxSize = cacheSize</p>

<p>  this.get = (key) => {}
  this.set = (key, value) => {}
  this.size = () => {}
}
```</p>

<h3>The data structures</h3>

<p>To access stored values in the cache in the most performant way, we store them with a key in a hash map:</p>

<p><code>javascript
// ...
this._map = new Map()
// ...
</code></p>

<p>In order to keep track of order access, we need to keep references to the head and the tail of the list, as well as an object to store the cached value and its place in the queue:</p>

<p>```javascript
//&hellip;
this.<em>head = null
this.</em>tail = null
//&hellip;</p>

<p>const Node = function(key, value) {
  this.key = key;
  this.value = value;
  this.next = null;
  this.prev = null;
};
```</p>

<h3>The implementaton</h3>

<p>```javascript
const LRU = function(cacheSize) {
  this.<em>maxSize = cacheSize;
  this.</em>map = new Map();
  this.<em>head = null;
  this.</em>tail = null;</p>

<p>  this.size = () => this._map.size;</p>

<p>  this.get = key => {</p>

<pre><code>const item = this._map.get(key);

if (item) {
  this._dequeue(item);
  this._enqueue(item);
  return item.value;
}
return;
</code></pre>

<p>  };</p>

<p>  this.set = (key, value) => {</p>

<pre><code>const node = new Node(key, value);

if (this._map.has(key)) {
  const existingNode = this._map.get(key);
  this._dequeue(existingNode);
}

this._enqueue(node);
this._trimList();

return value;
</code></pre>

<p>  };</p>

<p>  this._trimList = () => {</p>

<pre><code>if (this._map.size &gt; this._maxSize) {
  this._dequeue(this._head);
}
</code></pre>

<p>  };</p>

<p>  this._enqueue = node => {</p>

<pre><code>this._map.set(node.key, node);
if (!this._head) {
  this._head = node;
  this._tail = node;
} else {
  this._tail.next = node;
  node.prev = this._tail;
  node.next = null;
  this._tail = node;
}
return node.value;
</code></pre>

<p>  };</p>

<p>  this._dequeue = node => {</p>

<pre><code>if (this._head === node) {
  const { next, key } = this._head;
  if (next) {
    this._head = next;
    this._head.prev = null;
  } else {
    this._head = null;
    this._tail = null;
  }
} else {
  const { prev, next } = node;
  prev.next = next;
  next.prev = prev;
}
this._map.delete(node.key);
</code></pre>

<p>  };</p>

<p>  this.toString = () => {</p>

<pre><code>const itr = this._map.entries();
const entries = [];
for (let item of itr) {
  const [key, node] = item;
  const { value } = node;
  entries.push([key, value]);
}
return entries;
</code></pre>

<p>  };
};</p>

<p>const Node = function(key, value) {
  this.key = key;
  this.value = value;
};</p>

<p>module.exports = LRU;
```</p>

<p>Checkout <a href="https://github.com/keighty/lru-cache">this repo</a> for the full implementation and tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Browser-sync Is the Easiest Webserver EVER]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/browser-sync-webserver/"/>
    <updated>2016-10-23T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/browser-sync-webserver</id>
    <content type="html"><![CDATA[<p><a href="https://www.browsersync.io/">Browser-sync</a> is the fastest way to spin up a local web server. It will even open your default browser with the entry point you specify, and live-reload your changes as you make them. It couldn&rsquo;t possibly be any simpler to test out a site you&rsquo;re developing locally.</p>

<!--more-->


<h2>1. Install browser-sync</h2>

<p>To get started, install the browser-sync package from npm:</p>

<p><code>bash
$ npm install -g browser-sync
</code></p>

<h2>2. Configure the server</h2>

<p>Setup a simple static project folder like this (<a href="https://gist.github.com/keighty/9e5eb136c27b6a4f98f7c4f49d749256">gist</a>):</p>

<p><code>bash
.
â”œâ”€â”€ bs-config.js
â”œâ”€â”€ foo
â”‚   â””â”€â”€ index.html
â””â”€â”€ index.html
</code></p>

<p>In your bs-config.js file, list the configuration options for how browser-sync should serve your files, including which file extensions it should watch for changes (<code>"*html","*js","*css"</code>), and what resources should be served by a new route name (<code>"/foo": "foo"</code>).</p>

<p>```javascript
// bs-config.js</p>

<p>module.exports = {</p>

<pre><code>"files": ["*html","*js","*css"],
"server": true,
"port": 3000,
"routes": {
  "/foo": "foo"
}
</code></pre>

<p>};
```
 Checkout all the options available in the <a href="https://www.browsersync.io/docs/options"> docs</a>.</p>

<p> For this example, I have also included an entry point at index.html, and an additional html file to try a new route:</p>

<p>```html</p>

<!-- index.html -->


<p>&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
&lt;title&gt;INDEX&lt;/title&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;p&gt;
  This is the index
&lt;/p&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>```html</p>

<!-- foo/index.html -->


<p>&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
&lt;title&gt;FOO&lt;/title&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;p&gt;
  This is a foo
&lt;/p&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>Now that you have a sample project outlined, start the server.</p>

<h2>3. Start the web server</h2>

<p><code>$ browser-sync start --config bs-config.js</code></p>

<p>Browser-sync will open your default web browser and load the index.html file:</p>

<p><img src="/images/161023-browser-sync/https2.png"></p>

<p>Test out the router by navigating to <code>localhost:3000/foo</code>, and you should see the content of <code>foo/index.html</code></p>

<p><img src="/images/161023-browser-sync/routes.png"></p>

<p>Serving a local site is just that quick. If you don&rsquo;t know where to start with your bs-config.js file, you can have browser-sync generate one for you:</p>

<p><code>bash
$ mkdir testserver &amp;&amp; cd testserver
$ browser-sync init
[BS] Config file created bs-config.js
[BS] To use it, in the same directory run: browser-sync start --config bs-config.js
</code></p>

<p>In the generated config file, you find all the options that are used internally, but there are many more described on the <a href="http://www.browsersync.io/docs/options/">website</a>:</p>

<p>```javascript
module.exports = {</p>

<pre><code>"ui": {
    "port": 3001,
    "weinre": {
        "port": 8080
    }
},
"files": false,
"watchOptions": {},
"server": false,
"proxy": false,
"port": 3000,
"middleware": false,
"serveStatic": [],
"ghostMode": {
    "clicks": true,
    "scroll": true,
    "forms": {
        "submit": true,
        "inputs": true,
        "toggles": true
    }
},
"logLevel": "info",
"logPrefix": "BS",
"logConnections": false,
"logFileChanges": true,
"logSnippet": true,
"rewriteRules": [],
"open": "local",
"browser": "default",
"cors": false,
"xip": false,
"hostnameSuffix": false,
"reloadOnRestart": false,
"notify": true,
"scrollProportionally": true,
"scrollThrottle": 0,
"scrollRestoreTechnique": "window.name",
"scrollElements": [],
"scrollElementMapping": [],
</code></pre>

<p>&hellip;
```</p>

<p>For example: to <a href="https://www.browsersync.io/docs/options#option-https">test your application over https</a>, set <code>"https": true</code> right beneath your server options. When browser-sync opens the browser with your entry point, the browser should warn you that the connection isn&rsquo;t safe:</p>

<p><img src="/images/161023-browser-sync/https.png"></p>

<p>Click on <code>Proceed to localhost (unsafe)</code> to load your content.</p>

<p>Easy peasy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service Workers]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/service-workers/"/>
    <updated>2016-10-15T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/service-workers</id>
    <content type="html"><![CDATA[<p>A service worker is a script that sits between a web page and the network, acting as a proxy for network requests: if the network is available, the request is passed on to the target url; if the network is not available, the service worker will handle the request itself by checking cached responses or or queuing the request for synchronization once the network is available. Service workers are bridging the gap between native mobile applications and traditional web applications that require a network connection to function. Sometimes called progressive web apps, these applications enable a seamless offline experience when the user is not connected to a network.</p>

<!--more-->


<p>Service workers can be used for data synchronization in the background, but data fetching and sync-ing are only one of the ways we can leverage this API. We can:</p>

<ul>
<li>use background resources to perform client-side compilation of assets  (useful for web development)</li>
<li>pre-fetch data that the user is likely going to need in the near future (think photo albums or playlists)</li>
<li>share large data sets between multiple pages</li>
<li>notify mobile users of updates via push notifications</li>
</ul>


<p>For example, <a href="https://www.washingtonpost.com/">The Washington Post</a> uses service workers to send push notifications of breaking news content to users of their web application on android.</p>

<h2>How do they work?</h2>

<p>Service workers rely on the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise API</a> &mdash; a Promise is a proxy for &ldquo;a value that may be  available now, or in the future, or never.&rdquo; They also use the event emitter pattern, where listeners are registered to handle specific events, such as <code>fetch</code> requests.</p>

<p>To employ a service worker you must first register a script with the service worker API: <code>navigator.serviceWorker.register('./sw.js')</code>. Checkout the following example (<a href="https://gist.github.com/keighty/ec1a37a0f6475d7cdf2db64b01eff445.js">get the gist</a>):</p>

<p>```html</p>

<!-- index.html references the javascript application -->


<p><html>
  <body></p>

<pre><code>&lt;h1&gt;Service worker test app&lt;/h1&gt;
&lt;script src="./app.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
<code>
</code>javascript
// app.js
.register(&lsquo;sw.js&rsquo;) // register a worker script with the service
navigator.serviceWorker
  .then(function(reg) {</p>

<pre><code>// do the following if registration is successful
if(reg.installing) {
  // first visit or fresh reload of the worker
  console.log('Service worker installing on registration.');
} else if(reg.waiting) {
  // a worker may be installed but waiting for another worker to stop
  console.log('Service worker already installed on registration.');
} else if(reg.active) {
  // pages from the same origin may share a service worker
  console.log('Service worker already active on registration.');
}
</code></pre>

<p>  }).catch(function(error) {</p>

<pre><code>// if registration is unsuccessful, tell us why
console.log('Registration failed with ' + error);
</code></pre>

<p>  });
<code>
</code>javascript
// sw.js
console.log(&lsquo;inside registration script&rsquo;)</p>

<p>this.addEventListener(&lsquo;install&rsquo;, function(event) {
  console.log(&lsquo;Service worker installed.&rsquo;)
});</p>

<p>this.addEventListener(&lsquo;activate&rsquo;, function (event) {
  console.log(&lsquo;Service worker activated.&rsquo;)
})
```</p>

<p>Service workers can be registered with a specific origin and path to watch. Since they run in a background thread with a context separate from the application javascript, service workers have no DOM access. So don&rsquo;t try to perform synchronous work (like accessing LocalStorage) or update the DOM from a service worker.</p>

<p>Running this example code sends some output to the console:
<img src="/images/161015-service-workers/service-worker-demo1.png"></p>

<h4>NOTE: A single service worker can control many pages (so be careful with global variables).</h4>

<p><img src="/images/161015-service-workers/service-worker-demo2.png"></p>

<h2>Developing with service workers</h2>

<p>Service workers can only function in a secure context, which means that you can only register a service worker from a web application that is served over <code>https</code>. One option is to use <a href="https://pages.github.com/">GitHub pages</a> to deploy your application, as these pages are generally served over <code>https</code>. Another option is to use a local web server (<code>localhost</code> is considered semi-secure).</p>

<p>I use <a href="https://www.browsersync.io/">Browser-sync</a>, a super light-weight easy to start web server. In my project directory, I start the browser-sync server and set it to watch my javascript files:</p>

<p>```bash
$ npm install -g browser-sync
$ browser-sync start &mdash;server &mdash;files *.js
[BS] Access URLs:</p>

<hr />

<pre><code>   Local: http://localhost:3000
External: http://10.0.0.8:3000
</code></pre>

<hr />

<pre><code>      UI: http://localhost:3001
</code></pre>

<p> UI External: <a href="http://10.0.0.8:3001">http://10.0.0.8:3001</a></p>

<hr />

<p>[BS] Serving files from: ./
[BS] Watching files&hellip;
```</p>

<p>Browser-sync is so helpful, it will even open a browser window for you. :awthanks:</p>

<p>Don&rsquo;t forget to checkout the Chrome developer tools, which can be super helpful in creating different states for your service worker</p>

<p><img src="/images/161015-service-workers/service-worker-dev-tools.png"></p>

<hr />

<h2>MOAR Resources</h2>

<p>For more about the service worker API, checkout these resources:</p>

<ul>
<li>the <a href="https://www.w3.org/TR/service-workers/">W3C spec</a></li>
<li>the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">MDN docs</a></li>
<li>and the <a href="https://github.com/mdn/sw-test/">example</a> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
