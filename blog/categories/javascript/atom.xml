<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2014-02-13T19:42:31-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Augmented Objects]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/augmented-objects/"/>
    <updated>2014-02-09T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/augmented-objects</id>
    <content type="html"><![CDATA[<p>Because it bears repeating: javascript and ruby have many features in common, including the ability to add functionality to existing objects.</p>

<!--more-->


<h2>Ruby singleton</h2>

<p>You can add methods to an instance of a class without affecting any other instances of that class.
```bash</p>

<blockquote><p>x, y = &ldquo;stringA&rdquo;, &ldquo;stringB&rdquo;
def x.baz
  puts &ldquo;I can haz?&rdquo;
end</p>

<h1>=> nil</h1>

<p>x.baz
I can haz?</p>

<h1>=> nil</h1>

<p>y.baz
NoMethodError: undefined method <code>baz' for "stringB":String
  from (irb):62
  from /home/katherine/.rvm/rubies/ruby-2.0.0-rc1/bin/irb:12:in</code><main>&lsquo;
```</p></blockquote>

<h2>Javascript augmenting</h2>

<p>You can add methods to an of an Array object without affecting any other array objects.</p>

<p>```</p>

<blockquote><p>var data1 = [1, 2, 3, 4, 5, 6];
undefined
var data2 = [2, 4, 6, 8, 10, 12];
undefined
data1.total = function() { return 21; };
function () { return 21; }
data1.total();
21
data2.total()
TypeError: Object [object Array] has no method &lsquo;total&rsquo;
```</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Augmented Types]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/augmented-types/"/>
    <updated>2014-02-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/augmented-types</id>
    <content type="html"><![CDATA[<p>Javascript and Ruby have many features in common, including the ability to add functionality to existing objects.</p>

<!--more-->


<h2>Ruby monkeypatching</h2>

<p>Ruby allows you to reopen classes to add new functionality. For example, I can reopen the String class to add a new method, &ldquo;foo()&rdquo;:</p>

<p>```bash
irb > class String
irb >   def foo
irb >     &ldquo;I see you!&rdquo;
irb >   end
irb > end</p>

<h1>=> nil</h1>

<p>irb > &ldquo;&rdquo;.class</p>

<h1>=> String</h1>

<p>irb > &ldquo;&rdquo;.foo</p>

<h1>=> &ldquo;I see you!&rdquo;</h1>

<p>```</p>

<h2>Javascript augmenting</h2>

<p>Javascript allows you to augment existing objects with additional functionality.</p>

<p>```javascript</p>

<blockquote><p>String.prototype.foo = function foo() {</p>

<pre><code>return "I see you!";
</code></pre>

<p>  }
function foo() {</p>

<pre><code>return "I see you!";
</code></pre>

<p>  }
typeof(&ldquo;&rdquo;);
&ldquo;string&rdquo;
&ldquo;&rdquo;.foo()
&ldquo;I see you!&rdquo;
```</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Abatement]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/global-abatement/"/>
    <updated>2014-02-07T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/global-abatement</id>
    <content type="html"><![CDATA[<h3>or, What the heck is global abatement?</h3>

<p><strong>tldr</strong>: Global variables are <a href="http://en.wikipedia.org/wiki/Code_smell">code smells</a>. Declaring variables inside an application-level function serves to namespace the variables and minimizes the use of global variables. <!--more--></p>

<p>Javascript has function-level scoping, which means that variables declared anywhere within a function are scoped to that function. Writing a javascript without an enclosing function leaves your declared variables vulnerable to name collisions, or reassignment by other javascripts.</p>

<p>A <strong>global abatement</strong> is a strategy used to reduce the vulnerability of your javascript variables by removing them from the global scope. Application namespacing is one such strategy:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>BAD GLOBAL</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">first_name</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Hello</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="nx">last_name</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Kitty</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>GOOD LOCAL</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">first_name</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Hello</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="nx">last_name</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Kitty</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Declaring an application-level function ensures that the correct <code>person</code> is called when needed. It improves readability by essentially flagging the scope of the variable and reducing ambiguity.</p>

<p><a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=bridgeforpoke-20">JavaScript: The Good Parts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Number Is a Double Is a Float]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/a-number-is-a-double-is-a-float/"/>
    <updated>2014-02-02T19:56:17-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/a-number-is-a-double-is-a-float</id>
    <content type="html"><![CDATA[<p>JavaScript has a single number type &mdash; a 64-bit floating point number. Since there is no separate integer type, 1 and 1.0 are the same value.</p>

<!--more-->


<p>One of the consequences is that the <code>/</code> operator may return a floating point number even if both operands are integers. Goodbye casting!</p>

<p><a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=bridgeforpoke-20">JavaScript: The Good Parts</a></p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor User]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/meteor-user/"/>
    <updated>2014-01-14T19:38:16-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/meteor-user</id>
    <content type="html"><![CDATA[<p><a href="http://www.packtpub.com/getting-started-with-meteor-javascript-framework/book">&ldquo;Getting Started with Meteor.js JavaScript Framework&rdquo;</a> by Isaac Strack is a great introduction to a powerful tool.</p>

<!--more-->


<h3>User accounts in three easy steps</h3>

<p>Meteor rolls its own user accounts system, and getting it running on your application is a three step process:</p>

<p>
<code>bash 1) command line: Add the relevant packages
$ meteor add accounts-base
accounts-base: A user account system
$ meteor add accounts-password
accounts-password: Password support for accounts
$ meteor add email
email: Send email messages
$ meteor add accounts-ui
accounts-ui: Simple templates to add login widgets to an app
</code>
</p>

<p>
```html 2) html: Add a div to hold the login button</p>

<div style="float:right; margin-right:20px;">
  {{loginButtons align="right"}}
</div>


<p>```
</p>

<p><code>javascript 3) client javascript: Add an Accounts config
Accounts.ui.config({
  passwordSignupFields: 'USERNAME_AND_OPTIONAL_EMAIL'
});
</code></p>

<h2>The catch</h2>

<p>While the server side and client side code looks similar they are definitely not interchangeable. Server code run on the client side will likely fail silently, but client code run on the server will crash the app. One place where I got tripped up was accessing the userId:</p>

<h3>Server side <code>this.userId</code></h3>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<h3>Client side: <code>Meteor.userId()</code></h3>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>Thanks to this <a href="http://stackoverflow.com/a/20781135">stackoverflow</a> response, the Meteor <a href="http://docs.meteor.com/">docs</a>, and packtpub&rsquo;s awesome <a href="http://www.packtpub.com/getting-started-with-meteor-javascript-framework/book">support page</a> for helping me get reacquainted with javascript contexts.</p>

<p>Awesome</p>
]]></content>
  </entry>
  
</feed>
