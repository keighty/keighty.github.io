<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-02-16T12:06:59-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meteor-managed Ids Won't Play Nicely With Others]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/make-meteor-minimongo-ids-play-nice/"/>
    <updated>2014-10-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/make-meteor-minimongo-ids-play-nice</id>
    <content type="html"><![CDATA[<p>I am working with a data dump from a meteor project, and while retrieving and displaying the existing collection was no problem at all, I was stuck on saving new documents to mongo.</p>

<p>My schema was pretty straightforward and taken directly from an existing document:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var postSchema = mongoose.Schema({
</span><span class='line'>  &ldquo;title&rdquo; : String,
</span><span class='line'>  &ldquo;company&rdquo; : String,
</span><span class='line'>  &ldquo;author&rdquo; : String,
</span><span class='line'>  &ldquo;music&rdquo; : String,
</span><span class='line'>  &ldquo;choreographer&rdquo; : String,
</span><span class='line'>  &ldquo;showDate&rdquo; : String,
</span><span class='line'>  &ldquo;image&rdquo;: String,
</span><span class='line'>  &ldquo;userId&rdquo; : String,
</span><span class='line'>  &ldquo;postAuthor&rdquo; : String,
</span><span class='line'>  &ldquo;submitted&rdquo; : Number,
</span><span class='line'>  &ldquo;commentsCount&rdquo; : Number,
</span><span class='line'>  &ldquo;_id&rdquo;:  String
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The problem was that last field: <code>_id</code>. If I included it in the schema then I would have the objectId available on the front end but would get an error trying to insert a new document: <code>[Error: document must have an _id before saving]</code>. If I removed <code>_id</code> from the schema I could save documents just fine but could not pass through the objectIds of already existing documents. I have learned that mongo is very flexible when it comes to assigning ids before insertion into the database.</p>

<p>Mongo objects created through a meteor application are given meteor-friendly objectIds, the uniqueness of which is monitored and maintained by a meteor wrapper class. The design decision to go with ids as strings seems to be <a href="https://groups.google.com/forum/#!topic/meteor-talk/f-ljBdZOwPk">motivated by meteor&rsquo;s latency compensation feature</a> &mdash; creating documents on the client-side and then later syncing them with the server requires that they are assigned objectIds before they ever reach mongo. Mongo will accept a manually entered id, trusting that there is an entity somewhere that is managing uniqueness.</p>

<p>Here was my problem: the documents created by meteor had String ids assigned by meteor. If I included <code>_id</code> in my schema, mongo would assume that I was managing id assignment manually, and wouldn&rsquo;t save the object until I did. If I did not include <code>_id</code> in my schema, mongo would assume it was responsible, and would assign a unique id accordingly.</p>

<p>To make the documents created by meteor play nice with the new stack, I had to update each document&rsquo;s <code>_id</code> with one created by mongo. Unfortunately, mongo won&rsquo;t allow modification of <code>_id</code> directly, so the only choice was to recreate and insert each entry, then delete the original:</p>

<ol>
<li>Retrieve a document: <code>doc = db.posts.findOne()</code></li>
<li>Save the title: <code>title = doc.title</code></li>
<li>Save the document&rsquo;s string id: <code>id = doc._id</code></li>
<li>Reassign the document id: <code>doc._id = ObjectId()</code></li>
<li>Save the updated document: <code>db.posts.insert(doc)</code></li>
<li>Remove the original document: <code>db.posts.remove({_id: id})</code></li>
<li>Verify that the post exists with the new id: <code>db.posts.findOne({"title": title})</code></li>
</ol>


<p>
```</p>

<blockquote><p>doc = db.posts.findOne()
{
  &ldquo;title&rdquo; : &ldquo;La Cage aux Folles&rdquo;,
  &ldquo;company&rdquo; : &ldquo;Pixie Dust Productions&rdquo;,
  &ldquo;author&rdquo; : &ldquo;Harvey Fierstein&rdquo;,
  &ldquo;music&rdquo; : &ldquo;Jerry Herman&rdquo;,
  &ldquo;showDate&rdquo; : ISODate(&ldquo;2014-09-21T07:00:00Z&rdquo;),
  &ldquo;dateSubmitted&rdquo; : 1411346259065,
  &ldquo;_id&rdquo; : &ldquo;EjzopWQa3mw5LB979&rdquo;
}</p>

<p>title = doc.title
La Cage aux Folles</p>

<p>id = doc._id
EjzopWQa3mw5LB979</p>

<p>doc._id = ObjectId()
ObjectId(&ldquo;5442af27cc37fe6f03648fdd&rdquo;)</p>

<p>db.posts.insert(doc)</p>

<p>db.posts.remove({_id: id})</p>

<p>db.posts.findOne({&ldquo;title&rdquo;: title})
{
  &ldquo;_id&rdquo; : ObjectId(&ldquo;5442af27cc37fe6f03648fdd&rdquo;),
  &ldquo;title&rdquo; : &ldquo;La Cage aux Folles&rdquo;,
  &ldquo;company&rdquo; : &ldquo;Pixie Dust Productions&rdquo;,
  &ldquo;author&rdquo; : &ldquo;Harvey Fierstein&rdquo;,
  &ldquo;music&rdquo; : &ldquo;Jerry Herman&rdquo;,
  &ldquo;showDate&rdquo; : ISODate(&ldquo;2014-09-21T07:00:00Z&rdquo;),
  &ldquo;dateSubmitted&rdquo; : 1411346259065,
  &ldquo;commentsCount&rdquo; : 1
}</p></blockquote>

<p>```
</p>

<p>Here is a handy script for changing the entire collection at once:</p>

<p><code>
db.posts.find().forEach(function(doc){ var doc = db.posts.findOne(); var title = doc.title; var id = doc._id; doc._id = ObjectId(); db.posts.insert(doc); db.posts.remove({_id: id}); })
</code></p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort All the Things With Mongo and node.js]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/sort_things_with_mongoose/"/>
    <updated>2014-10-09T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/sort_things_with_mongoose</id>
    <content type="html"><![CDATA[<p>Sorting shouldn&rsquo;t be difficult, but through my experience learning meteor I discovered that if mongo likes sort commands one way:</p>

<p><code>db.posts.find().sort({submitted: -1})</code></p>

<p>meteor would like them a different way:</p>

<p><code>Posts.find({}, {sort: {submitted : -1}}</code></p>

<p>I am adapting one of my meteor projects to use mongo and node.js, connected through mongoose, and fitting in the callback required for node sent me to the google. After a few stackoverflow searches I turned up a several options:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Option 1 (spoiler.. it didn&rsquo;t work) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post.find({}, {sort:[[&lsquo;submitted&rsquo;,-1]]}, function(err, doc) {
</span><span class='line'>  response.send(doc);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This option returned a object containing only the entry ids, not the full documents:</p>

<p>
<code>
0: {_id:2tcte4Srd8QMSqrKt}
1: {_id:5c3FdWphiYiMQzukw}
2: {_id:62vAt5ewucKm542DH}
3: {_id:AWNYsxBgFnv9Z4NSA}
...
</code>
</p>

<p>Another option suggested that converting the result to an Array would complete the query:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Option2 (spoiler.. also didn&rsquo;t work) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post.find({},{sort: [[&lsquo;submitted&rsquo;,-1]]}).toArray(function(e, results){
</span><span class='line'>  response.send(results);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This option resulted in <code>TypeError: Object #&lt;Query&gt; has no method 'toArray'</code>.</p>

<p>Rather than continuing to search for a snippet to steal, I turned to the source, and it turns out that querying mongo from mongoose is simpler than either of these strategies.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Option3 &mdash; just right </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post.find()
</span><span class='line'>  .sort(&ldquo;-submitted&rdquo;)
</span><span class='line'>  .exec(function(err, doc) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>response.send(doc);
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  });</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Success! Why? Because while mongo itself returns a cursor object which can be transformed into documents using <code>toArray()</code>, or <code>fetch()</code> in the case of meteor, mongoose returns a <a href="http://mongoosejs.com/docs/queries.html">Query</a> object, which will return the full documents once it is passed a callback.</p>

<p>A Query object can be built using <a href="https://github.com/LearnBoost/mongoose/blob/master/lib/query.js#L211-L216">method chaining</a> &mdash;
 each method (find | where | limit | select | sort) returns a new Query object, which allows you to build in stages:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post
</span><span class='line'>.find({ title: /the/ }) // query
</span><span class='line'>.where(&lsquo;cost&rsquo;).gt(17).lt(66)  // query
</span><span class='line'>.where(&lsquo;location&rsquo;).in([&lsquo;Schnitz&rsquo;, &lsquo;Armory&rsquo;])  // query
</span><span class='line'>.limit(10)  // query
</span><span class='line'>.sort(&lsquo;-ticketDate&rsquo;)  // query
</span><span class='line'>.select(&lsquo;title company&rsquo;)  // query
</span><span class='line'>.exec(callback);  // EXECUTE THE QUERY</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Another fun bit of javascript/mongoose magic, is that you can indicate <a href="https://github.com/LearnBoost/mongoose/blob/master/lib/query.js#L1295-L1297">sorting in descending order</a> by prefacing the sort string with a &ldquo;&ndash;&rdquo; :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post
</span><span class='line'>.find({ title: /the/ }) // query
</span><span class='line'>.sort(&lsquo;-ticketDate&rsquo;)  // DESC!
</span><span class='line'>.exec(callback);  // EXECUTE THE QUERY</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="http://docs.mongodb.org/manual/reference/operator/meta/orderby/">mongo docs</a></p>

<p><a href="http://stackoverflow.com/a/20859457">stackoverflow</a></p>
]]></content>
  </entry>
  
</feed>
