<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2017-02-25T11:52:05-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    <email><![CDATA[keighty.leonard@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The EventEmitter Pattern and the Event Loop -- a Timeline]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/event-emitter-and-event-loop/"/>
    <updated>2016-10-14T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/event-emitter-and-event-loop</id>
    <content type="html"><![CDATA[<p>The EventEmitter pattern is a derivative of the Observer pattern: an object can notify a set of observers when a change in its state occurs.<!--more--> Consider the following example using the EventEmitter pattern:</p>

<p>```javascript
const EventEmitter = require(&lsquo;events&rsquo;).EventEmitter
const fs = require(&lsquo;fs&rsquo;)</p>

<p>const findPattern = (files, regex) => {
  const emitter = new EventEmitter()</p>

<p>  files.forEach(file => {</p>

<pre><code>fs.readFile(file, 'utf8', (err, content) =&gt; {
  if (err) return emitter.emit('error', err)

  emitter.emit('fileread', file)

  let match
  if (match = content.match(regex)) {
    match.forEach(elem =&gt; {
      emitter.emit('found', file, elem)
    })
  }
})
</code></pre>

<p>  })
  return emitter
}</p>

<p>// fileA.txt contains the words &ldquo;hello blah blah blah&rdquo;
// fileB.json is empty
// fileC.md does not exist
const files = [&lsquo;fileA.txt&rsquo;, &lsquo;fileB.json&rsquo;, &lsquo;fileC.md&rsquo;]</p>

<p>findPattern(files, /hello \w+/g)
  .on(&lsquo;fileread&rsquo;, file => {console.log(<code>${file} was read</code>)})
  .on(&lsquo;found&rsquo;, (file, match) => {console.log(<code>Matched ${match} in file ${file}</code>)})
  .on(&lsquo;error&rsquo;, err => {console.log(<code>Error emitted: ${err.message}</code>)})
```</p>

<p>Some of the script is executed synchronously, but the real work is done asynchronously. The EventEmitter pattern takes advantage of the event loop to work efficiently.</p>

<p>Keep the following schematic in mind as you parse through the execution of this script:</p>

<p><img src="/images/161012-callbacks/event-loop.png"></p>

<p><em>image credit: Mario Casciaro and Luciano Mammino from Node.js Design Patterns. Colour notations are mine.</em></p>

<p>The first set of operations happen synchronously:</p>

<ul>
<li>call <code>findPattern</code> with the file list and regex pattern</li>
<li>create a new event emitter</li>
<li>submit <code>readFile</code> I/O request for fileA.txt to the event demultiplexer</li>
<li>submit <code>readFile</code> I/O request for fileB.json to the event demultiplexer</li>
<li>submit <code>readFile</code> I/O request for fileC.md to the event demultiplexer</li>
<li>return the event emitter</li>
<li>register <code>fileread</code> listener on the event emitter</li>
<li>register <code>found</code> listener on the event emitter</li>
<li>register <code>error</code> listener on the event emitter</li>
</ul>


<p><img src="/images/161014-event-emitter/event-emitter-1.png"></p>

<p>Once the I/O operations are submitted to the event demultiplexer, they will return in the order in which the requests are fulfilled. In this example, fileC.md does not exist, so the event demultiplexer submits the result along with the handler to the Event loop.</p>

<ul>
<li>The event loop runs the result through the callback for fileC.md, which <strong>emits an error event</strong> (line 9)! The EventEmitter adds the error handler to the event loop.</li>
</ul>


<p><img src="/images/161014-event-emitter/event-emitter-2.png"></p>

<p>In the meantime, the event demultiplexer has fulfilled the I/O request for fileB.json, and added the result and the callback to the event loop.</p>

<ul>
<li>The event loop runs the result through the callback for fileB, which emits a <code>fileread</code> event (line 11). The EventEmitter adds the <code>fileread</code> handler to the event loop.</li>
</ul>


<p>The event demultiplexer also fulfills the I/O request for fileA.txt and adds the result and the callback to the event loop.</p>

<ul>
<li>The event loop runs the result through the callback for fileA, which emits a <code>fileread</code> event (line 11) AND a <code>found</code> event (line 16). The EventEmitter adds the <code>fileread</code> and <code>found</code> handlers to the event loop.</li>
</ul>


<p>The event loop is busily processing all of these events in the order of arrival:</p>

<ul>
<li>run the listener callback for the <code>error</code> event (fileC)</li>
<li>run the listener callback for the <code>fileread</code> event (fileB)</li>
<li>run the listener callback for the <code>fileread</code> event (fileA)</li>
<li>FINALLY &mdash; run the listener callback for the <code>found</code> event (fileA)</li>
</ul>


<p>The result of running this script on the command line:</p>

<p><code>text
$ node --use_strict events.js
Error emitted: ENOENT: no such file or directory, open 'fileC.md'
fileB.json was read
fileA.txt was read
Matched hello blah in file fileA.txt
</code></p>

<p><em>Side note: set the flag <code>--use-strict</code> to run scripts using ES6 syntax</em></p>

<p>Why did the files process in what seems to be reverse order? The event demultiplexer adds work to the event loop as it fulfills I/O requests. When <code>readfile()</code> is given three files &mdash; a file with content (fileA), an empty file (fileB), and a non-existent file (fileC) &mdash; it is reasonable to assume that the I/O request for a non-existent file will return first, as there is no file to read. It is also reasonable that an empty file will  return next, as there is very little work to be done reading an empty file. Finally, the I/O request for the file with content returns &mdash; it requires more work to read a file with content than an empty file.</p>

<p>For more about the event emitter pattern in Node, check out <a href="https://www.amazon.com/Node-js-Design-Patterns-Mario-Casciaro/dp/1785885588/ref=sr_1_1/161-7210115-5247461?ie=UTF8&amp;qid=1476284148&amp;sr=8-1&amp;keywords=node.js+design+patterns">Node.js Design Patterns</a> by Mario Casciaro and Luciano Mammino.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uploading Images From Node and Angular to S3]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/uploading-images-from-node-slash-angular-to-s3/"/>
    <updated>2015-02-24T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/uploading-images-from-node-slash-angular-to-s3</id>
    <content type="html"><![CDATA[<p>Amazon Web Services allow you to do everything, so it is hard to figure out how to do anything. I have a node/angular/mongo stack running on Heroku, and want to use Amazon to store images. I was delighted to stumble across <a href="https://devcenter.heroku.com/articles/s3-upload-node"><em>Direct to S3 Uploads in Node.js</em></a>, written by Will Webberly for the Heroku Dev Center blog.
Following his <a href="https://github.com/flyingsparx/NodeDirectUploader">example</a>, I was able to upload images directly from the browser to S3, saving my app server a whole lot of work.</p>

<!--more-->


<p>In the example, when a user selects a file for upload, the browser asks the node server for a temporary signed request. The server replies with a signed url, and the browser can send the data directly to Amazon. TADA &mdash; Almost. With a few exceptions. One of the prerequisites is that you know how to set up an S3 bucket and IAM user with the correct access controls.</p>

<h4>Setting the S3 stage</h4>

<p>When S3 receives a request it must verify that the requester has the proper permissions &mdash; both at the account level, as well as at the bucket level. With a seemingly infinite number of services available through Amazon, I found that I had to aggregate information from a few different sources.</p>

<ol>
<li>Create a bucket

<ul>
<li>See <a href="http://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html">this Amazon tutorial</a> for how to create a bucket.</li>
</ul>
</li>
<li>Create a user

<ul>
<li>See <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_SettingUpUser.html#Using_CreateUser_console">this Amazon tutorial</a> for creating an IAM User.</li>
<li>Be sure to record the generated <code>Access Key ID</code> and <code>Secret Access Key</code>. They will act as user name and password for accessing your bucket.</li>
</ul>
</li>
<li>Grant the IAM User access to S3

<ul>
<li>In the IAM User section of the AWS Management Console, select <code>Attach Policy</code>, and add <code>AmazonS3FullAccess</code> from the list
<img src="/images/IAM_Management_Console.png"></li>
</ul>
</li>
<li>Grant the IAM User access to the bucket

<ul>
<li>Use <a href="http://awspolicygen.s3.amazonaws.com/policygen.html">this Amazon tool</a> to help you generate an Access Control Policy. The key pieces you need for the policy generator are the AWS Principle (the user you created), which you enter in the format <code>arn:aws:iam::&lt;your_account_number&gt;:&lt;IAM_user_name&gt;</code>, and the Resource (the bucket you created), which you enter in the format <code>arn:aws:s3:::&lt;your_bucket_name&gt;/*</code>.</li>
</ul>
</li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Your access control policy should look like this example: </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  &ldquo;Version&rdquo;:&ldquo;2012-10-17&rdquo;,
</span><span class='line'>  &ldquo;Id&rdquo;: &ldquo;Policy1234567890123&rdquo;,
</span><span class='line'>  &ldquo;Statement&rdquo;:[{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>"Sid":"Stmt123456789",
</span><span class='line'>"Effect":"Allow",
</span><span class='line'>"Principal": {
</span><span class='line'>        "AWS": "arn:aws:iam::111122223333:specialUser"
</span><span class='line'>},
</span><span class='line'>"Action":[
</span><span class='line'>  "s3:PutObject",
</span><span class='line'>  "s3:DeleteObject",
</span><span class='line'>  "s3:GetObject"
</span><span class='line'>],
</span><span class='line'>"Resource":"arn:aws:s3:::examplebucket/*"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  }]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In case you get lost, here is <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/how-s3-evaluates-access-control.html">one more invaluable Amazon tutorial</a>.</p>

<h4>Angular client side</h4>

<p>Using an angular app on the client side is also a slight deviation from the Webberly tutorial. Angular <a href="https://github.com/angular/angular.js/issues/1375">does not support</a> an <code>ng-change</code> binding on file input elements, but there is a <a href="http://stackoverflow.com/a/17923521">workaround</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control btn&quot;</span> <span class="na">id=</span><span class="s">&quot;image&quot;</span> <span class="na">onchange=</span><span class="s">&quot;angular.element(this).scope().s3Upload(this)&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Additionally, instead of adding the upload function as plain javascript in your html template, add the <code>s3Upload</code> function onto the <code>$scope</code> in your controller.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">s3Upload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">status_elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">status</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url_elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">image_url</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">preview_elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">preview</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">s3upload</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">S3Upload</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="nx">s3_object_name</span><span class="o">:</span> <span class="nx">showTitleUrl</span><span class="p">(),</span>  <span class="c1">// upload object with a custom name</span>
</span><span class='line'>  <span class="nx">file_dom_selector</span><span class="o">:</span> <span class="s1">&#39;image&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">s3_sign_put_url</span><span class="o">:</span> <span class="s1">&#39;/sign_s3&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">onProgress</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">percent</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">status_elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;Upload progress: &#39;</span> <span class="o">+</span> <span class="nx">percent</span> <span class="o">+</span> <span class="s1">&#39;% &#39;</span> <span class="o">+</span> <span class="nx">message</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">onFinishS3Put</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">public_url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">status_elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;Upload completed. Uploaded to: &#39;</span><span class="o">+</span> <span class="nx">public_url</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">url_elem</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">public_url</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">preview_elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;img src=&quot;&#39;</span><span class="o">+</span> <span class="nx">public_url</span> <span class="o">+</span><span class="s1">&#39;&quot; style=&quot;width:300px;&quot; /&amp;gt;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">onError</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">status_elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;Upload error: &#39;</span> <span class="o">+</span> <span class="nx">status</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note the diff on line 6 &mdash; taking a peek into the <a href="https://github.com/flyingsparx/NodeDirectUploader/blob/master/public/javascripts/s3upload.js#L23-L29">S3Upload source</a>, you can set a custom file name by passing a <code>s3_object_name</code> option. Otherwise, every object will be named <code>default_name</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">s3_upload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">s3upload</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">S3Upload</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">s3_object_name</span><span class="o">:</span> <span class="nx">showTitleUrl</span><span class="p">(),</span>  <span class="c1">// upload object with a custom name</span>
</span><span class='line'><span class="nx">file_dom_selector</span><span class="o">:</span> <span class="s1">&#39;image&#39;</span><span class="p">,</span>
</span><span class='line'><span class="nx">s3_sign_put_url</span><span class="o">:</span> <span class="s1">&#39;/sign_s3&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">showTitleUrl</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">show</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">join</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">_</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dateId</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">().</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">dateId</span> <span class="o">+</span> <span class="nx">title</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Add <code>image</code> to your schema</h4>

<p>The last stumbling block I encountered was saving the image url into mongo. The image would upload and appear just fine, but wouldn&rsquo;t persist the url as a property of the object. I had forgotten to add the image to my mongo Schema &mdash; the schema acts a bit like a whitelist for saving attributes through mongoose into mongo. Adding the <a href="https://github.com/keighty/virtualplaybill2/blob/ad04bcde8ce00c5ce349f43d2e0cc50549c59df7/models/posts_model.js#L11">imageUrl to the schema</a> solved all my woes.</p>

<p>If you are trying to accomplish something similar, Heroku has articles on <a href="https://devcenter.heroku.com/articles/s3">uploading directly to S3</a> using many different stacks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor-managed Ids Won't Play Nicely With Others]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/make-meteor-minimongo-ids-play-nice/"/>
    <updated>2014-10-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/make-meteor-minimongo-ids-play-nice</id>
    <content type="html"><![CDATA[<p>I am working with a data dump from a meteor project, and while retrieving and displaying the existing collection was no problem at all, I was stuck on saving new documents to mongo.</p>

<p>My schema was pretty straightforward and taken directly from an existing document:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var postSchema = mongoose.Schema({
</span><span class='line'>  &ldquo;title&rdquo; : String,
</span><span class='line'>  &ldquo;company&rdquo; : String,
</span><span class='line'>  &ldquo;author&rdquo; : String,
</span><span class='line'>  &ldquo;music&rdquo; : String,
</span><span class='line'>  &ldquo;choreographer&rdquo; : String,
</span><span class='line'>  &ldquo;showDate&rdquo; : String,
</span><span class='line'>  &ldquo;image&rdquo;: String,
</span><span class='line'>  &ldquo;userId&rdquo; : String,
</span><span class='line'>  &ldquo;postAuthor&rdquo; : String,
</span><span class='line'>  &ldquo;submitted&rdquo; : Number,
</span><span class='line'>  &ldquo;commentsCount&rdquo; : Number,
</span><span class='line'>  &ldquo;_id&rdquo;:  String
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The problem was that last field: <code>_id</code>. If I included it in the schema then I would have the objectId available on the front end but would get an error trying to insert a new document: <code>[Error: document must have an _id before saving]</code>. If I removed <code>_id</code> from the schema I could save documents just fine but could not pass through the objectIds of already existing documents. I have learned that mongo is very flexible when it comes to assigning ids before insertion into the database.</p>

<p>Mongo objects created through a meteor application are given meteor-friendly objectIds, the uniqueness of which is monitored and maintained by a meteor wrapper class. The design decision to go with ids as strings seems to be <a href="https://groups.google.com/forum/#!topic/meteor-talk/f-ljBdZOwPk">motivated by meteor&rsquo;s latency compensation feature</a> &mdash; creating documents on the client-side and then later syncing them with the server requires that they are assigned objectIds before they ever reach mongo. Mongo will accept a manually entered id, trusting that there is an entity somewhere that is managing uniqueness.</p>

<p>Here was my problem: the documents created by meteor had String ids assigned by meteor. If I included <code>_id</code> in my schema, mongo would assume that I was managing id assignment manually, and wouldn&rsquo;t save the object until I did. If I did not include <code>_id</code> in my schema, mongo would assume it was responsible, and would assign a unique id accordingly.</p>

<p>To make the documents created by meteor play nice with the new stack, I had to update each document&rsquo;s <code>_id</code> with one created by mongo. Unfortunately, mongo won&rsquo;t allow modification of <code>_id</code> directly, so the only choice was to recreate and insert each entry, then delete the original:</p>

<ol>
<li>Retrieve a document: <code>doc = db.posts.findOne()</code></li>
<li>Save the title: <code>title = doc.title</code></li>
<li>Save the document&rsquo;s string id: <code>id = doc._id</code></li>
<li>Reassign the document id: <code>doc._id = ObjectId()</code></li>
<li>Save the updated document: <code>db.posts.insert(doc)</code></li>
<li>Remove the original document: <code>db.posts.remove({_id: id})</code></li>
<li>Verify that the post exists with the new id: <code>db.posts.findOne({"title": title})</code></li>
</ol>


<p>
```</p>

<blockquote><p>doc = db.posts.findOne()
{
  &ldquo;title&rdquo; : &ldquo;La Cage aux Folles&rdquo;,
  &ldquo;company&rdquo; : &ldquo;Pixie Dust Productions&rdquo;,
  &ldquo;author&rdquo; : &ldquo;Harvey Fierstein&rdquo;,
  &ldquo;music&rdquo; : &ldquo;Jerry Herman&rdquo;,
  &ldquo;showDate&rdquo; : ISODate(&ldquo;2014-09-21T07:00:00Z&rdquo;),
  &ldquo;dateSubmitted&rdquo; : 1411346259065,
  &ldquo;_id&rdquo; : &ldquo;EjzopWQa3mw5LB979&rdquo;
}</p>

<p>title = doc.title
La Cage aux Folles</p>

<p>id = doc._id
EjzopWQa3mw5LB979</p>

<p>doc._id = ObjectId()
ObjectId(&ldquo;5442af27cc37fe6f03648fdd&rdquo;)</p>

<p>db.posts.insert(doc)</p>

<p>db.posts.remove({_id: id})</p>

<p>db.posts.findOne({&ldquo;title&rdquo;: title})
{
  &ldquo;_id&rdquo; : ObjectId(&ldquo;5442af27cc37fe6f03648fdd&rdquo;),
  &ldquo;title&rdquo; : &ldquo;La Cage aux Folles&rdquo;,
  &ldquo;company&rdquo; : &ldquo;Pixie Dust Productions&rdquo;,
  &ldquo;author&rdquo; : &ldquo;Harvey Fierstein&rdquo;,
  &ldquo;music&rdquo; : &ldquo;Jerry Herman&rdquo;,
  &ldquo;showDate&rdquo; : ISODate(&ldquo;2014-09-21T07:00:00Z&rdquo;),
  &ldquo;dateSubmitted&rdquo; : 1411346259065,
  &ldquo;commentsCount&rdquo; : 1
}</p></blockquote>

<p>```
</p>

<p>Here is a handy script for changing the entire collection at once:</p>

<p><code>
db.posts.find().forEach(function(doc){ var doc = db.posts.findOne(); var title = doc.title; var id = doc._id; doc._id = ObjectId(); db.posts.insert(doc); db.posts.remove({_id: id}); })
</code></p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort All the Things With Mongo and node.js]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/sort_things_with_mongoose/"/>
    <updated>2014-10-09T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/sort_things_with_mongoose</id>
    <content type="html"><![CDATA[<p>Sorting shouldn&rsquo;t be difficult, but through my experience learning meteor I discovered that if mongo likes sort commands one way:</p>

<p><code>db.posts.find().sort({submitted: -1})</code></p>

<p>meteor would like them a different way:</p>

<p><code>Posts.find({}, {sort: {submitted : -1}}</code></p>

<p>I am adapting one of my meteor projects to use mongo and node.js, connected through mongoose, and fitting in the callback required for node sent me to the google. After a few stackoverflow searches I turned up a several options:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Option 1 (spoiler.. it didn&rsquo;t work) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post.find({}, {sort:[[&lsquo;submitted&rsquo;,-1]]}, function(err, doc) {
</span><span class='line'>  response.send(doc);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This option returned a object containing only the entry ids, not the full documents:</p>

<p>
<code>
0: {_id:2tcte4Srd8QMSqrKt}
1: {_id:5c3FdWphiYiMQzukw}
2: {_id:62vAt5ewucKm542DH}
3: {_id:AWNYsxBgFnv9Z4NSA}
...
</code>
</p>

<p>Another option suggested that converting the result to an Array would complete the query:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Option2 (spoiler.. also didn&rsquo;t work) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post.find({},{sort: [[&lsquo;submitted&rsquo;,-1]]}).toArray(function(e, results){
</span><span class='line'>  response.send(results);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This option resulted in <code>TypeError: Object #&lt;Query&gt; has no method 'toArray'</code>.</p>

<p>Rather than continuing to search for a snippet to steal, I turned to the source, and it turns out that querying mongo from mongoose is simpler than either of these strategies.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Option3 &mdash; just right </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post.find()
</span><span class='line'>  .sort(&ldquo;-submitted&rdquo;)
</span><span class='line'>  .exec(function(err, doc) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>response.send(doc);
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  });</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Success! Why? Because while mongo itself returns a cursor object which can be transformed into documents using <code>toArray()</code>, or <code>fetch()</code> in the case of meteor, mongoose returns a <a href="http://mongoosejs.com/docs/queries.html">Query</a> object, which will return the full documents once it is passed a callback.</p>

<p>A Query object can be built using <a href="https://github.com/LearnBoost/mongoose/blob/master/lib/query.js#L211-L216">method chaining</a> &mdash;
 each method (find | where | limit | select | sort) returns a new Query object, which allows you to build in stages:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post
</span><span class='line'>.find({ title: /the/ }) // query
</span><span class='line'>.where(&lsquo;cost&rsquo;).gt(17).lt(66)  // query
</span><span class='line'>.where(&lsquo;location&rsquo;).in([&lsquo;Schnitz&rsquo;, &lsquo;Armory&rsquo;])  // query
</span><span class='line'>.limit(10)  // query
</span><span class='line'>.sort(&lsquo;-ticketDate&rsquo;)  // query
</span><span class='line'>.select(&lsquo;title company&rsquo;)  // query
</span><span class='line'>.exec(callback);  // EXECUTE THE QUERY</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Another fun bit of javascript/mongoose magic, is that you can indicate <a href="https://github.com/LearnBoost/mongoose/blob/master/lib/query.js#L1295-L1297">sorting in descending order</a> by prefacing the sort string with a &ldquo;&ndash;&rdquo; :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post
</span><span class='line'>.find({ title: /the/ }) // query
</span><span class='line'>.sort(&lsquo;-ticketDate&rsquo;)  // DESC!
</span><span class='line'>.exec(callback);  // EXECUTE THE QUERY</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="http://docs.mongodb.org/manual/reference/operator/meta/orderby/">mongo docs</a></p>

<p><a href="http://stackoverflow.com/a/20859457">stackoverflow</a></p>
]]></content>
  </entry>
  
</feed>
