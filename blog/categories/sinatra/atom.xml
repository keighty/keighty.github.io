<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sinatra | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/sinatra/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2017-02-05T13:57:48-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    <email><![CDATA[keighty.leonard@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sinatra in a Console]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/sinatra-in-a-console/"/>
    <updated>2013-07-22T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/sinatra-in-a-console</id>
    <content type="html"><![CDATA[<p>Sinatra does not have a default console like rails does. If you are writing in a rails environment and need to test out a helper method, or want to check on the state of a record in the database, dropping down into the rails console is as easy as typing:
<div>
  <pre><code class='bash'>$ rails c</code></pre>
</div>
</p>

<p>How can we achieve the same ability in Sinatra?<!--more--></p>

<h3>Tux</h3>

<p>Tux is a ruby gem that generates a sinatra console. It reads the config.ru, allows you to interact with App methods, and provides empty request and response objects to for investigating communication between views and the Sinatra controller.</p>

<p>Add Tux to your Gemfile:
<div>
  <pre><code class='ruby'>group :development, :test do
  &amp;hellip;
  gem &amp;lsquo;tux&amp;rsquo;
end</code></pre>
</div>
</p>

<p>Don&rsquo;t forget to bundle!</p>

<p>At the command line, start up tux and use rack.actions to view all the methods available:
<div>
  <pre><code class='bash'>$ tux
Loading development environment (Rack 1.2)&lt;/p&gt;

&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;rack.actions
=&gt; [:request, :get, :post, :put, :patch, :delete, :options, :head, :follow_redirect!, :header, :set_cookie, :clear_cookies, :authorize, :basic_authorize, :digest_authorize, :last_response, :last_request]</code></pre>
</div>
</p></blockquote></blockquote>

<p>You can access any method from your application as well.
Of course, if you are working in Sinatra, you probably want to go as lightweight as possible, which is why you can also use:</p>

<h3>Basic irb</h3>

<p>It is as simple as using irb and requiring your main app file. You have access to all the dependencies and files that your application does by simply requiring that one file. You can check state, call methods, create objects, whatever you need:
<div>
  <pre><code class='bash'>$ irb&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;require &amp;lsquo;./app.rb&amp;rsquo;
 =&gt; true
User.all
D, [2013-07-22T15:47:49.230146 #54081] DEBUG &amp;mdash; :   User Load (0.2ms)  SELECT &amp;ldquo;users&amp;rdquo;.* FROM &amp;ldquo;users&amp;rdquo;
 =&gt; #&amp;lt;ActiveRecord::Relation [#&lt;User id: 1, name: &quot;Gordon Shumway&quot;, email: &quot;gordon@example.com&quot;, created_at: &quot;2013-07-22 22:45:48&quot;, updated_at: &quot;2013-07-22 22:45:48&quot;&gt;, #&lt;User id: 2, name: &quot;Fanny Eubanks&quot;, email: &quot;fanny@example.com&quot;, created_at: &quot;2013-07-22 22:45:48&quot;, updated_at: &quot;2013-07-22 22:45:48&quot;&gt;]&gt;</code></pre>
</div>
</p></blockquote>

<p>This can be called even more elegantly at the command line:
<div>
  <pre><code class='bash'>$ irb -r ./app.rb</code></pre>
</div>
</p>

<p>or through a Rake task:
<div>
  <pre><code class='bash'>desc &amp;ldquo;run irb console&amp;rdquo;
task :console, :environment do |t, args|
  ENV[&amp;lsquo;RACK_ENV&amp;rsquo;] = args[:environment] || &amp;lsquo;development&amp;rsquo;
  exec &amp;ldquo;irb -r irb/completion -r ./app.rb&amp;rdquo;
end</code></pre>
</div>
</p>

<p>Awesome</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Your Kicks on Route Localhost:4567]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/get-your-kicks-on-localhost4567/"/>
    <updated>2013-07-17T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/get-your-kicks-on-localhost4567</id>
    <content type="html"><![CDATA[<p>I am building a code breaking game along the lines of Mastermind and I encountered a block.</p>

<h2>The problem</h2>

<ul>
<li>I have a javascript that generates a secret code.</li>
<li>I have a ruby class that compares a guess to the secret code and returns an analysis of the accuracy of the guess.</li>
<li>How do I get the ruby class to process a guess and secret code from the browser?</li>
</ul>


<!--more-->


<h2>I learned something about Ajax today.</h2>

<p>An ajax call is built up from a few minimum parameters: a url, the HTTP method, the dataType expected, and a callback function that handles the return. You can include data from the user in the form of a data hash:</p>

<p><div>
  <pre><code class='javascript'>var the_url = &amp;ldquo;&lt;a href=&quot;http://&quot;&gt;http://&lt;/a&gt;&amp;rdquo; + window.location.host + &amp;ldquo;/game/&amp;rdquo; + guess_string;
  var mark_string = $.ajax({&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type: &quot;POST&quot;,
url: the_url,
accepts: &quot;application/json&quot;,
dataType: &quot;json&quot;,
data: { &#39;code&#39; : secret_code },
complete: function(data){
  output_mark = data[&#39;responseText&#39;];
  process_output(secret_code, guess_string, output_mark);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  });</code></pre>
</div>
</p>

<p>This code snippet is using Ajax to send the secret code and guess to the Sinatra route.</p>

<h2>I learned something about Sinatra today.</h2>

<p>A route has three ingredients: an HTTP method, a URL matching pattern, and a code block.
Typically they look like this:
<div>
  <pre><code class='ruby'>get &amp;lsquo;/&amp;rsquo; do
  &amp;ldquo;hello world&amp;rdquo;
end</code></pre>
</div>
</p>

<p>But they can also look like this:
<div>
  <pre><code class='ruby'>post &amp;lsquo;/game/:guess&amp;rsquo; do
  game.guess(params[:guess])
end
private
  def game&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@game ||= Mastermind::Game.new_with_code(params[:code])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  end</code></pre>
</div>
</p>

<p>The code block returns information. That information can be anything, from a plain string (first example), or an html web page, to a JSON representation of an object (second example). What the browser does with the information it receives is the browser&rsquo;s business.</p>

<p>The overall workflow:
1. The url on my local machine looks like this: &ldquo;<a href="http://localhost:4567/game/12345">http://localhost:4567/game/12345</a>&rdquo; (line 1). The submitted guess is 12345.
2. Ajax packages the url with the data hash containing the secret code (line 7).
3. Javascript submits the HTTP POST request to Sinatra which matches the route.
4. The route creates a Mastermind::Game object with the provided secret code.
5. The route calls the guess method on the Game object with the submitted guess.
6. The route returns a json of the method output (in this case it is a string of +/&ndash; characters indicating exact number matches(+) or matched numbers in the wrong position(&ndash;)).
7. In the ajax callback function the data from the json object is parsed and passed on for further processing.</p>

<h2>I learned something about routes today.</h2>

<p>I had a mental block about routes. I thought that building the &ldquo;/game/:guess&rdquo; route in Sinatra meant that the user would be constantly navigating between &ldquo;/mastermind&rdquo; and &ldquo;/game/:guess&rdquo;, and that the game would always be reloading with a new secret. I was thinking about routes the wrong way &mdash; when javascript calls the route, it doesn&rsquo;t reload the page, it just retrieves data! I had conflated routes with navigation in my imagination, and forgot that a route is just a method call containing a request for information. Just because the information returned is often rendered as an html page doesn&rsquo;t mean that it has to be html. Which leads me to the penultimate point&hellip;</p>

<h2>I learned something about curl today.</h2>

<p>ANYTHING can make an HTTP request. Ok, maybe that is a slight overstatement.</p>

<p>Browsers interpret the information retrieved using HTTP requests, but they are far from the only category of software that can. Turns out, the command-line functions just as well:
<div>
  <pre><code class='bash'>$ curl -X POST -H &amp;ldquo;Accept: application/json&amp;rdquo; -d &amp;ldquo;code=12345&amp;rdquo; js-games.herokuapp.com/12345
+++++$</code></pre>
</div>
</p>

<p>The command on line 1 will return the same string I am retrieving with $.ajax in javascript (output on line2). Sure it is a fairly plain result &mdash; it doesn&rsquo;t even include a new line character, for pity&rsquo;s sake &mdash; but it does the job of making an HTTP request to a route and using the result.</p>

<h2>I learned something about myself today.</h2>

<p>I didn&rsquo;t even realize I was misunderstanding HTTP! It was one of those concepts I had already checked off my mental list of technologies to cover on my quest to become a web developer. This breakthrough has reminded me that reviewing the fundamentals in the context of learning new technologies will bring a deeper understanding of everything.</p>

<p>Awesome</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partial to Sinatra]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/partial-to-sinatra/"/>
    <updated>2013-07-09T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/partial-to-sinatra</id>
    <content type="html"><![CDATA[<p>Having just discovered the magic of using partials to refactor html in rails, imagine my delight when I found it to be even easier in Sinatra.</p>

<!--more-->


<p>A partial is a just a fragment of html (or erb). They can be used for rendering duplicate or dynamic content into otherwise static pages.</p>

<p>I was writing html for my JSGames sinatra application when I caught myself copying a snippet of html onto my clipboard. Why on earth would I duplicate code? I want to include a block of text on both the index and the game page, but I don&rsquo;t want to have to modify it in two places when I inevitably get around to rewriting it.</p>

<p>The solution?</p>

<p>Factor out the duplicate html into a partial (begin name with _ for identification purposes). For example <code>_gameDescription.erb</code>
<div>
  <pre><code class='html'>&lt;/p&gt;

&lt;h1&gt;Game Title&lt;/h1&gt;


&lt;p&gt;Game description&lt;/p&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p>Add that partial wherever you want to display this snippet of code:
<div>
  <pre><code class='ruby'>&amp;lt;%= erb :_gameDescription  %&gt;</code></pre>
</div>
</p>

<p>For example:
<div>
  <pre><code class='ruby'>&lt;/p&gt;

&lt;div class=&quot;span4 pagination-centered&quot;&gt;
  &lt;%= erb :_solitaireDesc  %&gt;
  &lt;a href=&quot;http://www.katieleonard.ca/game&quot; class=&quot;btn btn-large&quot;&gt;Play&lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p>Check out the final product on <a href="http://js-games.herokuapp.com/solitaire">JSGames</a>.</p>

<p>Awesome</p>
]]></content>
  </entry>
  
</feed>
