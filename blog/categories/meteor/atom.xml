<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Meteor | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/meteor/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-12-26T15:09:45-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meteor-managed Ids Won't Play Nicely With Others]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/make-meteor-minimongo-ids-play-nice/"/>
    <updated>2014-10-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/make-meteor-minimongo-ids-play-nice</id>
    <content type="html"><![CDATA[<p>I am working with a data dump from a meteor project, and while retrieving and displaying the existing collection was no problem at all, I was stuck on saving new documents to mongo.</p>

<p>My schema was pretty straightforward and taken directly from an existing document:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var postSchema = mongoose.Schema({
</span><span class='line'>  &ldquo;title&rdquo; : String,
</span><span class='line'>  &ldquo;company&rdquo; : String,
</span><span class='line'>  &ldquo;author&rdquo; : String,
</span><span class='line'>  &ldquo;music&rdquo; : String,
</span><span class='line'>  &ldquo;choreographer&rdquo; : String,
</span><span class='line'>  &ldquo;showDate&rdquo; : String,
</span><span class='line'>  &ldquo;image&rdquo;: String,
</span><span class='line'>  &ldquo;userId&rdquo; : String,
</span><span class='line'>  &ldquo;postAuthor&rdquo; : String,
</span><span class='line'>  &ldquo;submitted&rdquo; : Number,
</span><span class='line'>  &ldquo;commentsCount&rdquo; : Number,
</span><span class='line'>  &ldquo;_id&rdquo;:  String
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The problem was that last field: <code>_id</code>. If I included it in the schema then I would have the objectId available on the front end but would get an error trying to insert a new document: <code>[Error: document must have an _id before saving]</code>. If I removed <code>_id</code> from the schema I could save documents just fine but could not pass through the objectIds of already existing documents. I have learned that mongo is very flexible when it comes to assigning ids before insertion into the database.</p>

<p>Mongo objects created through a meteor application are given meteor-friendly objectIds, the uniqueness of which is monitored and maintained by a meteor wrapper class. The design decision to go with ids as strings seems to be <a href="https://groups.google.com/forum/#!topic/meteor-talk/f-ljBdZOwPk">motivated by meteor&rsquo;s latency compensation feature</a> &mdash; creating documents on the client-side and then later syncing them with the server requires that they are assigned objectIds before they ever reach mongo. Mongo will accept a manually entered id, trusting that there is an entity somewhere that is managing uniqueness.</p>

<p>Here was my problem: the documents created by meteor had String ids assigned by meteor. If I included <code>_id</code> in my schema, mongo would assume that I was managing id assignment manually, and wouldn&rsquo;t save the object until I did. If I did not include <code>_id</code> in my schema, mongo would assume it was responsible, and would assign a unique id accordingly.</p>

<p>To make the documents created by meteor play nice with the new stack, I had to update each document&rsquo;s <code>_id</code> with one created by mongo. Unfortunately, mongo won&rsquo;t allow modification of <code>_id</code> directly, so the only choice was to recreate and insert each entry, then delete the original:</p>

<ol>
<li>Retrieve a document: <code>doc = db.posts.findOne()</code></li>
<li>Save the title: <code>title = doc.title</code></li>
<li>Save the document&rsquo;s string id: <code>id = doc._id</code></li>
<li>Reassign the document id: <code>doc._id = ObjectId()</code></li>
<li>Save the updated document: <code>db.posts.insert(doc)</code></li>
<li>Remove the original document: <code>db.posts.remove({_id: id})</code></li>
<li>Verify that the post exists with the new id: <code>db.posts.findOne({"title": title})</code></li>
</ol>


<p>
```</p>

<blockquote><p>doc = db.posts.findOne()
{
  &ldquo;title&rdquo; : &ldquo;La Cage aux Folles&rdquo;,
  &ldquo;company&rdquo; : &ldquo;Pixie Dust Productions&rdquo;,
  &ldquo;author&rdquo; : &ldquo;Harvey Fierstein&rdquo;,
  &ldquo;music&rdquo; : &ldquo;Jerry Herman&rdquo;,
  &ldquo;showDate&rdquo; : ISODate(&ldquo;2014-09-21T07:00:00Z&rdquo;),
  &ldquo;dateSubmitted&rdquo; : 1411346259065,
  &ldquo;_id&rdquo; : &ldquo;EjzopWQa3mw5LB979&rdquo;
}</p>

<p>title = doc.title
La Cage aux Folles</p>

<p>id = doc._id
EjzopWQa3mw5LB979</p>

<p>doc._id = ObjectId()
ObjectId(&ldquo;5442af27cc37fe6f03648fdd&rdquo;)</p>

<p>db.posts.insert(doc)</p>

<p>db.posts.remove({_id: id})</p>

<p>db.posts.findOne({&ldquo;title&rdquo;: title})
{
  &ldquo;_id&rdquo; : ObjectId(&ldquo;5442af27cc37fe6f03648fdd&rdquo;),
  &ldquo;title&rdquo; : &ldquo;La Cage aux Folles&rdquo;,
  &ldquo;company&rdquo; : &ldquo;Pixie Dust Productions&rdquo;,
  &ldquo;author&rdquo; : &ldquo;Harvey Fierstein&rdquo;,
  &ldquo;music&rdquo; : &ldquo;Jerry Herman&rdquo;,
  &ldquo;showDate&rdquo; : ISODate(&ldquo;2014-09-21T07:00:00Z&rdquo;),
  &ldquo;dateSubmitted&rdquo; : 1411346259065,
  &ldquo;commentsCount&rdquo; : 1
}</p></blockquote>

<p>```
</p>

<p>Here is a handy script for changing the entire collection at once:</p>

<p><code>
db.posts.find().forEach(function(doc){ var doc = db.posts.findOne(); var title = doc.title; var id = doc._id; doc._id = ObjectId(); db.posts.insert(doc); db.posts.remove({_id: id}); })
</code></p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup Meteor? Yes We Can]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/backup-meteor-yes-we-can/"/>
    <updated>2014-08-24T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/backup-meteor-yes-we-can</id>
    <content type="html"><![CDATA[<p>Retrieving a data dump from your meteor production database and copying it to local development is a three-step, time sensitive process.</p>

<h3>1. Retrieve your production url</h3>

<p>Passing a <code>-url</code> flag to the <code>meteor mongo</code> command will return a long string of goodies:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Dude, where&rsquo;s my data? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ meteor mongo &mdash;url my_app.meteor.com&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>mongodb://client-12345678:9abcdef1-234-5678-9abc-def123456789@singularsensation-db-a3.meteor.io:12345/my_app_meteor_net</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This string contains all the information you require to access your production data:</p>

<ul>
<li>your client id (from // to :)</li>
<li>a server password (from : to @)</li>
<li>a server name and port number (from @ to /)</li>
<li>the datastore identification (from / to the end)</li>
</ul>


<p>
<code>bash
mongodb://&lt;CLIENT_ID&gt;:&lt;PASSWORD_HASH&gt;@&lt;SERVER_NAME:PORT&gt;/&lt;YOUR_DATA_STORE&gt;
</code>
</p>

<p>Retrieving your data is time-sensitive because the password hash will expire after 60 seconds.</p>

<h3>2. Retrieve your data using mongodump</h3>

<p>
```bash
$ mongodump -u CLIENT_ID -h SERVER_NAME:PORT -d YOUR_DATA_STORE -p PASSWORD_HASH</p>

<p>connected to: &lt;SERVER_NAME:PORT>
Sun Aug 24 10:50:32.342 DATABASE: YOUR_DATA_STORE  to   dump/YOUR_DATA_STORE
Sun Aug 24 10:50:32.989   YOUR_DATA_STORE.system.indexes to dump/YOUR_DATA_STORE/system.indexes.bson
Sun Aug 24 10:50:34.368      14 objects
Sun Aug 24 10:50:34.369   YOUR_DATA_STORE.system.users to dump/YOUR_DATA_STORE/system.users.bson
Sun Aug 24 10:50:34.559      2 objects
&hellip; and on and on
```
</p>

<p>Mongodb copies your data from production into a new folder called &ldquo;dump&rdquo; in your present working directory.</p>

<h3>3. Use mongorestore to copy the data from the dump into your local datastore</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongorestore &mdash;host 127.0.0.1 &mdash;port 3001 &mdash;db meteor &mdash;drop dump/YOUR_DATA_STORE/&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>connected to: 127.0.0.1:3001
</span><span class='line'>Sun Aug 24 11:36:54.693 dump/YOUR_DATA_STORE/users.bson
</span><span class='line'>Sun Aug 24 11:36:54.693   going into namespace [meteor.users]
</span><span class='line'>Sun Aug 24 11:36:54.693    dropping
</span><span class='line'>2 objects found
</span><span class='line'>Sun Aug 24 11:36:55.834   Creating index: { name: &ldquo;&lt;em>id&lt;/em>&rdquo;, key: { _id: 1 }, ns: &ldquo;meteor.users&rdquo; }
</span><span class='line'>Sun Aug 24 11:36:55.993   Creating index: { name: &ldquo;username_1&rdquo;, key: { username: 1 }, unique: true, ns: &ldquo;meteor.users&rdquo;, sparse: 1 }
</span><span class='line'>&hellip; and on and on</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Awesome.</p>

<p>Resources:
<a href="http://stackoverflow.com/a/12447710">stackoverflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery-UI and Meteor]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/jquery-ui-and-meteor/"/>
    <updated>2014-06-16T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/jquery-ui-and-meteor</id>
    <content type="html"><![CDATA[<p>I have been working on <a href="virtualplaybill.net">Virtual Playbill</a> for the last few weeks using meteor, bootstrap, and a number of other UI packages. I wanted to use a datepicker as a form field, but getting jQuery-ui working was not a straightforward package download as many other features are. There are currently 5 packages available for installation on <a href="https://atmospherejs.com/package/jquery-ui?q=jquery-ui">Atmosphere</a> (the meteor package manager), and I attempted several of them before finding the combination that worked<!--more-->:</p>

<h3>1. Install the jQuery-ui package from <a href="https://atmospherejs.com/package/jquery-ui">Atmosphere</a></h3>

<p><code>
mrt add jquery-ui
</code></p>

<h3>2. Download jQuery-ui</h3>

<p>For me, the meteorite package did not properly install the css or images I needed to get the datepicker working, so I downloaded <a href="http://jqueryui.com/">jquery-ui</a>, swiped the css file (un-minified), and added it to my <code>client/stylesheets</code> folder.</p>

<h3>3. Add jQuery-ui images</h3>

<p>The css styled the datepicker calendar perfectly, except for the previous month and next month buttons. jQuery-ui comes with a few standard icons, so I placed the jQuery-ui images folder in <code>/public</code>, since static files must be kept in a public folder for meteor to acknowledge them.</p>

<h3>4. Relocate the images</h3>

<p>The jQuery-ui css file tries to locate the images in its parent folder, but as I mentioned, static assets = public folder. The advantage of the public folder is that all assets can be referenced with a leading slash: <code>/images</code>. I scanned the un-minified version of the css and changed the image url locations from <code>images/...</code> to <code>/images/...</code></p>

<p>Voila! A beautiful, functional datepicker!</p>

<p><img src="/images/post_datepicker.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helpers Calling Helpers]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/helpers-calling-helpers/"/>
    <updated>2014-06-03T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/helpers-calling-helpers</id>
    <content type="html"><![CDATA[<p>Whittling away at the Discover Meteor tutorial for creating a social news sharing site, I was implementing a Comments collection and related accoutrements (templates, helpers, forms, etc.) when I uncovered a need to call one helper method from another<!--more-->.</p>

<p>I was using this handy method to return the number of comments made on a particular post:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Helpful helpers </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">commentsCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Template helper magic sauce </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">submitted</span> <span class="nx">by</span> <span class="p">{{</span><span class="nx">postAuthor</span><span class="p">}},</span> <span class="kd">with</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;{{pathFor &#39;postPage&#39;}}&quot;</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">commentsCount</span><span class="p">}}</span> <span class="nx">comments</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which returned a very ordinary:</p>

<blockquote><p>submitted by meImAnAwesomeUser, with 1 comments</p></blockquote>

<p>1 <strong>comments</strong>?! That makes no sense.. I didn&rsquo;t minor in English so I could let that travesty fly. I made a new helper method:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>This WORKS! </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">commentsCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">commentsNote</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">()</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="s2">&quot;comment&quot;</span> <span class="o">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>UGH! What is that on line 6? Possibly the ugliest ternary statement I have written today (probably). Is that code duplication I smell? Won&rsquo;t reusing <code>commentsCount</code> remove the redundancy?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Starting to DRY the meteor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">commentsCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">commentsNote</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">commentsCount</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="s2">&quot;comment&quot;</span> <span class="o">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Only.. that doesn&rsquo;t work:</p>

<pre><code>Exception from Deps recompute function: ReferenceError: commentsCount is not defined
at Object.Template.postPageItem.helpers.commentsNote (http://localhost:3000/client/views/posts/post_page_item.js?160ec9a926881c795377a47c15affc4f553c4d88:9:12)
</code></pre>

<p>But it is RIGHT ABOVE! I can see it! It is in the same file! I tried all permutations of <code>commentsCount()</code>, <code>this.commentsCount</code>, <code>self.commentsCount</code>, <code>this.self.commentsCount()</code>, and they all threw either similar errors or <code>undefined</code>. Calling the prototype method directly turns out to work just fine:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>THIS is not THAT and also doesn&rsquo;t work </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">commentsCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">commentsNote</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">commentsCount</span><span class="p">()</span>
</span><span class='line'><span class="k">return</span> <span class="nx">count</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="s2">&quot;comment&quot;</span> <span class="o">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Except that when <code>commentsCount</code> is called on line 6, <code>this</code> is no longer the lovely Post item provided by the template. No, <code>this</code> becomes the context of the <code>commentsNote</code> function, and therefore calling <code>this._id</code> will return <code>undefined</code>. The closure issue can be worked around with a little argument passing:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Is DRY so much better? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">commentsCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">count_id</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">id</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">?</span> <span class="nx">id</span> <span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="nx">count_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">commentsNote</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">commentsCount</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="nx">count</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="s2">&quot;comment&quot;</span> <span class="o">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Wow. Passing in the id works, but now I have to check the context to determine the appropriate id. That is the most unreadable-but-reused code I have written today (probably), and I learned some valuable lessons on this frantic search for DRY:</p>

<ul>
<li><code>self</code>, whether called from a helper or the console, will always be <code>window</code></li>
<li><code>this</code> called from a Template helper refers to the item of the collection that is passed in to the template</li>
<li>because helper methods are closures, <code>this</code> in the calling method is different from <code>this</code> in the called method</li>
<li>don&rsquo;t dry out your code to the point of unreadability</li>
</ul>


<p>In the end, cleaning up the ugly ternary makes the code reuse more reasonable.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>This is just fine </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">commentsCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">commentsNote</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="k">return</span> <span class="nx">count</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="s2">&quot;comment&quot;</span> <span class="o">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flash Your Local Collection]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/flash-your-local-collection/"/>
    <updated>2014-05-26T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/flash-your-local-collection</id>
    <content type="html"><![CDATA[<p>Rails allows you to pass messages to the user between actions (&ldquo;This <a href="http://api.rubyonrails.org/classes/ActionDispatch/Flash.html">ActionDispatch::Flash</a> will self-destruct&rdquo;), and because Rails, all the message generation happens server side:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>flashy_controller.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">You</span> <span class="n">dropped</span> <span class="n">your</span> <span class="n">packet</span><span class="o">.</span><span class="n">&amp;rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Meteor is mostly a client-side application framework, and you can implement a similar message system, which will never touch the server, by defining a collection that is local to the browser.<!--more--></p>

<h3>1. Create a local collection</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/client/errors.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Errors</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Meteor</span><span class="p">.</span><span class="nx">Collection</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Passing <code>null</code> into the Collection declaration tells Meteor that the collection should not be extended to the server &mdash; it creates an &ldquo;unmanaged (unsynchronized) local collection&rdquo; (<a href="http://docs.meteor.com/#meteor_collection">docs</a>)</p>

<h3>2. Throw an error whenever you need to</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/missionCritical.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>if(error){
</span><span class='line'>  Errors.insert({message: error.reason});
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>3. Create a template for displaying the error</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/client/errors.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">template</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;errors&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;errors&quot;</span><span class="o">&gt;&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{{</span><span class="err">#</span><span class="nx">each</span> <span class="nx">errors</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">{{</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">error</span><span class="p">}}</span>
</span><span class='line'><span class="p">{{</span><span class="err">/each}}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/template&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&lt;</span><span class="nx">template</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;error&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;alert alert-error&quot;</span><span class="o">&gt;&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">button</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;close&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">dismiss</span><span class="o">=</span><span class="s2">&quot;alert&quot;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nx">times</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">/button&amp;gt;</span>
</span><span class='line'><span class="p">{{</span><span class="nx">message</span><span class="p">}}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/template&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>4. Create a helper method for serving the errors to the template</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/client/errors.js continued again </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span>
</span><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">errors</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">Errors</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Every template that contains the handlebars <code> {{&gt; errors}} </code> will now display whatever errors have been saved to the session collection.</p>

<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="https://www.discovermeteor.com/">discovermeteor.com</a>
<a href="http://docs.meteor.com">Meteor docs</a></p>
]]></content>
  </entry>
  
</feed>
