<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Meteor | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/meteor/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-01-20T07:42:26-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meteor-managed Ids Won't Play Nicely With Others]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/make-meteor-minimongo-ids-play-nice/"/>
    <updated>2014-10-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/make-meteor-minimongo-ids-play-nice</id>
    <content type="html"><![CDATA[<p>I am working with a data dump from a meteor project, and while retrieving and displaying the existing collection was no problem at all, I was stuck on saving new documents to mongo.</p>

<p>My schema was pretty straightforward and taken directly from an existing document:</p>

<p>{% codeblock %}
var postSchema = mongoose.Schema({
  &ldquo;title&rdquo; : String,
  &ldquo;company&rdquo; : String,
  &ldquo;author&rdquo; : String,
  &ldquo;music&rdquo; : String,
  &ldquo;choreographer&rdquo; : String,
  &ldquo;showDate&rdquo; : String,
  &ldquo;image&rdquo;: String,
  &ldquo;userId&rdquo; : String,
  &ldquo;postAuthor&rdquo; : String,
  &ldquo;submitted&rdquo; : Number,
  &ldquo;commentsCount&rdquo; : Number,
  &ldquo;_id&rdquo;:  String
});
{% endcodeblock %}</p>

<p>The problem was that last field: <code>_id</code>. If I included it in the schema then I would have the objectId available on the front end but would get an error trying to insert a new document: <code>[Error: document must have an _id before saving]</code>. If I removed <code>_id</code> from the schema I could save documents just fine but could not pass through the objectIds of already existing documents. I have learned that mongo is very flexible when it comes to assigning ids before insertion into the database.</p>

<p>Mongo objects created through a meteor application are given meteor-friendly objectIds, the uniqueness of which is monitored and maintained by a meteor wrapper class. The design decision to go with ids as strings seems to be <a href="https://groups.google.com/forum/#!topic/meteor-talk/f-ljBdZOwPk">motivated by meteor&rsquo;s latency compensation feature</a> &mdash; creating documents on the client-side and then later syncing them with the server requires that they are assigned objectIds before they ever reach mongo. Mongo will accept a manually entered id, trusting that there is an entity somewhere that is managing uniqueness.</p>

<p>Here was my problem: the documents created by meteor had String ids assigned by meteor. If I included <code>_id</code> in my schema, mongo would assume that I was managing id assignment manually, and wouldn&rsquo;t save the object until I did. If I did not include <code>_id</code> in my schema, mongo would assume it was responsible, and would assign a unique id accordingly.</p>

<p>To make the documents created by meteor play nice with the new stack, I had to update each document&rsquo;s <code>_id</code> with one created by mongo. Unfortunately, mongo won&rsquo;t allow modification of <code>_id</code> directly, so the only choice was to recreate and insert each entry, then delete the original:</p>

<ol>
<li>Retrieve a document: <code>doc = db.posts.findOne()</code></li>
<li>Save the title: <code>title = doc.title</code></li>
<li>Save the document&rsquo;s string id: <code>id = doc._id</code></li>
<li>Reassign the document id: <code>doc._id = ObjectId()</code></li>
<li>Save the updated document: <code>db.posts.insert(doc)</code></li>
<li>Remove the original document: <code>db.posts.remove({_id: id})</code></li>
<li>Verify that the post exists with the new id: <code>db.posts.findOne({"title": title})</code></li>
</ol>


<p>{% raw %}
```</p>

<blockquote><p>doc = db.posts.findOne()
{
  &ldquo;title&rdquo; : &ldquo;La Cage aux Folles&rdquo;,
  &ldquo;company&rdquo; : &ldquo;Pixie Dust Productions&rdquo;,
  &ldquo;author&rdquo; : &ldquo;Harvey Fierstein&rdquo;,
  &ldquo;music&rdquo; : &ldquo;Jerry Herman&rdquo;,
  &ldquo;showDate&rdquo; : ISODate(&ldquo;2014-09-21T07:00:00Z&rdquo;),
  &ldquo;dateSubmitted&rdquo; : 1411346259065,
  &ldquo;_id&rdquo; : &ldquo;EjzopWQa3mw5LB979&rdquo;
}</p>

<p>title = doc.title
La Cage aux Folles</p>

<p>id = doc._id
EjzopWQa3mw5LB979</p>

<p>doc._id = ObjectId()
ObjectId(&ldquo;5442af27cc37fe6f03648fdd&rdquo;)</p>

<p>db.posts.insert(doc)</p>

<p>db.posts.remove({_id: id})</p>

<p>db.posts.findOne({&ldquo;title&rdquo;: title})
{
  &ldquo;_id&rdquo; : ObjectId(&ldquo;5442af27cc37fe6f03648fdd&rdquo;),
  &ldquo;title&rdquo; : &ldquo;La Cage aux Folles&rdquo;,
  &ldquo;company&rdquo; : &ldquo;Pixie Dust Productions&rdquo;,
  &ldquo;author&rdquo; : &ldquo;Harvey Fierstein&rdquo;,
  &ldquo;music&rdquo; : &ldquo;Jerry Herman&rdquo;,
  &ldquo;showDate&rdquo; : ISODate(&ldquo;2014-09-21T07:00:00Z&rdquo;),
  &ldquo;dateSubmitted&rdquo; : 1411346259065,
  &ldquo;commentsCount&rdquo; : 1
}</p></blockquote>

<p>```
{% endraw %}</p>

<p>Here is a handy script for changing the entire collection at once:</p>

<p><code>
db.posts.find().forEach(function(doc){ var doc = db.posts.findOne(); var title = doc.title; var id = doc._id; doc._id = ObjectId(); db.posts.insert(doc); db.posts.remove({_id: id}); })
</code></p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup Meteor? Yes We Can]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/backup-meteor-yes-we-can/"/>
    <updated>2014-08-24T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/backup-meteor-yes-we-can</id>
    <content type="html"><![CDATA[<p>Retrieving a data dump from your meteor production database and copying it to local development is a three-step, time sensitive process.</p>

<h3>1. Retrieve your production url</h3>

<p>Passing a <code>-url</code> flag to the <code>meteor mongo</code> command will return a long string of goodies:</p>

<p>{% codeblock Dude, where&rsquo;s my data? %}
$ meteor mongo &mdash;url my_app.meteor.com</p>

<p>mongodb://client-12345678:9abcdef1-234-5678-9abc-def123456789@singularsensation-db-a3.meteor.io:12345/my_app_meteor_net
{% endcodeblock %}</p>

<p>This string contains all the information you require to access your production data:</p>

<ul>
<li>your client id (from // to :)</li>
<li>a server password (from : to @)</li>
<li>a server name and port number (from @ to /)</li>
<li>the datastore identification (from / to the end)</li>
</ul>


<p>{% raw %}
<code>bash
mongodb://&lt;CLIENT_ID&gt;:&lt;PASSWORD_HASH&gt;@&lt;SERVER_NAME:PORT&gt;/&lt;YOUR_DATA_STORE&gt;
</code>
{% endraw %}</p>

<p>Retrieving your data is time-sensitive because the password hash will expire after 60 seconds.</p>

<h3>2. Retrieve your data using mongodump</h3>

<p>{% raw %}
```bash
$ mongodump -u CLIENT_ID -h SERVER_NAME:PORT -d YOUR_DATA_STORE -p PASSWORD_HASH</p>

<p>connected to: &lt;SERVER_NAME:PORT>
Sun Aug 24 10:50:32.342 DATABASE: YOUR_DATA_STORE  to   dump/YOUR_DATA_STORE
Sun Aug 24 10:50:32.989   YOUR_DATA_STORE.system.indexes to dump/YOUR_DATA_STORE/system.indexes.bson
Sun Aug 24 10:50:34.368      14 objects
Sun Aug 24 10:50:34.369   YOUR_DATA_STORE.system.users to dump/YOUR_DATA_STORE/system.users.bson
Sun Aug 24 10:50:34.559      2 objects
&hellip; and on and on
```
{% endraw %}</p>

<p>Mongodb copies your data from production into a new folder called &ldquo;dump&rdquo; in your present working directory.</p>

<h3>3. Use mongorestore to copy the data from the dump into your local datastore</h3>

<p>{% codeblock %}
$ mongorestore &mdash;host 127.0.0.1 &mdash;port 3001 &mdash;db meteor &mdash;drop dump/YOUR_DATA_STORE/</p>

<p>connected to: 127.0.0.1:3001
Sun Aug 24 11:36:54.693 dump/YOUR_DATA_STORE/users.bson
Sun Aug 24 11:36:54.693   going into namespace [meteor.users]
Sun Aug 24 11:36:54.693    dropping
2 objects found
Sun Aug 24 11:36:55.834   Creating index: { name: &ldquo;<em>id</em>&rdquo;, key: { _id: 1 }, ns: &ldquo;meteor.users&rdquo; }
Sun Aug 24 11:36:55.993   Creating index: { name: &ldquo;username_1&rdquo;, key: { username: 1 }, unique: true, ns: &ldquo;meteor.users&rdquo;, sparse: 1 }
&hellip; and on and on
{% endcodeblock %}</p>

<p>Awesome.</p>

<p>Resources:
<a href="http://stackoverflow.com/a/12447710">stackoverflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery-UI and Meteor]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/jquery-ui-and-meteor/"/>
    <updated>2014-06-16T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/jquery-ui-and-meteor</id>
    <content type="html"><![CDATA[<p>I have been working on <a href="virtualplaybill.net">Virtual Playbill</a> for the last few weeks using meteor, bootstrap, and a number of other UI packages. I wanted to use a datepicker as a form field, but getting jQuery-ui working was not a straightforward package download as many other features are. There are currently 5 packages available for installation on <a href="https://atmospherejs.com/package/jquery-ui?q=jquery-ui">Atmosphere</a> (the meteor package manager), and I attempted several of them before finding the combination that worked<!--more-->:</p>

<h3>1. Install the jQuery-ui package from <a href="https://atmospherejs.com/package/jquery-ui">Atmosphere</a></h3>

<p><code>
mrt add jquery-ui
</code></p>

<h3>2. Download jQuery-ui</h3>

<p>For me, the meteorite package did not properly install the css or images I needed to get the datepicker working, so I downloaded <a href="http://jqueryui.com/">jquery-ui</a>, swiped the css file (un-minified), and added it to my <code>client/stylesheets</code> folder.</p>

<h3>3. Add jQuery-ui images</h3>

<p>The css styled the datepicker calendar perfectly, except for the previous month and next month buttons. jQuery-ui comes with a few standard icons, so I placed the jQuery-ui images folder in <code>/public</code>, since static files must be kept in a public folder for meteor to acknowledge them.</p>

<h3>4. Relocate the images</h3>

<p>The jQuery-ui css file tries to locate the images in its parent folder, but as I mentioned, static assets = public folder. The advantage of the public folder is that all assets can be referenced with a leading slash: <code>/images</code>. I scanned the un-minified version of the css and changed the image url locations from <code>images/...</code> to <code>/images/...</code></p>

<p>Voila! A beautiful, functional datepicker!</p>

<p><img src="{{ root_url }}/images/post_datepicker.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helpers Calling Helpers]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/helpers-calling-helpers/"/>
    <updated>2014-06-03T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/helpers-calling-helpers</id>
    <content type="html"><![CDATA[<p>Whittling away at the Discover Meteor tutorial for creating a social news sharing site, I was implementing a Comments collection and related accoutrements (templates, helpers, forms, etc.) when I uncovered a need to call one helper method from another<!--more-->.</p>

<p>I was using this handy method to return the number of comments made on a particular post:
{% codeblock Helpful helpers lang:js %}
Template.postPageItem.helpers({
  commentsCount: function() {</p>

<pre><code>return Comments.find({postId: this._id}).count();
</code></pre>

<p>  }
});
{% endcodeblock %}</p>

<p>{% codeblock Template helper magic sauce lang:js %}
{% raw %}
submitted by {{postAuthor}}, with
<a href="{{pathFor 'postPage'}}">{{commentsCount}} comments</a>
{% endraw %}
{% endcodeblock %}</p>

<p>Which returned a very ordinary:</p>

<blockquote><p>submitted by meImAnAwesomeUser, with 1 comments</p></blockquote>

<p>1 <strong>comments</strong>?! That makes no sense.. I didn&rsquo;t minor in English so I could let that travesty fly. I made a new helper method:</p>

<p>{% codeblock This WORKS! lang:js %}
Template.postPageItem.helpers({
  commentsCount: function() {</p>

<pre><code>return Comments.find({postId: this._id}).count();
</code></pre>

<p>  },
  commentsNote: function() {</p>

<pre><code>return Comments.find({postId: this._id}).count() === 1 ? "comment" : "comments";
</code></pre>

<p>  }
});
{% endcodeblock %}</p>

<p>UGH! What is that on line 6? Possibly the ugliest ternary statement I have written today (probably). Is that code duplication I smell? Won&rsquo;t reusing <code>commentsCount</code> remove the redundancy?</p>

<p>{% codeblock Starting to DRY the meteor lang:js %}
Template.postPageItem.helpers({
  commentsCount: function() {</p>

<pre><code>return Comments.find({postId: this._id}).count();
</code></pre>

<p>  },
  commentsNote: function() {</p>

<pre><code>return commentsCount === 1 ? "comment" : "comments";
</code></pre>

<p>  }
});
{% endcodeblock %}</p>

<p>Only.. that doesn&rsquo;t work:</p>

<pre><code>Exception from Deps recompute function: ReferenceError: commentsCount is not defined
at Object.Template.postPageItem.helpers.commentsNote (http://localhost:3000/client/views/posts/post_page_item.js?160ec9a926881c795377a47c15affc4f553c4d88:9:12)
</code></pre>

<p>But it is RIGHT ABOVE! I can see it! It is in the same file! I tried all permutations of <code>commentsCount()</code>, <code>this.commentsCount</code>, <code>self.commentsCount</code>, <code>this.self.commentsCount()</code>, and they all threw either similar errors or <code>undefined</code>. Calling the prototype method directly turns out to work just fine:</p>

<p>{% codeblock THIS is not THAT and also doesn&rsquo;t work lang:js %}
Template.postPageItem.helpers({
  commentsCount: function() {</p>

<pre><code>return Comments.find({postId: this._id}).count();
</code></pre>

<p>  },
  commentsNote: function() {</p>

<pre><code>var count = Template.postPageItem.commentsCount()
return count === 1 ? "comment" : "comments";
</code></pre>

<p>  }
});
{% endcodeblock %}</p>

<p>Except that when <code>commentsCount</code> is called on line 6, <code>this</code> is no longer the lovely Post item provided by the template. No, <code>this</code> becomes the context of the <code>commentsNote</code> function, and therefore calling <code>this._id</code> will return <code>undefined</code>. The closure issue can be worked around with a little argument passing:</p>

<p>{% codeblock Is DRY so much better? lang:js %}
Template.postPageItem.helpers({
  commentsCount: function(id) {</p>

<pre><code>var count_id = typeof id !== 'undefined' ? id : this._id;
return Comments.find({postId: count_id}).count();
</code></pre>

<p>  },
  commentsNote: function() {</p>

<pre><code>var count = Template.postPageItem.commentsCount(this._id)
return count === 1 ? "comment" : "comments";
</code></pre>

<p>  }
});
{% endcodeblock %}</p>

<p>Wow. Passing in the id works, but now I have to check the context to determine the appropriate id. That is the most unreadable-but-reused code I have written today (probably), and I learned some valuable lessons on this frantic search for DRY:</p>

<ul>
<li><code>self</code>, whether called from a helper or the console, will always be <code>window</code></li>
<li><code>this</code> called from a Template helper refers to the item of the collection that is passed in to the template</li>
<li>because helper methods are closures, <code>this</code> in the calling method is different from <code>this</code> in the called method</li>
<li>don&rsquo;t dry out your code to the point of unreadability</li>
</ul>


<p>In the end, cleaning up the ugly ternary makes the code reuse more reasonable.</p>

<p>{% codeblock This is just fine lang:js %}
Template.postPageItem.helpers({
  commentsCount: function() {</p>

<pre><code>return Comments.find({postId: this._id}).count();
</code></pre>

<p>  },
  commentsNote: function() {</p>

<pre><code>var count = Comments.find({postId: this._id}).count();
return count === 1 ? "comment" : "comments";
</code></pre>

<p>  }
});
{% endcodeblock %}</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flash Your Local Collection]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/flash-your-local-collection/"/>
    <updated>2014-05-26T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/flash-your-local-collection</id>
    <content type="html"><![CDATA[<p>Rails allows you to pass messages to the user between actions (&ldquo;This <a href="http://api.rubyonrails.org/classes/ActionDispatch/Flash.html">ActionDispatch::Flash</a> will self-destruct&rdquo;), and because Rails, all the message generation happens server side:
{% codeblock flashy_controller.rb lang:ruby %}
def show
  flash[:notice] = &ldquo;You dropped your packet.&rdquo;
end
{% endcodeblock %}</p>

<p>Meteor is mostly a client-side application framework, and you can implement a similar message system, which will never touch the server, by defining a collection that is local to the browser.<!--more--></p>

<h3>1. Create a local collection</h3>

<p>{% codeblock /client/errors.js lang:js %}
Errors = new Meteor.Collection(null);
{% endcodeblock %}</p>

<p>Passing <code>null</code> into the Collection declaration tells Meteor that the collection should not be extended to the server &mdash; it creates an &ldquo;unmanaged (unsynchronized) local collection&rdquo; (<a href="http://docs.meteor.com/#meteor_collection">docs</a>)</p>

<h3>2. Throw an error whenever you need to</h3>

<p>{% codeblock /missionCritical.js lang:html %}
if(error){
  Errors.insert({message: error.reason});
}
{% endcodeblock %}</p>

<h3>3. Create a template for displaying the error</h3>

<p>{% codeblock /client/errors.html lang:js %}
{% raw %}
<template name="errors">
  <div class="errors"></p>

<pre><code>{{#each errors}}
  {{&gt; error}}
{{/each}}
</code></pre>

<p>  </div>
</template></p>

<p><template name="error">
  <div class="alert alert-error"></p>

<pre><code>&lt;button type="button" class="close" data-dismiss="alert"&gt;&amp;times;&lt;/button&gt;
{{message}}
</code></pre>

<p>  </div>
</template>
{% endraw %}
{% endcodeblock %}</p>

<h3>4. Create a helper method for serving the errors to the template</h3>

<p>{% codeblock /client/errors.js continued again lang:js %}
&hellip;
Template.errors.helpers({
  errors: function() {</p>

<pre><code>return Errors.find();
</code></pre>

<p>  }
{% endcodeblock %}</p>

<p>Every template that contains the handlebars <code>{% raw %} {{&gt; errors}} {% endraw %}</code> will now display whatever errors have been saved to the session collection.</p>

<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="https://www.discovermeteor.com/">discovermeteor.com</a>
<a href="http://docs.meteor.com">Meteor docs</a></p>
]]></content>
  </entry>
  
</feed>
