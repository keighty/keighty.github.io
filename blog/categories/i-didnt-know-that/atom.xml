<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: I didn't know that | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/i-didnt-know-that/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2014-02-15T18:22:02-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[global abatement]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/global-abatement/"/>
    <updated>2014-02-07T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/global-abatement</id>
    <content type="html"><![CDATA[<h3>or, What the heck is global abatement?</h3>

<p><strong>tldr</strong>: Global variables are <a href="http://en.wikipedia.org/wiki/Code_smell">code smells</a>. Declaring variables inside an application-level function serves to namespace the variables and minimizes the use of global variables. <!--more--></p>

<p>Javascript has function-level scoping, which means that variables declared anywhere within a function are scoped to that function. Writing a javascript without an enclosing function leaves your declared variables vulnerable to name collisions, or reassignment by other javascripts.</p>

<p>A <strong>global abatement</strong> is a strategy used to reduce the vulnerability of your javascript variables by removing them from the global scope. Application namespacing is one such strategy:</p>

<p>{% codeblock lang:javascript BAD GLOBAL%}
person = {
  first_name: &lsquo;Hello&rsquo;,
  last_name: &lsquo;Kitty&rsquo;
};
{% endcodeblock %}</p>

<p>{% codeblock lang:javascript GOOD LOCAL%}
var MYAPP = {};
MYAPP.person = {
  first_name: &lsquo;Hello&rsquo;,
  last_name: &lsquo;Kitty&rsquo;
};
{% endcodeblock %}</p>

<p>Declaring an application-level function ensures that the correct <code>person</code> is called when needed. It improves readability by essentially flagging the scope of the variable and reducing ambiguity.</p>

<p><a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=bridgeforpoke-20">JavaScript: The Good Parts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[a number is a double is a float]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/a-number-is-a-double-is-a-float/"/>
    <updated>2014-02-02T19:56:17-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/a-number-is-a-double-is-a-float</id>
    <content type="html"><![CDATA[<p>JavaScript has a single number type &mdash; a 64-bit floating point number. Since there is no separate integer type, 1 and 1.0 are the same value.</p>

<!--more-->


<p>One of the consequences is that the <code>/</code> operator may return a floating point number even if both operands are integers. Goodbye casting!</p>

<p><a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=bridgeforpoke-20">JavaScript: The Good Parts</a></p>

<p>Awesome.</p>
]]></content>
  </entry>
  
</feed>
