<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: I Didn't Know That | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/i-didnt-know-that/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-01-20T07:40:43-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multiple Remotes]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/multiple-remotes/"/>
    <updated>2014-03-19T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/multiple-remotes</id>
    <content type="html"><![CDATA[<p>Somehow I had worked out in my head that there could be only one remote. Origin. Turns out you can set and push to a (presumably) infinite number of remote repositories <!--more-->:</p>

<p>{% codeblock Checkout your git config %}
$ git config &mdash;list
push.default=nothing
alias.hist=log &mdash;pretty=format:&ldquo;%h %ad | %s%d [%an]&rdquo; &mdash;graph &mdash;date=short
user.name=Katie Leonard
…
remote.origin.url=git@github.com:keighty/thorfiles.git
remote.origin.fetch=+refs/heads/<em>:refs/remotes/origin/</em>
branch.master.remote=origin
branch.master.merge=refs/heads/master
{% endcodeblock %}</p>

<p>(On a side note, I am not sure I remember putting <code>alias.hist</code> in my git config, but I find it to be wickedly useful.)</p>

<p>Setting a new remote is as easy as:</p>

<p>{% codeblock 1 2 3 a b c %}
$ git remote add new_destination git@github.com:otheruser/thorfiles.git
{% endcodeblock %}</p>

<p>Standing back to admire the results:
{% codeblock Simple, but does it work? %}
$ git config &mdash;list
push.default=nothing
alias.hist=log &mdash;pretty=format:&ldquo;%h %ad | %s%d [%an]&rdquo; &mdash;graph &mdash;date=short
user.name=Katie Leonard
…
remote.origin.url=git@github.com:keighty/thorfiles.git
remote.origin.fetch=+refs/heads/<em>:refs/remotes/origin/</em>
branch.master.remote=origin
branch.master.merge=refs/heads/master
remote.new_destination.url=git@github.com:otheruser/thorfiles.git
remote.new_destination.fetch=+refs/heads/<em>:refs/remotes/new_destination/</em>
{% endcodeblock %}</p>

<p>Fast-forward through some excellent and brilliant feature work on <code>my_branch</code>, and I naturally want to save it for posterity:</p>

<p>{% codeblock Chizeled in metal on GitHub servers %}
$ git push origin my_branch
Counting objects: 611, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (263/263), done.
Writing objects: 100% (375/375), 63.40 KiB | 0 bytes/s, done.
Total 375 (delta 280), reused 189 (delta 105)
To git@github.com:keighty/thorfiles.git
 * [new branch]      my_branch &ndash;> my_branch
{% endcodeblock %}</p>

<p>I can also share it with my friend&rsquo;s repo, presuming I have write access, and knowing full well he will want to use my new feature:</p>

<p>{% codeblock Update your friends! %}
$ git push new_destination my_branch
Counting objects: 611, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (263/263), done.
Writing objects: 100% (375/375), 63.40 KiB | 0 bytes/s, done.
Total 375 (delta 280), reused 189 (delta 105)
To git@github.com:otheruser/thorfiles.git
 * [new branch]      my_branch &ndash;> my_branch
{% endcodeblock %}</p>

<p>Git is so awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Dates]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/javascript-dates/"/>
    <updated>2014-03-01T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/javascript-dates</id>
    <content type="html"><![CDATA[<p>Javascript Date objects have zero indexed months but not dates.</p>

<p>```</p>

<blockquote><p>(new Date(2014, 0, 1)).strftime(&ldquo;%b %d, %Y&rdquo;)
&ldquo;Jan 1, 2014&rdquo;
(new Date(2013, 11, 31)).strftime(&ldquo;%b %d, %Y&rdquo;)
&ldquo;Dec 31, 2013&rdquo;
(new Date(2014, 0, 0)).strftime(&ldquo;%b %d, %Y&rdquo;)
&ldquo;Dec 31, 2013&rdquo;
```</p></blockquote>

<p>Wat?</p>

<!--more-->


<h3>Resources</h3>

<p><a href="http://tech.bluesmoon.info/2008/04/strftime-in-javascript.html">Javascript strftime</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String Conversion in Javascript]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/to-i-in-javascript/"/>
    <updated>2014-02-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/to-i-in-javascript</id>
    <content type="html"><![CDATA[<p>Almost every day, javascript blows my mind. Today I discovered that you can convert a string to a number simply by prepending a +:</p>

<p>```</p>

<blockquote><p>typeof(+&ldquo;this is a string&rdquo;)
&ldquo;number&rdquo;
typeof(+&ldquo;100&rdquo;)
&ldquo;number&rdquo;
+&ldquo;100&rdquo; + 50
150
```</p></blockquote>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implied Functions Applied]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/implied-functions-applied/"/>
    <updated>2014-02-26T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/implied-functions-applied</id>
    <content type="html"><![CDATA[<p>When binding a primitive datum to a node in a D3 visualization, the callback function can be implicitly called on the datum without the typical verbosity<!--more-->:</p>

<p>```javascript
svg.selectAll(&ldquo;circle&rdquo;)</p>

<pre><code>.data([32, 57, 112, 293])
</code></pre>

<p>  .enter().append(&ldquo;circle&rdquo;)</p>

<pre><code>.attr("cy", 90)
.attr("cx", String)
.attr("r", Math.sqrt);
</code></pre>

<p>```</p>

<p>In line 5, String() is performed on the data element, as is Math.sqrt in line 6, with the same result as:</p>

<p>```
svg.selectAll(&ldquo;circle&rdquo;)</p>

<pre><code>.data([32, 57, 112, 293])
</code></pre>

<p>  .enter().append(&ldquo;circle&rdquo;)</p>

<pre><code>.attr("cy", 90)
.attr("cx", function(d) {
  return String(d);
})
.attr("r", function(d) {
  return Math.sqrt(d);
});
</code></pre>

<p>```</p>

<p>&hellip; but better.</p>

<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="http://mbostock.github.io/d3/tutorial/circle.html">Three Little Circles D3 Tutorial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Abatement]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/global-abatement/"/>
    <updated>2014-02-07T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/global-abatement</id>
    <content type="html"><![CDATA[<h3>or, What the heck is global abatement?</h3>

<p><strong>tldr</strong>: Global variables are <a href="http://en.wikipedia.org/wiki/Code_smell">code smells</a>. Declaring variables inside an application-level function serves to namespace the variables and minimizes the use of global variables. <!--more--></p>

<p>Javascript has function-level scoping, which means that variables declared anywhere within a function are scoped to that function. Writing a javascript without an enclosing function leaves your declared variables vulnerable to name collisions, or reassignment by other javascripts.</p>

<p>A <strong>global abatement</strong> is a strategy used to reduce the vulnerability of your javascript variables by removing them from the global scope. Application namespacing is one such strategy:</p>

<p>{% codeblock lang:javascript BAD GLOBAL%}
person = {
  first_name: &lsquo;Hello&rsquo;,
  last_name: &lsquo;Kitty&rsquo;
};
{% endcodeblock %}</p>

<p>{% codeblock lang:javascript GOOD LOCAL%}
var MYAPP = {};
MYAPP.person = {
  first_name: &lsquo;Hello&rsquo;,
  last_name: &lsquo;Kitty&rsquo;
};
{% endcodeblock %}</p>

<p>Declaring an application-level function ensures that the correct <code>person</code> is called when needed. It improves readability by essentially flagging the scope of the variable and reducing ambiguity.</p>

<p><a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=bridgeforpoke-20">JavaScript: The Good Parts</a></p>
]]></content>
  </entry>
  
</feed>
