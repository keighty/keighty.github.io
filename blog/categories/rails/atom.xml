<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-01-21T20:43:16-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objects vs Data Structures]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/objects-vs-data-structures/"/>
    <updated>2015-01-18T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/objects-vs-data-structures</id>
    <content type="html"><![CDATA[<p>&ldquo;It is impossible to create an abstraction unknowingly or by accident,&rdquo; says Sandi Metz in <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330/ref=sr_1_1?ie=UTF8&amp;qid=1421723392&amp;sr=8-1&amp;keywords=practical+object+oriented+design+in+ruby"><em>Practical Object Oriented Design in Ruby</em></a>. An abstraction is a common, stable quality, such that you would find in a java interface. An interface is an idea that cannot be made concrete, but contains behaviour <a href="http://en.wikipedia.org/wiki/Interface_%28Java%29">encoding similarities</a> which objects might share. Even the definition of abstraction is abstract, and it wasn&rsquo;t until I read Robert C. Martin&rsquo;s chapter on Objects and Data Structures in <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"><em>Clean Code</em></a> that I really started to understand them.</p>

<!--more-->


<h3>What is a data structure</h3>

<p>A data structure is a class that exposes its data to the public. It should have no meaningful behaviour, and can be characterized by a set of attributes along with getters and setters.</p>

<p>```ruby
class Point1
  attr_accessor :x, :y, :z
end</p>

<p>p = Point1.new
p.x = 1
p.y = 1
p.z = 1
p
```</p>

<p>In this example, a Point is defined as an object at some location on a coordinate grid of some kind. That sounds abstract enough: you can create a point, Surround your pullquote like this {" text to be quoted "} Adding an initializer that sets each variable, or a <code>to_s</code> method for getting a pretty output, would not make the Point1 class any more an abstraction of a position in space. To make an abstraction you can&rsquo;t just use getters and setters &mdash; you have to think about how you are representing the data.</p>

<h3>What is an object</h3>

<p>An object hides its data behind abstractions. A Point is not defined by its <code>[@x, @y, @z]</code>, but by its location in space. If space is a coordinate system, it could be 2- or 3-dimensional.</p>

<p>```
class Point2
  def initialize(x, y, z = nil)</p>

<pre><code>set_location(x, y, z)
</code></pre>

<p>  end</p>

<p>  def to_s</p>

<pre><code>"(#{[@x, @y, @z].compact.join(',')})"
</code></pre>

<p>  end
  alias_method :location, :to_s</p>

<p>  def set_location(x, y, z = nil)</p>

<pre><code>@x = x
@y = y
@z = z
location
</code></pre>

<p>  end
  private :set_location</p>

<p>  alias_method :move_point, :set_location
  public :move_point</p>

<p>end</p>

<p>p = Point2.new(1, 1)
p.move_point(2, 3)
p.move_point(2, 3, 7)
```</p>

<p>A point cannot exist separate from it&rsquo;s coordinates, and coordinates cannot exist or be altered without using the abstraction of moving in space.</p>

<blockquote><p>&ldquo;We do not want to expose the details of our data. Rather we want to express our data in abstract terms. This is not merely accomplished by using interfaces and/or getters and setters. Serious thought needs to be put into the best way to represent the data that an object contains.&rdquo;</p>

<p>&mdash; Martin</p></blockquote>

<p>This is why <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">fat models are an anti-pattern in Rails</a>. ActiveRecord makes an object out of a data structure, and adding behaviour beyond data validation makes the model a hybrid data object. <a href="http://railscasts.com/episodes/398-service-objects">Service Objects</a> are abstractions of model behaviour (pun intended).</p>

<p>Now I know what an abstraction is, and I understand that simply extracting methods into interfaces doesn&rsquo;t magically make an abstraction. As Metz says, &ldquo;good design naturally progresses toward small independent objects that rely on abstractions.&rdquo; An object is more than a data structure; it is an idea and it must be applied deliberately.</p>

<!-- resources
http://www.cgore.com/programming/ruby/public-aliases-of-private-methods.lisp
-->


<!-- resources
http://railscasts.com/episodes/398-service-objects
http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#dup vs #clone in Ruby and Rails]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/number-dup-vs-number-clone-in-ruby-and-rails/"/>
    <updated>2015-01-10T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/number-dup-vs-number-clone-in-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>I was recently fixing a failing test and discovered that Ruby and Rails implement <code>#clone</code> and <code>#dup</code> in confusing and occasionally opposite ways.</p>

<!--more-->


<h3>In Rails <code>#clone</code> is a less complete copy of an object than <code>#dup</code></h3>

<p>Rails versions have flip-flopped on how to implement <code>#clone</code> and <code>#dup</code>, and there is ambiguity in how Rails defines &ldquo;shallow&rdquo;. In Rails 4.0, <a href="https://github.com/rails/rails/blob/4-0-stable/activerecord/lib/active_record/core.rb#L217-L220"><code>#clone</code> is a shallow copy</a> of an ActiveRecord object. &ldquo;Shallow&rdquo; in this context means that the <code>clone</code> shares attributes with the <code>original</code>:</p>

<blockquote><p>Identical to Ruby&rsquo;s clone method.  This is a &ldquo;shallow&rdquo; copy.  Be warned that your attributes are not copied. That means that modifying attributes of the clone will modify the original, since they will both point to the same attributes hash. If you need a copy of your attributes hash, please use the #dup method.</p></blockquote>

<p>However, <a href="https://github.com/rails/rails/blob/4-0-stable/activerecord/lib/active_record/core.rb#L234-L240"><code>#dup</code> is also described as a shallow copy</a>. &ldquo;Shallow&rdquo; in this context means that while the dup does not share attributes with the original, it does share associations.</p>

<blockquote><p>Duped objects have no id assigned and are treated as new records. Note that this is a &ldquo;shallow&rdquo; copy as it copies the object&rsquo;s attributes only, not its associations. The extent of a &ldquo;deep&rdquo; copy is application specific and is therefore left to the application to implement according to its need.</p></blockquote>

<h4><code>clone</code> vs <code>dup</code> in Rails:</h4>

<p>```bash
pry> original = User.find(3)
  User Load (0.7ms)  SELECT  &ldquo;users&rdquo;.* FROM &ldquo;users&rdquo; WHERE &ldquo;users&rdquo;.&ldquo;id&rdquo; = ? LIMIT 1  [[&ldquo;id&rdquo;, 3]]
=> #<User id: 3, first_name: "katie", last_name: "leonard", email: nil, created_at: "2015-01-10 17:37:00", updated_at: "2015-01-10 17:37:00"></p>

<p>pry> clone_copy = original.clone
=> #<User id: 3, first_name: "katie", last_name: "leonard", email: nil, created_at: "2015-01-10 17:37:00", updated_at: "2015-01-10 17:37:00"></p>

<p>pry> dup_copy = original.dup
=> #<User id: nil, first_name: "katie", last_name: "leonard", email: nil, created_at: nil, updated_at: nil>
```</p>

<p>Note that the <code>clone_copy</code> is an exact copy of the original (same <code>user.id</code>) and the <code>dup_copy</code> is a new record (<code>user.id</code> = nil). Any changes made to the <code>clone_copy</code> will be changed in the <code>original</code>, but any changes to the <code>dup_copy</code> attributes will remain isolated.</p>

<h3>In Ruby <code>#clone</code> is a more complete copy of an object than <code>#dup</code></h3>

<p>With simple classes, <code>clone()</code> and <code>dup()</code> behave identically:</p>

<p>```bash
irb> class User
irb>   attr_accessor :first_name, :last_name, :email
irb>   def initialize(options={})
irb>     @first_name = options[:first_name]
irb>     @last_name  = options[:last_name]
irb>     @email      = options[:email]
irb>   end
irb> end
=> :initialize</p>

<p>irb> original = User.new(first_name: &ldquo;katie&rdquo;, last_name: &ldquo;leonard&rdquo;)
=> #&lt;User:0x007fd7e98e0aa8 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> cloned_copy = original.clone
=> #&lt;User:0x007fd7e98c87c8 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> dup_copy = original.dup
=> #&lt;User:0x007fd7e98b24a0 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> cloned_copy.first_name = &ldquo;foo&rdquo;
=> &ldquo;foo&rdquo;</p>

<p>irb> original.first_name
=> &ldquo;katie&rdquo;</p>

<p>irb> dup_copy.first_name
=> &ldquo;katie&rdquo;</p>

<p>irb> dup_copy.first_name = &ldquo;bar&rdquo;
=> &ldquo;bar&rdquo;</p>

<p>irb> original.first_name
=> &ldquo;katie&rdquo;
<code>``
</code>clone()<code>and</code>dup()` function the same way!</p>

<p><code>clone()</code> from the <a href="http://ruby-doc.org/core-2.1.5/Object.html#method-i-clone">Ruby docs</a>:</p>

<blockquote><p>Produces a shallow copy of obj â€” the instance variables of obj are copied, but not the objects they reference. Copies the frozen and tainted state of obj. See also the discussion under Object#dup.</p></blockquote>

<p><code>dup()</code> from the <a href="http://ruby-doc.org/core-2.1.5/Object.html#method-i-dup">Ruby docs</a> looks suspiciously like the docs for <code>clone()</code>:</p>

<blockquote><p>Produces a shallow copy of obj â€” the instance variables of obj are copied, but not the objects they reference. dup copies the tainted state of obj. This method may have class-specific behavior. If so, that behavior will be documented under the #initialize_copy method of the class.</p></blockquote>

<p>This deserves further clarification:</p>

<blockquote><p>In general, clone and dup may have different semantics in descendant classes. While clone is used to duplicate an object, including its internal state, dup typically uses the class of the descendant object to create the new instance. When using dup any modules that the object has been extended with will not be copied.</p></blockquote>

<p>To paraphrase, <code>#dup</code> will act like <code>#clone</code>, but without the original&rsquo;s singleton class (ergo a &ldquo;shallower&rdquo; copy).</p>

<p>```
irb> class User
irb> attr_accessor :first_name, :last_name, :email
irb>   def initialize(options={})
irb>     @first_name = options[:first_name]
irb>     @last_name  = options[:last_name]
irb>     @email      = options[:email]
irb>   end
irb> end
=> :initialize</p>

<p>irb> module Crunchy
irb>   def bacon
irb>     &ldquo;bacon&rdquo;
irb>   end
irb> end
=> :bacon</p>

<p>irb> a = User.new(first_name: &ldquo;katie&rdquo;, last_name: &ldquo;leonard&rdquo;)
=> #&lt;User:0x007fd7e8882490 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> a.extend(Crunchy)
=> #&lt;User:0x007fd7e8882490 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> a.bacon
=> &ldquo;bacon&rdquo;</p>

<p>irb> b = a.clone
=> #&lt;User:0x007fd7e8843060 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> b.bacon
=> &ldquo;bacon&rdquo;</p>

<p>irb> c = a.dup
=> #&lt;User:0x007fd7e98f05c0 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> c.bacon
NoMethodError: undefined method `bacon' for #&lt;User:0x007fd7e98f05c0></p>

<pre><code>    from (irb):101
    from /usr/local/var/rbenv/versions/2.1.5/bin/irb:11:in `&lt;main&gt;'
</code></pre>

<p>```</p>

<p>There are subtle differences between <code>#clone</code> and <code>#dup</code> in Ruby, and less subtle differences in Rails (depending on your version). Take care that the object you want is the object you get.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factoring in Nests]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/factoring-in-nests/"/>
    <updated>2013-10-29T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/factoring-in-nests</id>
    <content type="html"><![CDATA[<p>I am building an application that uses several nested attributes: Users have many Goals (Goals belong_to Users), and Goals have many Hours (Hours belong_to Goals).</p>

<p>Using <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a> to create a User is straightforward:</p>

<p><div>
  <pre><code class='ruby'>FactoryGirl.define do
  factory :user do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sequence :name  { |n| &quot;person#{n}&quot; }
sequence :email { |n| &quot;person#{n}@example.com&quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  end
end&lt;/p&gt;

&lt;p&gt;describe User do
  before  { @user = FactoryGirl.create(:user) }
  subject { @user }
  it { should respond_to(:name) }
  &amp;hellip;
end</code></pre>
</div>
</p>

<p>How do I create Goals that are linked to the User?</p>

<!--more-->


<h3>How to create Factories for nested attributes</h3>

<h5>1. Make a new Factory for producing Goals:</h5>

<p><div>
  <pre><code class='ruby'>FactoryGirl.define do
  factory :goal do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sequence :description { |n| &quot;my goal #{n}&quot; }
sequence :motivation  { |n| &quot;my motivation #{n}&quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  end
end</code></pre>
</div>
</p>

<h5>2. Call the Goal Factory from the User Factory and store the Goals in an Array</h5>

<p><div>
  <pre><code class='ruby'>FactoryGirl.define do
  factory :user do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sequence :name { |n| &quot;person#{n}&quot; }
sequence :email { |n| &quot;person#{n}@example.com&quot; }

goals { Array.new(1) { FactoryGirl.build(:goal) } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  end
end</code></pre>
</div>
</p>

<p>Your objects will look like this:
<div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;p @user&lt;/p&gt;

&lt;h1&gt;&lt;User id: 1, name: &quot;person1&quot;, email: &quot;person1@example.com&quot;, ... &gt;&lt;/h1&gt;

&lt;p&gt;p @user.goals.first&lt;/p&gt;

&lt;h1&gt;&amp;lt;ActiveRecord::Associations::CollectionProxy [#&lt;Goal id: 1, user_id: 1, description: &quot;my goal 1&quot;, motivation: &quot;my motivation 1&quot;, ...]&gt;</code></pre>
</div>
</h1></blockquote>

<p>Create Hours for Goals in the same manner: create a Factory for making Hours, call the Hours Factory from the Goals Factory.</p>

<p><div>
  <pre><code class='ruby'>FactoryGirl.define do
  factory :hour do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;duration { 100 * rand(36) }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  end
end&lt;/p&gt;

&lt;p&gt;FactoryGirl.define do
  factory :goal do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sequence :description { |n| &quot;my goal #{n}&quot; }
sequence :motivation  { |n| &quot;my motivation #{n}&quot; }

hours { Array.new(3) { FactoryGirl.build(:hour) } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  end
end</code></pre>
</div>
</p>

<p>Checking your objects:
<div>
  <pre><code class='bash'>&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;p @user&lt;/p&gt;

&lt;h1&gt;&lt;User id: 1, name: &quot;person1&quot;, email: &quot;person1@example.com&quot;, ... &gt;&lt;/h1&gt;

&lt;p&gt;p @user.goals.first&lt;/p&gt;

&lt;h1&gt;&amp;lt;ActiveRecord::Associations::CollectionProxy [#&lt;Goal id: 1, user_id: 1, description: &quot;my goal 1&quot;, motivation: &quot;my motivation 1&quot;, ...]&gt;&lt;/h1&gt;

&lt;p&gt;p @user.goals.first.hours.first&lt;/p&gt;

&lt;h1&gt;&amp;lt;ActiveRecord::Associations::CollectionProxy [#&lt;Hour id: 1, goal_id: 1, duration: 3200 , ...]&gt;</code></pre>
</div>
</h1></blockquote>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partial to Ajax]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/partial-to-ajax/"/>
    <updated>2013-10-18T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/partial-to-ajax</id>
    <content type="html"><![CDATA[<p>I have been building a new project and getting creative with views. I am working with bootstrap and jquery to develop tabbed displays, and in the process have been gleaning a deeper understanding of rails routes, controllers, and assets. Using Ajax to load partials into rails views is a three part process:</p>

<!--more-->


<h4>1. In the View, Add a Link</h4>

<p>/path/to/view.html.erb</p>

<p><div>
  <pre><code class='ruby'>&amp;lt;%= link_to &amp;ldquo;Show my partial&amp;rdquo;, path_to_controller, remote: true %&gt;</code></pre>
</div>
</p>

<p>The key difference in the syntax for this link is &ldquo;remote: true&rdquo;, which signals to the controller action to respond using ajax, not html.</p>

<h4>2. Create a Partial</h4>

<p>/path/to/view/_my_partial.html.erb
<div>
  <pre><code class='ruby'>&lt;/p&gt;

&lt;div&gt;
  &lt;%= form_for @model do |f| %&gt;
    &lt;%= f.label :my_text_field, &quot;Text Field Label&quot; %&gt;
    &lt;%= f.text_area :my_text_field %&gt;
    &lt;%= f.submit &quot;New&quot;, class: &quot;btn btn-primary&quot; %&gt;
  &lt;% end %&gt;
&lt;/div&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<h4>3. In the Controller Action, Add a js Response</h4>

<p>/path/to/controller.rb</p>

<p><div>
  <pre><code class='ruby'>def my_action
  respond_to do |format|&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;format.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  end
end</code></pre>
</div>
</p>

<p>Normally, Rails will render the view that corresponds to the name of the action in response to an html request. The format.js line asks rails to look for a javascript file instead of an html file when it tries to render a view.</p>

<h4>3. Create a my_action.js.erb File to Shape the Ajax Response</h4>

<p>/path/to/view/my_action.js.erb</p>

<p><div>
  <pre><code class='javascript'>$(&amp;ldquo;#your-placeholder-id&amp;rdquo;).prepend(&amp;lsquo;&amp;lt;%= escape_javascript(render &#39;path/to/view/my_partial&amp;rsquo;) %&gt;</code></pre>
</div>
</p>

<p>Files with multiple extensions are processed from last to the first one. With js.erb, the erb will process all the ruby content first, and then the javascript will be run. Your js.erb file should be saved in the same folder as the rest of your controller&rsquo;s views. This is an example :
<div>
  <pre><code class='bash'>app/views/users/
â”œâ”€â”€ _my_partial.html.erb
â”œâ”€â”€ edit.js.erb
â”œâ”€â”€ show.html.erb</code></pre>
</div>
</p>

<p>Voila! When you click the link in your view the partial is loaded using Ajax.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails, You Can Depend on Javascript]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/rails-depends-on-javascript/"/>
    <updated>2013-09-16T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/rails-depends-on-javascript</id>
    <content type="html"><![CDATA[<p>I am between computers at the moment, and I really really miss my OSX development environment. Dependency installation is so smooth and painless on mac, that I had quite forgotten the complications of setting up a complete environment in linux. For instance</p>

<h3>Rails requires a javascript runtime environment</h3>

<p>I am running an Ubuntu 9.4 remix on my little Atom Netbook. Getting rails up and running anew is a lesson in returning to fundamentals.
<div>
  <pre><code class='bash'>$ gem install rails
$ rails new testapp -T
$ rails generate rspec:install
&amp;hellip;
Could not find a JavaScript runtime. See &lt;a href=&quot;https://github.com/sstephenson/execjs&quot;&gt;https://github.com/sstephenson/execjs&lt;/a&gt; for a list of available runtimes</code></pre>
</div>
</p>

<!--more-->


<h3>Why does rails use a javascript runtime?</h3>

<p>A web application does not exist in a ruby/rails vacuum &mdash; rendering an html page requires css and javascript as well. By default, the &lsquo;rails new&rsquo; command generates a Gemfile containing a few suggested goodies, including uglifier, which compresses javascript assets. Dealing with multiple layers of javascripts can hurt application performance, which is why rails has adopted a compression strategy. Uglifier minifies your javascript by removing all the whitespace.</p>

<p>From the RailsGuides:</p>

<blockquote><p>You will need an ExecJS supported runtime in order to use uglifier. If you are using Mac OS X or Windows you have a JavaScript runtime installed in your operating system. Check the ExecJS documentation for information on all of the supported JavaScript runtimes.</p></blockquote>

<h3>Setup Node.js on Linux</h3>

<p>In Ubuntu 10.4 and above, a JavaScript runtime is included, but installing Node on an older Ubuntu distro is not as simple as
<div>
  <pre><code class='bash'>$ sudo apt-get nodejs</code></pre>
</div>
</p>

<p>I found the key sequence of commands on the Node.js website. First, update your packages and install node.js dependencies: python, g++, make, etc
<div>
  <pre><code class='bash'>$ sudo apt-get update
$ sudo apt-get install python-software-properties python g++ make</code></pre>
</div>
</p>

<p>Next, add the location of the nodejs repository, update, and install.
<div>
  <pre><code class='bash'>$ sudo add-apt-repository ppa:chris-lea/node.js
$ sudo apt-get update
$ sudo apt-get install nodejs</code></pre>
</div>
</p>

<p>Wow &mdash; with all of that done, I can finally:
<div>
  <pre><code class='bash'>$ rails generate rspec:install&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  create  .rspec
  create  spec
  create  spec/spec_helper.rb</code></pre>
</div>

</code></pre>

<p>Awesome.</p>
]]></content>
  </entry>
  
</feed>
