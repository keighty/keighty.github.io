<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-01-20T07:41:52-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[#dup vs #clone in Ruby and Rails]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/number-dup-vs-number-clone-in-ruby-and-rails/"/>
    <updated>2015-01-10T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/number-dup-vs-number-clone-in-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>I was recently fixing a failing test and discovered that Ruby and Rails implement <code>#clone</code> and <code>#dup</code> in confusing and occasionally opposite ways.</p>

<!--more-->


<h3>In Rails <code>#clone</code> is a less complete copy of an object than <code>#dup</code></h3>

<p>Rails versions have flip-flopped on how to implement <code>#clone</code> and <code>#dup</code>, and there is ambiguity in how Rails defines &ldquo;shallow&rdquo;. In Rails 4.0, <a href="https://github.com/rails/rails/blob/4-0-stable/activerecord/lib/active_record/core.rb#L217-L220"><code>#clone</code> is a shallow copy</a> of an ActiveRecord object. &ldquo;Shallow&rdquo; in this context means that the <code>clone</code> shares attributes with the <code>original</code>:</p>

<blockquote><p>Identical to Ruby&rsquo;s clone method.  This is a &ldquo;shallow&rdquo; copy.  Be warned that your attributes are not copied. That means that modifying attributes of the clone will modify the original, since they will both point to the same attributes hash. If you need a copy of your attributes hash, please use the #dup method.</p></blockquote>

<p>However, <a href="https://github.com/rails/rails/blob/4-0-stable/activerecord/lib/active_record/core.rb#L234-L240"><code>#dup</code> is also described as a shallow copy</a>. &ldquo;Shallow&rdquo; in this context means that while the dup does not share attributes with the original, it does share associations.</p>

<blockquote><p>Duped objects have no id assigned and are treated as new records. Note that this is a &ldquo;shallow&rdquo; copy as it copies the object&rsquo;s attributes only, not its associations. The extent of a &ldquo;deep&rdquo; copy is application specific and is therefore left to the application to implement according to its need.</p></blockquote>

<h4><code>clone</code> vs <code>dup</code> in Rails:</h4>

<p>```bash
pry> original = User.find(3)
  User Load (0.7ms)  SELECT  &ldquo;users&rdquo;.* FROM &ldquo;users&rdquo; WHERE &ldquo;users&rdquo;.&ldquo;id&rdquo; = ? LIMIT 1  [[&ldquo;id&rdquo;, 3]]
=> #<User id: 3, first_name: "katie", last_name: "leonard", email: nil, created_at: "2015-01-10 17:37:00", updated_at: "2015-01-10 17:37:00"></p>

<p>pry> clone_copy = original.clone
=> #<User id: 3, first_name: "katie", last_name: "leonard", email: nil, created_at: "2015-01-10 17:37:00", updated_at: "2015-01-10 17:37:00"></p>

<p>pry> dup_copy = original.dup
=> #<User id: nil, first_name: "katie", last_name: "leonard", email: nil, created_at: nil, updated_at: nil>
```</p>

<p>Note that the <code>clone_copy</code> is an exact copy of the original (same <code>user.id</code>) and the <code>dup_copy</code> is a new record (<code>user.id</code> = nil). Any changes made to the <code>clone_copy</code> will be changed in the <code>original</code>, but any changes to the <code>dup_copy</code> attributes will remain isolated.</p>

<h3>In Ruby <code>#clone</code> is a more complete copy of an object than <code>#dup</code></h3>

<p>With simple classes, <code>clone()</code> and <code>dup()</code> behave identically:</p>

<p>```bash
irb> class User
irb>   attr_accessor :first_name, :last_name, :email
irb>   def initialize(options={})
irb>     @first_name = options[:first_name]
irb>     @last_name  = options[:last_name]
irb>     @email      = options[:email]
irb>   end
irb> end
=> :initialize</p>

<p>irb> original = User.new(first_name: &ldquo;katie&rdquo;, last_name: &ldquo;leonard&rdquo;)
=> #&lt;User:0x007fd7e98e0aa8 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> cloned_copy = original.clone
=> #&lt;User:0x007fd7e98c87c8 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> dup_copy = original.dup
=> #&lt;User:0x007fd7e98b24a0 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> cloned_copy.first_name = &ldquo;foo&rdquo;
=> &ldquo;foo&rdquo;</p>

<p>irb> original.first_name
=> &ldquo;katie&rdquo;</p>

<p>irb> dup_copy.first_name
=> &ldquo;katie&rdquo;</p>

<p>irb> dup_copy.first_name = &ldquo;bar&rdquo;
=> &ldquo;bar&rdquo;</p>

<p>irb> original.first_name
=> &ldquo;katie&rdquo;
<code>``
</code>clone()<code>and</code>dup()` function the same way!</p>

<p><code>clone()</code> from the <a href="http://ruby-doc.org/core-2.1.5/Object.html#method-i-clone">Ruby docs</a>:</p>

<blockquote><p>Produces a shallow copy of obj — the instance variables of obj are copied, but not the objects they reference. Copies the frozen and tainted state of obj. See also the discussion under Object#dup.</p></blockquote>

<p><code>dup()</code> from the <a href="http://ruby-doc.org/core-2.1.5/Object.html#method-i-dup">Ruby docs</a> looks suspiciously like the docs for <code>clone()</code>:</p>

<blockquote><p>Produces a shallow copy of obj — the instance variables of obj are copied, but not the objects they reference. dup copies the tainted state of obj. This method may have class-specific behavior. If so, that behavior will be documented under the #initialize_copy method of the class.</p></blockquote>

<p>This deserves further clarification:</p>

<blockquote><p>In general, clone and dup may have different semantics in descendant classes. While clone is used to duplicate an object, including its internal state, dup typically uses the class of the descendant object to create the new instance. When using dup any modules that the object has been extended with will not be copied.</p></blockquote>

<p>To paraphrase, <code>#dup</code> will act like <code>#clone</code>, but without the original&rsquo;s singleton class (ergo a &ldquo;shallower&rdquo; copy).</p>

<p>```
irb> class User
irb> attr_accessor :first_name, :last_name, :email
irb>   def initialize(options={})
irb>     @first_name = options[:first_name]
irb>     @last_name  = options[:last_name]
irb>     @email      = options[:email]
irb>   end
irb> end
=> :initialize</p>

<p>irb> module Crunchy
irb>   def bacon
irb>     &ldquo;bacon&rdquo;
irb>   end
irb> end
=> :bacon</p>

<p>irb> a = User.new(first_name: &ldquo;katie&rdquo;, last_name: &ldquo;leonard&rdquo;)
=> #&lt;User:0x007fd7e8882490 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> a.extend(Crunchy)
=> #&lt;User:0x007fd7e8882490 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> a.bacon
=> &ldquo;bacon&rdquo;</p>

<p>irb> b = a.clone
=> #&lt;User:0x007fd7e8843060 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> b.bacon
=> &ldquo;bacon&rdquo;</p>

<p>irb> c = a.dup
=> #&lt;User:0x007fd7e98f05c0 @first_name=&ldquo;katie&rdquo;, @last_name=&ldquo;leonard&rdquo;, @email=nil></p>

<p>irb> c.bacon
NoMethodError: undefined method `bacon' for #&lt;User:0x007fd7e98f05c0></p>

<pre><code>    from (irb):101
    from /usr/local/var/rbenv/versions/2.1.5/bin/irb:11:in `&lt;main&gt;'
</code></pre>

<p>```</p>

<p>There are subtle differences between <code>#clone</code> and <code>#dup</code> in Ruby, and less subtle differences in Rails (depending on your version). Take care that the object you want is the object you get.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factoring in Nests]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/factoring-in-nests/"/>
    <updated>2013-10-29T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/factoring-in-nests</id>
    <content type="html"><![CDATA[<p>I am building an application that uses several nested attributes: Users have many Goals (Goals belong_to Users), and Goals have many Hours (Hours belong_to Goals).</p>

<p>Using <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a> to create a User is straightforward:</p>

<p>{% highlight ruby %}
FactoryGirl.define do
  factory :user do</p>

<pre><code>sequence :name  { |n| "person#{n}" }
sequence :email { |n| "person#{n}@example.com" }
</code></pre>

<p>  end
end</p>

<p>describe User do
  before  { @user = FactoryGirl.create(:user) }
  subject { @user }
  it { should respond_to(:name) }
  &hellip;
end {% endhighlight %}</p>

<p>How do I create Goals that are linked to the User?</p>

<!--more-->


<h3>How to create Factories for nested attributes</h3>

<h5>1. Make a new Factory for producing Goals:</h5>

<p>{% highlight ruby %}
FactoryGirl.define do
  factory :goal do</p>

<pre><code>sequence :description { |n| "my goal #{n}" }
sequence :motivation  { |n| "my motivation #{n}" }
</code></pre>

<p>  end
end {% endhighlight %}</p>

<h5>2. Call the Goal Factory from the User Factory and store the Goals in an Array</h5>

<p>{% highlight ruby %}
FactoryGirl.define do
  factory :user do</p>

<pre><code>sequence :name { |n| "person#{n}" }
sequence :email { |n| "person#{n}@example.com" }

goals { Array.new(1) { FactoryGirl.build(:goal) } }
</code></pre>

<p>  end
end {% endhighlight %}</p>

<p>Your objects will look like this:
{% highlight bash %}</p>

<blockquote><p>p @user</p>

<h1><User id: 1, name: "person1", email: "person1@example.com", ... ></h1>

<p>p @user.goals.first</p>

<h1>&lt;ActiveRecord::Associations::CollectionProxy [#<Goal id: 1, user_id: 1, description: "my goal 1", motivation: "my motivation 1", ...]> {% endhighlight %}</h1></blockquote>

<p>Create Hours for Goals in the same manner: create a Factory for making Hours, call the Hours Factory from the Goals Factory.</p>

<p>{% highlight ruby %}
FactoryGirl.define do
  factory :hour do</p>

<pre><code>duration { 100 * rand(36) }
...
</code></pre>

<p>  end
end</p>

<p>FactoryGirl.define do
  factory :goal do</p>

<pre><code>sequence :description { |n| "my goal #{n}" }
sequence :motivation  { |n| "my motivation #{n}" }

hours { Array.new(3) { FactoryGirl.build(:hour) } }
</code></pre>

<p>  end
end {% endhighlight %}</p>

<p>Checking your objects:
{% highlight bash %}</p>

<blockquote><p>p @user</p>

<h1><User id: 1, name: "person1", email: "person1@example.com", ... ></h1>

<p>p @user.goals.first</p>

<h1>&lt;ActiveRecord::Associations::CollectionProxy [#<Goal id: 1, user_id: 1, description: "my goal 1", motivation: "my motivation 1", ...]></h1>

<p>p @user.goals.first.hours.first</p>

<h1>&lt;ActiveRecord::Associations::CollectionProxy [#<Hour id: 1, goal_id: 1, duration: 3200 , ...]> {% endhighlight %}</h1></blockquote>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partial to Ajax]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/partial-to-ajax/"/>
    <updated>2013-10-18T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/partial-to-ajax</id>
    <content type="html"><![CDATA[<p>I have been building a new project and getting creative with views. I am working with bootstrap and jquery to develop tabbed displays, and in the process have been gleaning a deeper understanding of rails routes, controllers, and assets. Using Ajax to load partials into rails views is a three part process:</p>

<!--more-->


<h4>1. In the View, Add a Link</h4>

<p>/path/to/view.html.erb</p>

<p>{% highlight ruby %}
&lt;%= link_to &ldquo;Show my partial&rdquo;, path_to_controller, remote: true %> {% endhighlight %}</p>

<p>The key difference in the syntax for this link is &ldquo;remote: true&rdquo;, which signals to the controller action to respond using ajax, not html.</p>

<h4>2. Create a Partial</h4>

<p>/path/to/view/_my_partial.html.erb
{% highlight ruby %}</p>

<div>
  <%= form_for @model do |f| %>
    <%= f.label :my_text_field, "Text Field Label" %>
    <%= f.text_area :my_text_field %>
    <%= f.submit "New", class: "btn btn-primary" %>
  <% end %>
</div>


<p>{% endhighlight %}</p>

<h4>3. In the Controller Action, Add a js Response</h4>

<p>/path/to/controller.rb</p>

<p>{% highlight ruby %}
def my_action
  respond_to do |format|</p>

<pre><code>format.js
</code></pre>

<p>  end
end{% endhighlight %}</p>

<p>Normally, Rails will render the view that corresponds to the name of the action in response to an html request. The format.js line asks rails to look for a javascript file instead of an html file when it tries to render a view.</p>

<h4>3. Create a my_action.js.erb File to Shape the Ajax Response</h4>

<p>/path/to/view/my_action.js.erb</p>

<p>{% highlight javascript %}
$(&ldquo;#your-placeholder-id&rdquo;).prepend(&lsquo;&lt;%= escape_javascript(render 'path/to/view/my_partial&rsquo;) %>
{% endhighlight %}</p>

<p>Files with multiple extensions are processed from last to the first one. With js.erb, the erb will process all the ruby content first, and then the javascript will be run. Your js.erb file should be saved in the same folder as the rest of your controller&rsquo;s views. This is an example :
{% highlight bash %}
app/views/users/
├── _my_partial.html.erb
├── edit.js.erb
├── show.html.erb {% endhighlight %}</p>

<p>Voila! When you click the link in your view the partial is loaded using Ajax.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails, You Can Depend on Javascript]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/rails-depends-on-javascript/"/>
    <updated>2013-09-16T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/rails-depends-on-javascript</id>
    <content type="html"><![CDATA[<p>I am between computers at the moment, and I really really miss my OSX development environment. Dependency installation is so smooth and painless on mac, that I had quite forgotten the complications of setting up a complete environment in linux. For instance</p>

<h3>Rails requires a javascript runtime environment</h3>

<p>I am running an Ubuntu 9.4 remix on my little Atom Netbook. Getting rails up and running anew is a lesson in returning to fundamentals.
{% highlight bash %}
$ gem install rails
$ rails new testapp -T
$ rails generate rspec:install
&hellip;
Could not find a JavaScript runtime. See <a href="https://github.com/sstephenson/execjs">https://github.com/sstephenson/execjs</a> for a list of available runtimes{% endhighlight %}</p>

<!--more-->


<h3>Why does rails use a javascript runtime?</h3>

<p>A web application does not exist in a ruby/rails vacuum &mdash; rendering an html page requires css and javascript as well. By default, the &lsquo;rails new&rsquo; command generates a Gemfile containing a few suggested goodies, including uglifier, which compresses javascript assets. Dealing with multiple layers of javascripts can hurt application performance, which is why rails has adopted a compression strategy. Uglifier minifies your javascript by removing all the whitespace.</p>

<p>From the RailsGuides:</p>

<blockquote><p>You will need an ExecJS supported runtime in order to use uglifier. If you are using Mac OS X or Windows you have a JavaScript runtime installed in your operating system. Check the ExecJS documentation for information on all of the supported JavaScript runtimes.</p></blockquote>

<h3>Setup Node.js on Linux</h3>

<p>In Ubuntu 10.4 and above, a JavaScript runtime is included, but installing Node on an older Ubuntu distro is not as simple as
{% highlight bash %}
$ sudo apt-get nodejs{% endhighlight %}</p>

<p>I found the key sequence of commands on the Node.js website. First, update your packages and install node.js dependencies: python, g++, make, etc
{% highlight bash %}
$ sudo apt-get update
$ sudo apt-get install python-software-properties python g++ make {% endhighlight %}</p>

<p>Next, add the location of the nodejs repository, update, and install.
{% highlight bash %}
$ sudo add-apt-repository ppa:chris-lea/node.js
$ sudo apt-get update
$ sudo apt-get install nodejs {% endhighlight %}</p>

<p>Wow &mdash; with all of that done, I can finally:
{% highlight bash %}
$ rails generate rspec:install</p>

<pre><code>  create  .rspec
  create  spec
  create  spec/spec_helper.rb {% endhighlight %}
</code></pre>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mass Assignment X Gravity]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/mass-assignment-x-gravity/"/>
    <updated>2013-07-15T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/mass-assignment-x-gravity</id>
    <content type="html"><![CDATA[<h3>What is Mass Assignment?</h3>

<p>Mass assignment is using a ruby-esque shortcut to interact with models<!--more-->:</p>

<p>This is NOT mass assignment.
{% highlight ruby %}
def create
  u = User.new
  u.first_name = params[:user][:firstname]
  u.last_name = params[:user][:lastname]
  if u.save</p>

<pre><code>redirect_to :index, flash: { success: "Created!" }
</code></pre>

<p>  else</p>

<pre><code>render :action =&gt; 'new'
</code></pre>

<p>  end
end{% endhighlight %}</p>

<p>Each param is extracted from the params hash and assigned explicitly. Any params that are not assigned are thrown on the floor.</p>

<p>This IS mass assignment.</p>

<p>{% highlight ruby %}
def create
  u = User.new(params[:user])
  if u.save</p>

<pre><code>redirect_to :index, flash: { success: "Created!" }
</code></pre>

<p>  else</p>

<pre><code>render :action =&gt; 'new'
</code></pre>

<p>  end
end{% endhighlight %}
The programmer assumes that the params include all the data necessary, and <em>only</em> the data necessary. All params in the hash are used to create the new user record.</p>

<h3>Why is mass assignment a problem?</h3>

<p>The problem with mass assignment is that if you have a sensitive tag in your model, for example user_type (which could be set to admin), a malicious user can add <code>user[:user_type] = 'admin'</code> to your params hash. Your controller will unwittingly include it in the save command, creating a new admin account for the  malicious user.</p>

<h3>Is there any way to prevent this diabolical schema scheme?</h3>

<p>There is! With Rails 4 comes <strong>strong params</strong>.
Strong params live in the controller and tell it explicitly what params can be trusted.
{% highlight ruby %}
def create
  u = User.new(user_params)
  if u.save</p>

<pre><code>redirect_to :index, flash: { success: "Created!" }
</code></pre>

<p>  else</p>

<pre><code>render :action =&gt; 'new'
</code></pre>

<p>  end
end
&hellip;
def user_params
  params.require(:user).permit(:name, :email, :password, :password_confirmation)
end{% endhighlight %}
The only parameters our controller will send to the model are those specified on our white-list. If rails detects a user attempting to access a param that is not on the white-list, said user had better be prepared for <em>grave consequences</em>. Their session will be <strong>deleted</strong>, their attempt will be <strong>logged</strong>, and Rails will email their mother.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
</feed>
