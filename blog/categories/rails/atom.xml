<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2018-02-23T09:47:43-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    <email><![CDATA[keighty.leonard@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hunting Monkey Patches]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/hunting-monkey-patches/"/>
    <updated>2015-08-08T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/hunting-monkey-patches</id>
    <content type="html"><![CDATA[<p>Ruby monkeypatching is a dangerous, but necessary tool. It is convenient to add new behaviours to  existing classes, or to replace existing methods with more customized or secure code. Once the patch is in place, however, it is easy to forget that it is there.</p>

<p>Recently, I was trying to discern the origin of such a patch, and discovered a new (to me) function in pry, my favourite Ruby debugger: <code>show-source</code>.</p>

<!--more-->


<ol>
<li>Put a <code>binding pry</code> below the monkeypatch so that it can be caught at boot time</li>
<li>Use <code>cd</code> to change directories into the reopened class</li>
<li>Use <code>show-source</code> to find the exact location where the method was originally defined</li>
<li>Use <code>show-source -a</code> to show the source and location of EVERY MONKEYPATCH</li>
</ol>


<p>In action:</p>

<h4>1. Debug your code at boot time</h4>

<p><img src="/images/150808-hunting-monkey-patches/step1-pry.png"></p>

<h4>2. Reopen the class</h4>

<p><img src="/images/150808-hunting-monkey-patches/step2-cd.png"></p>

<h4>3. Use &lsquo;show-source&rsquo;</h4>

<p><img src="/images/150808-hunting-monkey-patches/step3-show-source.png"></p>

<h4>4. Use &lsquo;show-source -a&rsquo;</h4>

<p><img src="/images/150808-hunting-monkey-patches/step4-show-source-a1.png">
<img src="/images/150808-hunting-monkey-patches/step4-show-source-a2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Count Your Chickens if They Are ActiveRecord Objects]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/dont-count-your-chickens-if-they-are-active-record-objects/"/>
    <updated>2015-05-07T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/dont-count-your-chickens-if-they-are-active-record-objects</id>
    <content type="html"><![CDATA[<p>You may believe that <code>#length</code>, <code>#size</code>, and <code>#count</code> are fairly equivalent:</p>

<p><code>
irb(main):002:0&gt; yourRubyChickens =  %w{ Chantecler RedShaver RhodeIslandRed }
=&gt; ["Chantecler", "RedShaver", "RhodeIslandRed"]
irb(main):003:0&gt; yourRubyChickens.length
=&gt; 3
irb(main):004:0&gt; yourRubyChickens.size
=&gt; 3
irb(main):005:0&gt; yourRubyChickens.count
=&gt; 3
</code></p>

<p>But, beware of <code>#count</code> in Rails!</p>

<p>```
[1] pry(main)> yourRailsChickens = Chicken.all
  Chicken Load (2.1ms)  SELECT &ldquo;chickens&rdquo;.* FROM &ldquo;chickens&rdquo;
=> [#&lt;ChanteclerChicken:0x007f98eafcd6d8
  id: 1,
  type: &ldquo;ChanteclerChicken&rdquo;,
  color: &ldquo;white&rdquo;,
  created_at: Thu, 07 May 2015 14:36:36 UTC +00:00,
  updated_at: Thu, 07 May 2015 14:36:36 UTC +00:00>,
 #&lt;RedShaverChicken:0x007f98e63a9428
  id: 2,
  type: &ldquo;RedShaverChicken&rdquo;,
  color: &ldquo;white&rdquo;,
  created_at: Thu, 07 May 2015 14:37:01 UTC +00:00,
  updated_at: Thu, 07 May 2015 14:37:01 UTC +00:00>,
 #&lt;RedShaverChicken:0x007f98e63a9248
  id: 3,
  type: &ldquo;RedShaverChicken&rdquo;,
  color: &ldquo;black&rdquo;,
  created_at: Thu, 07 May 2015 14:37:25 UTC +00:00,
  updated_at: Thu, 07 May 2015 14:37:25 UTC +00:00>,
 #&lt;RedShaverChicken:0x007f98e63a9068
  id: 4,
  type: &ldquo;RedShaverChicken&rdquo;,
  color: &ldquo;red&rdquo;,
  created_at: Thu, 07 May 2015 14:37:35 UTC +00:00,
  updated_at: Thu, 07 May 2015 14:37:35 UTC +00:00>,
 #&lt;RedShaverChicken:0x007f98e63a8e88
  id: 5,
  type: &ldquo;RedShaverChicken&rdquo;,
  color: &ldquo;white&rdquo;,
  created_at: Thu, 07 May 2015 14:37:53 UTC +00:00,
  updated_at: Thu, 07 May 2015 14:37:53 UTC +00:00>]</p>

<p>[2] pry(main)> yourRailsChickens.length
=> 5
[3] pry(main)> yourRailsChickens.size
=> 5
[4] pry(main)> yourRailsChickens.count
   (0.2ms)  SELECT COUNT(*) FROM &ldquo;chickens&rdquo;
=> 5
```</p>

<p><code>#size</code> and <code>#length</code> are largely equivalent, but <code>#count</code> issues an additional query to the database that can seriously damage performance for the unsuspecting developer.</p>

<p>For more info, checkout the docs for <a href="http://www.rubydoc.info/docs/rails/4.0.0/ActiveRecord/Calculations:count">count</a> and <a href="http://www.rubydoc.info/docs/rails/4.0.0/ActiveRecord/Associations/CollectionAssociation:length">length</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Local Load Balancing]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/local-load-balancing/"/>
    <updated>2015-04-22T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/local-load-balancing</id>
    <content type="html"><![CDATA[<p>You can mimic the end-user&rsquo;s UI experience accurately enough by running application code locally, but what about the backend? Once your code is deployed to production, requests will be divided between dozens of servers. If there is variation in the code paths running on each server (like during a feature rollout, for example), it is useful to determine beforehand if there are any dangerous conflicts. Enter local load-balancing.</p>

<!--more-->


<p><a href="http://nginx.org/en/">NGiNX</a> is load balancing software that distributes requests across multiple servers, and it&rsquo;s easy to get running quickly.</p>

<h3>Installation</h3>

<p>You can download and compile from source at <a href="http://nginx.org/en/download.html">NGiNX.org</a>, or use <code>brew install nginx</code> on MacOS-X.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>âžœ  api_playground  brew install nginx
</span><span class='line'>&amp;hellip;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;The default port has been <span class="nb">set </span>in /usr/local/etc/nginx/nginx.conf to 8080 so that nginx can run without sudo.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;To have launchd start nginx at login:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;ln -sfv /usr/local/opt/nginx/*.plist ~/Library/LaunchAgents
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Then to load nginx now:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;launchctl load ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Or, <span class="k">if </span>you don&amp;rsquo;t want/need launchctl, you can just run:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;nginx
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Start the server with the command <code>nginx</code>.</p>

<h3>Configuration</h3>

<p>Your NGiNX installation added a config file: <code>/usr/local/etc/nginx/nginx.conf</code>. It is mostly commented configuration examples, so you can simply replace the current <code>server</code> configuration block with this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/usr/local/etc/nginx/nginx.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>upstream myapp1 {
</span><span class='line'>  server localhost:3000;
</span><span class='line'>  server localhost:3030; #add as many servers as you want here
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;server {
</span><span class='line'>  listen 8080;
</span><span class='line'>  server_name localhost;
</span><span class='line'>  location / {&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;proxy_pass http://myapp1;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Reload your NGiNX server with <code>nginx -s reload</code>, and hit <a href="localhost:8080">localhost:8080</a> to ensure you have configured it correctly.</p>

<p><img src="/images/150421-local-loadbalancing/welcome_nginx.png"></p>

<h3>Start your servers</h3>

<p>NGiNX is configured and listening on ports 3000 and 3030. Now we just have to connect some servers!</p>

<p><strong>Server 1</strong>: <code>bundle exec rails server -p 3030</code></p>

<p><strong>Server 2</strong>: <code>bundle exec rails server -p 3000 --pid tmp/pids/server2.pid</code></p>

<blockquote><p>Pro-tip: The Rails server stores its process id in a temporary file (<code>/tmp/pids/server.pid</code>), and will complain if you start another server unless you specify a new temporary pid file.</p></blockquote>

<p>Check your progress by hitting localhost:8080:</p>

<p><img src="/images/150421-local-loadbalancing/load_balancing.png"></p>

<p>Checkout the <a href="http://nginx.org/en/docs/http/load_balancing.html">docs</a> for more examples of nginx configuration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Techniques]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/debugging-techniques/"/>
    <updated>2015-02-02T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/debugging-techniques</id>
    <content type="html"><![CDATA[<p>I am working on upgrading an application from Rails 3.0 to Rails 3.2. While the numbers tell you it is a minor version change, there are definitely some major challenges. Digging through Rails and gem internals has forced me to add new strategies to my debugging toolbox, and here are a few of the essentials&hellip;<!--more--></p>

<h3><a href="https://github.com/burke/zeus">Zeus</a></h3>

<p>Zeus is a gem that preloads your Rails app and keeps it loaded, making test driven development fast. Just type <code>zeus start</code> in one console window, and any of the listed commands in another console window.</p>

<p><img src="/images/zeus_start.png"></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>zeus <span class="nb">test test</span>/models/user_test.rb
</span><span class='line'>Run options: &amp;mdash;seed 32298&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Running:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Finished in 0.045991s, 21.7434 runs/s, 21.7434 assertions/s.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Run a specific test in a file by passing a regex argument:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>zeus <span class="nb">test test</span>/models/user_test.rb -n &amp;ldquo;/test_user_description_has_full_name/&amp;rdquo;
</span><span class='line'>Run options: -n /test_user_description_has_full_name/ &amp;mdash;seed 17927&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Running:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Finished in 0.044550s, 22.4467 runs/s, 22.4467 assertions/s.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3><a href="https://github.com/pry/pry">Pry</a></h3>

<p>The Pry gem allows you to set break points and open an interactive debug session at any place in your code using <code>binding.pry</code>. A great way to debug a failing test is to place a pry at the top of the test and check your setup:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Pry into a test </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">test_helper</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class UserTest &amp;lt; ActiveSupport::TestCase</span>
</span><span class='line'><span class="sr">  def test_user_description_has_full_name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">first_name</span><span class="p">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="n">last_name</span><span class="p">:</span> <span class="s2">&quot;kitty&quot;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">&quot;kitty@example.com&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert_equal</span> <span class="s2">&quot;hello kitty&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">full_name</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>zeus <span class="nb">test test</span>/models/user_test.rb -n &amp;ldquo;/test_user_description_has_full_name/&amp;rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Run options: -n /test_user_description_has_full_name/ &amp;mdash;seed 21519&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Running:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;From: /Users/keighty/api_playground/test/models/user_test.rb @ line 7 UserTest#test_user_description_has_full_name:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; 4: def test_user_description_has_full_name
</span><span class='line'> 5:   <span class="nv">user</span> <span class="o">=</span> User.create<span class="o">(</span>first_name: <span class="s2">&quot;hello&quot;</span>, last_name: <span class="s2">&quot;kitty&quot;</span>, email: <span class="s2">&quot;kitty@example.com&quot;</span><span class="o">)</span>
</span><span class='line'> 6:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; <span class="o">=</span>&gt;  7:   binding.pry&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; 8:
</span><span class='line'> 9:   assert_equal <span class="s2">&quot;hello kitty&quot;</span>, user.full_name
</span><span class='line'>10: end
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span>1<span class="o">]</span> pry<span class="o">(</span><span class="c">#&lt;UserTest&gt;)&gt; user&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">=</span>&gt; <span class="c">#&amp;lt;User:0x007fa054180618</span>
</span><span class='line'> id: 980190963,
</span><span class='line'> first_name: &amp;ldquo;hello&amp;rdquo;,
</span><span class='line'> last_name: &amp;ldquo;kitty&amp;rdquo;,
</span><span class='line'> email: &amp;ldquo;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#x3a;&amp;#x6b;&amp;#x69;&amp;#x74;&amp;#x74;&amp;#121;&amp;#64;&amp;#x65;&amp;#x78;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6c;&amp;#x65;&amp;#46;&amp;#x63;&amp;#111;&amp;#x6d;&quot;</span>&gt;&amp;#x6b;&amp;#105;&amp;#x74;&amp;#x74;&amp;#121;&amp;#64;&amp;#101;&amp;#x78;&amp;#97;&amp;#109;&amp;#x70;&amp;#108;&amp;#x65;&amp;#46;&amp;#x63;&amp;#111;&amp;#x6d;&lt;/a&gt;&amp;rdquo;,
</span><span class='line'> created_at: Sat, 07 Feb 2015 16:52:21 UTC +00:00,
</span><span class='line'> updated_at: Sat, 07 Feb 2015 16:52:21 UTC +00:00&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Your pry is a debug console with more than a few extra features. Here are my favourites:</p>

<ul>
<li><code>ls object</code> to see all the methods available on the object:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>3<span class="o">]</span> pry<span class="o">(</span><span class="c">#&lt;UserTest&gt;)&gt; ls user&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ActiveRecord::Core#methods:
</span><span class='line'>  &amp;lt;<span class="o">=</span>&gt;                 eql?                          <span class="nb">hash          readonly</span>!
</span><span class='line'>  <span class="o">==</span>                  freeze                        init_with     <span class="nb">readonly</span>?
</span><span class='line'>  connection_handler  frozen?                       inspect       set_transaction_state
</span><span class='line'>  encode_with         has_transactional_callbacks?  pretty_print  slice
</span><span class='line'>ActiveRecord::Persistence#methods:
</span><span class='line'>  becomes     delete      increment!   toggle!           update_attributes
</span><span class='line'>  becomes!    destroy!    new_record?  update            update_attributes!
</span><span class='line'>  decrement   destroyed?  persisted?   update!           update_column
</span><span class='line'>  decrement!  increment   toggle       update_attribute  update_columns
</span><span class='line'>ActiveRecord::Scoping#methods:
</span><span class='line'>  initialize_internals_callback  populate_with_current_scope_attributes
</span><span class='line'>&amp;hellip;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><code>whereami 10</code> to show 10 lines above and below your breakpoint:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>5<span class="o">]</span> pry<span class="o">(</span><span class="c">#&lt;UserTest&gt;)&gt; whereami 10&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;From: /Users/keighty/api_playground/test/models/user_test.rb @ line 7 UserTest#test_user_description_has_full_name:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; 1: require <span class="s1">&#39;test_helper&#39;</span>
</span><span class='line'> 2:
</span><span class='line'> 3: class UserTest &amp;lt; ActiveSupport::TestCase
</span><span class='line'> 4:   def test_user_description_has_full_name
</span><span class='line'> 5:     <span class="nv">user</span> <span class="o">=</span> User.create<span class="o">(</span>first_name: <span class="s2">&quot;hello&quot;</span>, last_name: <span class="s2">&quot;kitty&quot;</span>, email: <span class="s2">&quot;kitty@example.com&quot;</span><span class="o">)</span>
</span><span class='line'> 6:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; <span class="o">=</span>&gt;  7:     binding.pry&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; 8:
</span><span class='line'> 9:     assert_equal <span class="s2">&quot;hello kitty&quot;</span>, user.full_name
</span><span class='line'>10:   end
</span><span class='line'>11:
</span><span class='line'>12: end
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><code>cd object.method</code> to navigate the object stack as if it were a folder structure (and <code>ls</code> to view properites):</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>1<span class="o">]</span> pry<span class="o">(</span><span class="c">#&lt;UserTest&gt;)&gt; cd user.full_name&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span>2<span class="o">]</span> pry<span class="o">(</span>&amp;ldquo;hello kitty&amp;rdquo;<span class="o">)</span>:1&gt; ls&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Comparable#methods: &amp;lt;  &amp;lt;<span class="o">=</span>  &gt;  &gt;<span class="o">=</span>  between?
</span><span class='line'>JSON::Ext::Generator::GeneratorMethods::String#methods:
</span><span class='line'>  to_json_raw  to_json_raw_object  to_json_without_active_support_encoder
</span><span class='line'>String#methods:
</span><span class='line'>  %                  downcase        lstrip!           strip_heredoc
</span><span class='line'>  *                  downcase!       match             sub
</span><span class='line'>  +                  dump            mb_chars          sub!
</span><span class='line'>  &amp;lt;&amp;lt;                 each_byte       next              succ
</span><span class='line'>  &amp;lt;<span class="o">=</span>&gt;                each_char       next!             succ!
</span><span class='line'>  <span class="o">==</span>                 each_codepoint  not_ascii_only?   <span class="nv">sum</span>
</span><span class='line'>  <span class="o">===</span>                each_line       oct               <span class="nv">swapcase</span>
</span><span class='line'>  <span class="o">=</span>~                 empty?          ord               swapcase!
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These are the features I use most often, but checkout the <a href="http://pryrepl.org/">documentation</a> for more.</p>

<h3>Method Method Method</h3>

<p>Method name collisions can happen in a sprawling legacy codebase, so determining the source is important for debugging. The Ruby language has anticipated this difficulty, and since methods are objects themselves, they created the <a href="http://www.ruby-doc.org/core-2.2.0/Method.html">Method</a> module to access the method object. You can source, extract, unbind, and otherwise manipulate methods in a lot of ways:</p>

<p>
```
[1] pry(#<UserTest>)> method = user.method(:full_name)
=> #&lt;Method: User#full_name></p>

<p>[2] pry(#<UserTest>)> method.owner
=> User(id: integer, first_name: string, last_name: string, email: string, created_at: datetime, updated_at: datetime)</p>

<p>[3] pry(#<UserTest>)> method.source_location
=> [&ldquo;/Users/keighty/api_playground/app/models/user.rb&rdquo;, 2]
```
</p>

<h3>Logger</h3>

<p>Soemtimes the Rails bug you are hunting turns up in the SQL behind your query. When you are in a pry console, the SQL is not displayed by default, but you can turn on query logging by creating an <code>ActiveRecord::Base.logger</code> object:</p>

<p>
```</p>

<h1>before the logger</h1>

<p>[1] pry(#<UserTest>)> User.find(980190963)</p>

<p>=> #&lt;User:0x007fa0556f4fd0
 id: 980190963,
 first_name: &ldquo;hello&rdquo;,
 last_name: &ldquo;kitty&rdquo;,
 email: &ldquo;<a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#x6b;&#105;&#116;&#x74;&#x79;&#64;&#101;&#x78;&#x61;&#109;&#112;&#x6c;&#101;&#46;&#99;&#111;&#x6d;">&#x6b;&#105;&#116;&#x74;&#121;&#64;&#101;&#120;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a>&rdquo;,
 created_at: Sat, 07 Feb 2015 16:52:21 UTC +00:00,
 updated_at: Sat, 07 Feb 2015 16:52:21 UTC +00:00></p>

<p>[2] pry(#<UserTest>)> ActiveRecord::Base.logger = Logger.new STDOUT;</p>

<p>[3] pry(#<UserTest>)> User.find(980190963)</p>

<p>D, [2015-02-07T09:28:34.892017 #10468] DEBUG &mdash; :
User Load (0.1ms)  SELECT  &ldquo;users&rdquo;.* FROM &ldquo;users&rdquo; WHERE &ldquo;users&rdquo;.&ldquo;id&rdquo; = ? LIMIT 1  [[&ldquo;id&rdquo;, 980190963]]</p>

<p>=> #&lt;User:0x007fa05c788c10
 id: 980190963,
 first_name: &ldquo;hello&rdquo;,
 last_name: &ldquo;kitty&rdquo;,
 email: &ldquo;<a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#58;&#107;&#x69;&#x74;&#116;&#x79;&#x40;&#x65;&#120;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#99;&#x6f;&#109;">&#x6b;&#x69;&#116;&#116;&#x79;&#x40;&#x65;&#x78;&#97;&#109;&#112;&#108;&#x65;&#46;&#99;&#111;&#x6d;</a>&rdquo;,
 created_at: Sat, 07 Feb 2015 16:52:21 UTC +00:00,
 updated_at: Sat, 07 Feb 2015 16:52:21 UTC +00:00>
```
</p>

<p>If you find that you are always creating a logger, add these lines to a <code>.pryrc</code> file in your home directory:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if </span>defined?<span class="o">(</span>Rails<span class="o">)</span> &amp;amp;&amp;amp; Rails.env
</span><span class='line'>  require &amp;lsquo;logger&amp;rsquo;
</span><span class='line'>  ActiveRecord::Base.logger <span class="o">=</span> Logger.new<span class="o">(</span>STDOUT<span class="o">)</span>
</span><span class='line'>  ActiveRecord::Base.clear_active_connections!
</span><span class='line'>end%
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Globals</h3>

<p>If you are bug hunting deep inside a gem or rails internals, and are trying to pry into a module that is loaded many times before it hits the buggy line of code, a simple <code>binding.pry</code> will have you stepping through an impossible amount of setup. Try setting a global variable to <code>true</code> right before the buggy line, and <code>binding.pry</code> on that condition:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>âžœ  api_playground  zeus <span class="nb">test</span> /Users/keighty/api_playground/test/models/user_test.rb -n &amp;ldquo;/test_user_description_has_full_name/&amp;rdquo;
</span><span class='line'>Run options: -n /test_user_description_has_full_name/ &amp;mdash;seed 28811&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Running:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;From: /Users/keighty/api_playground/app/models/user.rb @ line 5 User#full_name:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;2: def full_name
</span><span class='line'>3:   <span class="nv">$bedug</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>4:   <span class="s2">&quot;#{first_name} #{last_name}&quot;</span>
</span><span class='line'>5:   binding.pry <span class="k">if</span> <span class="nv">$bedug</span>
</span><span class='line'>6: end
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A global will maintain its state no matter how many times the code is loaded, so be sure to set the variable to false if you are stepping past the first break.</p>

<h3>Caller</h3>

<p>Calling <code>caller</code> at a pry prompt will output the current execution stack:</p>

<p>
<code>
[1] pry(#&lt;User&gt;)&gt; caller
=&gt; ["/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:355:in `eval'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:355:in `evaluate_ruby'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:323:in `handle_line'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:243:in `block (2 levels) in eval'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:242:in `catch'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:242:in `block in eval'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:241:in `catch'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:241:in `eval'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/repl.rb:77:in `block in repl'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/repl.rb:67:in `loop'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/repl.rb:67:in `repl'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/repl.rb:38:in `block in start'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/input_lock.rb:61:in `call'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/input_lock.rb:61:in `__with_ownership'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/input_lock.rb:79:in `with_ownership'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/repl.rb:38:in `start'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/repl.rb:15:in `start'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_class.rb:169:in `start'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/core_extensions.rb:43:in `pry'",
 "/Users/keighty/api_playground/app/models/user.rb:5:in `full_name'",
 "/Users/keighty/api_playground/test/models/user_test.rb:6:in `test_user_description_has_full_name'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:108:in `block (3 levels) in run'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:206:in `capture_exceptions'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:105:in `block (2 levels) in run'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:258:in `time_it'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:104:in `block in run'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest.rb:327:in `on_signal'",
:
</code>
</p>

<p><code>caller</code> is a <a href="http://www.ruby-doc.org/core-2.2.0/Kernel.html#method-i-caller">Kernel method</a>. Pass a start line and a line limit to truncate the stack:</p>

<p>
<code>
[11] pry(#&lt;User&gt;)&gt; caller(20, 5)
=&gt; ["/Users/keighty/api_playground/app/models/user.rb:5:in `full_name'",
 "/Users/keighty/api_playground/test/models/user_test.rb:6:in `test_user_description_has_full_name'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:108:in `block (3 levels) in run'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:206:in `capture_exceptions'",
 "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:105:in `block (2 levels) in run'"]
</code>
</p>

<p>The first 20 or so lines are usually from the pry session so they are easily ignored. I can see that the User.full_name method is being called from my test &mdash; a trivial case, but it comes in very handy when debugging a deeper stack.</p>

<h3>Errors</h3>

<p>When models have many association dependencies, satisfying the validations of many dependencies can be tricky without descriptive errors. In Rails 3.2, the error storage was changed from an <a href="http://www.rubydoc.info/docs/rails/3.0.0/ActiveModel/Errors">OrderedHash</a> to a first class ruby object in <a href="http://www.rubydoc.info/docs/rails/3.2.8/ActiveModel/Errors">ActiveModel</a>. While the interface has changed, its value remains:</p>

<p>
```
[1] pry(main)> user = User.create
=> #&lt;User:0x007fa054525318
 id: nil,
 first_name: nil,
 last_name: nil,
 email: nil,
 created_at: nil,
 updated_at: nil></p>

<h1>Why does my object not have an id?</h1>

<p>[2] pry(main)> user.errors
=> #&lt;ActiveModel::Errors:0x007fa05451fda0
 @base=
  #&lt;User:0x007fa054525318
   id: nil,
   first_name: nil,
   last_name: nil,
   email: nil,
   created_at: nil,
   updated_at: nil>,
 @messages={:first_name=>[&ldquo;can&rsquo;t be blank&rdquo;], :last_name=>[&ldquo;can&rsquo;t be blank&rdquo;]}></p>

<p>[3] pry(main)> user.errors.full_messages
=> [&ldquo;First name can&rsquo;t be blank&rdquo;, &ldquo;Last name can&rsquo;t be blank&rdquo;]</p>

<h1>oooooh&hellip; validations</h1>

<p>```
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scopes and Single Table Inheritance]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/scopes-and-single-table-inheritance/"/>
    <updated>2015-01-22T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/scopes-and-single-table-inheritance</id>
    <content type="html"><![CDATA[<p>Single table inheritance (STI) is a way to emulate object-oriented inheritance in a relational database<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> by storing multiple object types in one table, distinguishable by a discriminator column such as <code>type</code>. Mixing levels of abstraction may make <code>join</code> operations easier, but it also makes other queries more complicated. In Rails 3.2, a query optimization was introduced that had some unintended consequences for STI.</p>

<!--more-->


<p>A scope represents a narrowing of a database query, and a named scope is syntactic sugar for defining a class method at runtime.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Shirt</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:in_style</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">purchase_date</span> <span class="o">&gt;=</span> <span class="p">?</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="mi">2</span><span class="o">.</span><span class="n">months</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class PoloShirt &amp;lt; Shirt</span>
</span><span class='line'><span class="sr">  scope :red, &amp;ndash;&gt; { where(color: &amp;lsquo;red&amp;rsquo;) }</span>
</span><span class='line'><span class="sr">  scope :blue, &amp;ndash;&gt; { where(color: &amp;lsquo;blue&amp;rsquo;) }</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">SweatShirt</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Shirt</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:logo</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">logo</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">dragon</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">)}</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;PoloShirt.red.in_style</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The scope <code>:in_style</code> is converted into a class method behind the scenes at runtime, and is defined on the singleton class where the scope was named, not on the caller. While this detail has no consequences for objects outside of an inheritance scheme, it means that when PoloShirt invokes the <code>:in_style</code> scope, the class method is declared on Shirt, not PoloShirt.</p>

<p>Here is where the history lesson begins. Scopes have evolved in Rails, and while they remain syntactic sugar for definition class methods, the details, method signature, and sql translation have differed dramatically.</p>

<p>In <a href="http://www.rubydoc.info/docs/rails/3.0.0/ActiveRecord/NamedScope/ClassMethods:scope">Rails 3.0</a>, the scope method accepts a name, scope_options, and optional block. Scopes are directly translated into class methods behind the scenes, and the consequences of chaining scopes are the same as chaining queries, just nicer looking.</p>

<p>
<code>
PoloShirt.red.in_style.to_sql
=&gt; SELECT * from shirts WHERE color = 'red' where type = 'PoloShirt' where purchase_date &gt;= 1417102745 where type IN ('PoloShirt', 'Sweatshirt')
</code>
</p>

<p>Notice the implicit <code>where</code> clause in STI. The <code>:red</code> scope, declared on PoloShirt has <code>where type = 'PoloShirt'</code>, and the <code>:in_style</code> scope, declared on Shirt, has <code>where type IN ('PoloShirt', 'Sweatshirt')</code>. The second <code>where</code> clause will have no impact on the query results, because they are already scoped to &lsquo;PoloShirt&rsquo;. It is this behaviour that evolves over time.</p>

<p>The first jump in <code>scope</code> evolution is in <a href="http://www.rubydoc.info/docs/rails/3.2.8/ActiveRecord/Scoping/Named/ClassMethods:scope">Rails 3.2</a>, where the scope_options can include lambdas. Passing a lambda is a big advantage in that it allows the scope to be re-evaluated each time it is called. Unfortunately the implementation also remixes the query parameters of all chained scopes before evaluation:</p>

<blockquote><p>In nested scopings, all previous parameters are overwritten by the innermost rule, with the exception of <code>where</code>, <code>includes</code>, and <code>joins</code> operations in Relation, which are merged.</p></blockquote>

<p>
<code>
PoloShirt.red.in_style.to_sql
=&gt; SELECT * from shirts where color = 'red' where purchase_date &gt;= 1417102745 where type IN ('PoloShirt', 'Sweatshirt')
</code>
</p>

<p>The first <code>where type =</code> clause is merged with the last <code>where type IN</code> clause. The results of this query will no longer be scoped to PoloShirts, but will return all <code>red.in_style</code> Shirts of any type. Bad news for STI.</p>

<p>The good news is that this behaviour is <a href="https://github.com/rails/rails/commit/cd26b6ae">fixed</a> in <a href="http://www.rubydoc.info/docs/rails/4.0.0/ActiveRecord/Scoping/Named/ClassMethods#scope-instance_method">Rails 4.0</a>. The latest evolution of scopes no longer allow you to pass a non-callable object (like a hash), and all scopes are merged using AND.</p>

<p>
<code>
PoloShirt.red.in_style.to_sql
=&gt; SELECT * from shirts where color = 'red' where purchase_date &gt;= 1417102745 where type = 'PoloShirt' AND type IN ('PoloShirt', 'Sweatshirt')
</code>
</p>

<p>Our <code>red.in_style</code> query is once again scoped to the right level of the inheritance heirarchy. Named scopes are chainable and lazy-evaluated, making them a powerful query-building tool that can be difficult to troubleshoot &mdash; especially when they are mixed with single-table inheritance.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://en.wikipedia.org/wiki/Single_Table_Inheritance<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
