<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDD | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2014-01-12T11:26:33-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[I Admit It, I Love TDD]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/TDD-is-the-way-to-be/"/>
    <updated>2013-06-14T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/TDD-is-the-way-to-be</id>
    <content type="html"><![CDATA[<p>This week @PDXcodeschool we jumped into TDD using minitest/autorun. I have
used RSpec in the past, and loved the way it let me manage the logic of my project.
I love that ruby has a built in framework &mdash; so easy to use!</p>

<ul>
<li><p>Use specs to rough out project logic
{% highlight ruby %}
describe &ldquo;Car&rdquo; do
it &lsquo;should have a color&rsquo;
it &lsquo;should have a make&rsquo;
it &lsquo;should have a unique serial number&rsquo;
it &lsquo;should get a new serial number when it gets stolen&rsquo;
it &lsquo;should accept passengers&rsquo;
it &lsquo;should not accept more than 3 passengers&rsquo;
end
{% endhighlight %}
All of these tests will be skipped until they are followed by a do&hellip;end block.</p></li>
<li><p>Take one test at a time and write the code to make it pass
{% highlight ruby %}
describe &ldquo;Car&rdquo; do
it &lsquo;should have a color&rsquo; do
  car = Car.new(&ldquo;black&rdquo;)
  car.color.must_equal &ldquo;black&rdquo;
end
&hellip;
end
{% endhighlight %}
If your tests exercise the project well enough, you end up with really tight code.
More of a lasagna noodle than spaghetti!</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
