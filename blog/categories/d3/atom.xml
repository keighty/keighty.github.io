<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: D3 | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/d3/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2014-03-01T10:13:13-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Binding Functions as Data]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/binding-functions-as-data/"/>
    <updated>2014-02-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/binding-functions-as-data</id>
    <content type="html"><![CDATA[<p>Primitives and object literals are not the only things you can bind to a D3 visualization. After all, aren&rsquo;t javascript functions objects as well?</p>

<p>```javascript
var data = [];
var next = function(x) { return 15 + x*x };
var newData = function() { data.push(next); return data; }
var selection = d3.select(&ldquo;#container&rdquo;)</p>

<pre><code>              .selectAll("div")
              .data(newData);
</code></pre>

<p>&hellip;</p>

<pre><code>              .select("#span")
                .text(function(d, i) { return d(i); });
</code></pre>

<p>```</p>

<p>If you provide a function to the data function, D3 will simply invoke the function and use the returned value as a parameter of the data function.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implied Functions Applied]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/implied-functions-applied/"/>
    <updated>2014-02-26T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/implied-functions-applied</id>
    <content type="html"><![CDATA[<p>When binding a primitive datum to a node in a D3 visualization, the callback function can be implicitly called on the datum without the typical verbosity<!--more-->:</p>

<p>```javascript
svg.selectAll(&ldquo;circle&rdquo;)</p>

<pre><code>.data([32, 57, 112, 293])
</code></pre>

<p>  .enter().append(&ldquo;circle&rdquo;)</p>

<pre><code>.attr("cy", 90)
.attr("cx", String)
.attr("r", Math.sqrt);
</code></pre>

<p>```</p>

<p>In line 5, String() is performed on the data element, as is Math.sqrt in line 6, with the same result as:</p>

<p>```
svg.selectAll(&ldquo;circle&rdquo;)</p>

<pre><code>.data([32, 57, 112, 293])
</code></pre>

<p>  .enter().append(&ldquo;circle&rdquo;)</p>

<pre><code>.attr("cy", 90)
.attr("cx", function(d) {
  return String(d);
})
.attr("r", function(d) {
  return Math.sqrt(d);
});
</code></pre>

<p>```</p>

<p>&hellip; but better.</p>

<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="http://mbostock.github.io/d3/tutorial/circle.html">Three Little Circles D3 Tutorial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enter Update Exit]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/enter-update-exit/"/>
    <updated>2014-02-25T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/enter-update-exit</id>
    <content type="html"><![CDATA[<p>D3 is a data visualization tool that uses method chaining to produce big pictures with little code. The selection library performs a full Outer Join between the data (D) and the visual elements (V), and the enter-update-exit pattern performs work on subsets of this join<!--more-->:</p>

<h3>UPDATE: Inner Join (D union V)</h3>

<p><code>
selection.data(data_points)
</code>
data() binds data_points to the html or svg elements returned by the selection and returns the data not visualized.</p>

<h3>ENTER: Left excluding join (D/V)</h3>

<p><code>
selection.data(data_points).enter()
</code>
enter() returns data_points that are not yet represented visually by html or svg. Chain .append() to add a new element to the page.</p>

<h3>EXIT: Right excluding join (V/D)</h3>

<p><code>
selection.data(data_points).exit()
</code>
exit() returns html or svg elements that no longer have data associated with them. Chain .remove() to eliminate them, or .translate() to make them slide off the page.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>

<p><a href="http://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins">Visual Representation of SQL Joins</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[D3 Is Selective]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/d3-is-selective/"/>
    <updated>2014-02-21T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/d3-is-selective</id>
    <content type="html"><![CDATA[<p>D3 uses the W3C standard selector library, and selection modifiers work on both single and multiple element selections, and will automatically apply the modifier iteratively over the entire collection, which makes your code simpler and easier to maintain.</p>

<!--more-->


<h4>Selection modifiers</h4>

<ul>
<li><strong>d3.select(&lsquo;p&rsquo;).text()</strong>     : retrieve or modify text</li>
<li><strong>d3.select(&lsquo;p&rsquo;).attr()</strong>     : retrieve or modify a given attribute</li>
<li><strong>d3.select(&lsquo;p&rsquo;).classed()</strong>  : retrieve or modify css classes</li>
<li><strong>d3.select(&lsquo;p&rsquo;).style()</strong>    : retrieve or modify styles</li>
<li><strong>d3.select(&lsquo;p&rsquo;).html()</strong>     : retrieve or modify a selections inner html (like text but with tags)</li>
</ul>


<p>```
d3.selectAll(&lsquo;div&rsquo;)</p>

<pre><code>        .attr("class", "alert")
        .each(function(d, i) {
          d3.select(this).append("h1").text(i);
        });
</code></pre>

<p>```</p>

<p>Selections are essentially arrays with some extra variables baked in. The <code>.each</code> call on line 3 treats the selected elements as an array, and performs a function on each one. The extra variables provided to the iterator function for free are: the data bound to the element (d), the index of the element, and the element itself (this).</p>

<p>Awesome</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Arguing]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/functional-arguing/"/>
    <updated>2014-02-20T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/functional-arguing</id>
    <content type="html"><![CDATA[<p>The <code>arguments</code> variable is a hidden parameter in javascript functions that contains all the arguments for the invocation in a pseudo-array (ie: it does not have array functions other than length and indexing).</p>

<p><code>javascript
instance.headline = function (h) {
  if (!arguments.length) return headline;
  headline = h;
  return instance;
};
</code>
Even though the function specifically calls for an argument (<code>h</code>), it can still be called without one. This construction has a ruby equivalent, <code>attr_accessor :headline</code>, which behaves as a getter and a setter, depending on the arguments provided (none, or <code>headline = new_value</code>).</p>

<p>This &ldquo;variable-parameter&rdquo; function design is what enables method chaining. When the function is called as a getter it returns a string, but when it is called as a setter it returns the invoking object, passing itself along to the next method:</p>

<p>```javascript
var widget = SimpleWidget({ color: &ldquo;#6439ed&rdquo; })</p>

<pre><code>            .headline("SimpleWidget")
            .description("This is a simple widget")
            .render();
</code></pre>

<p>```</p>

<!--more-->


<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
</feed>
