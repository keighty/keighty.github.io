<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: D3 | keighty]]></title>
  <link href="http://www.katieleonard.ca/blog/categories/d3/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-02-24T08:26:12-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Formatting Numbers the Easy Way]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/formatting-numbers-the-easy-way/"/>
    <updated>2014-08-23T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/formatting-numbers-the-easy-way</id>
    <content type="html"><![CDATA[<p>D3 has an awesome number formatting function that I discovered only after hacking my own. My first approach was to use string and array manipulation to convert 1234567890 to 1,234,567,890:</p>

<p>
`&ldquo;javascript
function numberSmoothing(value) {
  // split the number into a character array and reverse it
  reversedNumber = (value).toString().split(&rdquo;).reverse();</p>

<p>  // [&ldquo;0&rdquo;, &ldquo;9&rdquo;, &ldquo;8&rdquo;, &ldquo;7&rdquo;, &ldquo;6&rdquo;, &ldquo;5&rdquo;, &ldquo;4&rdquo;, &ldquo;3&rdquo;, &ldquo;2&rdquo;, &ldquo;1&rdquo;]</p>

<p>  // push the numbers onto another array in groups of 3 and add a comma
  chunkedNumber = [];
  while(reversedNumber.length > 3) {</p>

<pre><code>var numberChunk = reversedNumber.splice(3);
chunkedNumber.push(reversedNumber.join('') + ',');
reversedNumber = numberChunk;
</code></pre>

<p>  }</p>

<p>  // push the remaining digits onto the array
  chunkedNumber.push(reversedNumber.join(&lsquo;&rsquo;));</p>

<p>  // [&ldquo;098,&rdquo;, &ldquo;765,&rdquo;, &ldquo;432,&rdquo;, &ldquo;1&rdquo;]</p>

<p>  // reverse each of the strings in the array and rejoin them
  for(var j = 0; j &lt; chunkedNumber.length; j++){</p>

<pre><code>chunkedNumber[j] = chunkedNumber[j].split('').reverse().join('');
</code></pre>

<p>  }</p>

<p>  // [&ldquo;,890&rdquo;, &ldquo;,567&rdquo;, &ldquo;,234&rdquo;, &ldquo;1&rdquo;]</p>

<p>  return chunkedNumber.reverse().join(&lsquo;&rsquo;);
}</p>

<blockquote><p>numberSmoothing(1234567890)
&ldquo;1,234,567,890&rdquo;</p></blockquote>

<p>```
</p>

<p>While it was a fun mental exercise to implement number formatting, I stumbled across this handy d3 function after I was already done:</p>

<p>
```</p>

<blockquote><p>var format = d3.format(&ldquo;,&rdquo;);
format(1234567890);
&ldquo;1,234,567,890&rdquo;
```
</p></blockquote>

<p>As it turns out, any way one might want to format a number has <a href="https://github.com/mbostock/d3/wiki/Formatting#d3_format">already been implemented in d3</a>. It is similar to the mini-formatting language from python:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[â€‹[fill]align][sign][symbol][0][width][,][.precision][type]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
```javascript
// add commas for the thousands separator</p>

<blockquote><p>var format = d3.format(&lsquo;,&rsquo;)
format(1234567890)
&ldquo;1,234,567,890&rdquo;</p></blockquote>

<p>// add a sign for positive and negative numbers</p>

<blockquote><p>var format = d3.format(&lsquo;+,&rsquo;)
format(1234567890)
&ldquo;+1,234,567,890&rdquo;</p>

<p>format(-1234567890)
&ldquo;-1,234,567,890&rdquo;</p></blockquote>

<p>// add a currency sign</p>

<blockquote><p>var format = d3.format(&lsquo;+$,&rsquo;)
format(1234567890)
&ldquo;+$1,234,567,890&rdquo;</p></blockquote>

<p>// as a percentage</p>

<blockquote><p>var format = d3.format(&lsquo;p&rsquo;)
format(1/6)
&ldquo;16.666666666666664%&rdquo;</p></blockquote>

<p>// as a rounded percentage</p>

<blockquote><p>var format = d3.format(&lsquo;%&rsquo;)
format(1/6)
&ldquo;17%&rdquo;</p></blockquote>

<p>// as a percent rounded to a single sig fig</p>

<blockquote><p>var format = d3.format(&lsquo;.1%&rsquo;)
format(1/6)
&ldquo;16.7%&rdquo;</p></blockquote>

<p>// as a rounded value</p>

<blockquote><p>var format = d3.format(&lsquo;.2r&rsquo;)
format(123.456)
&ldquo;120&rdquo;</p>

<p>format(123456789.66)
&ldquo;120000000&rdquo;</p></blockquote>

<p>// as a rounded, comma separated value</p>

<blockquote><p>var format = d3.format(&lsquo;,.2r&rsquo;)
format(123456789.66)
&ldquo;120,000,000&rdquo;
```
</p></blockquote>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Line, Spline]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/line-spline/"/>
    <updated>2014-03-20T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/line-spline</id>
    <content type="html"><![CDATA[<p>D3 lines are rendered using linear interpolation by default. This means that the line connecting a series of points will trace a direct path from one node to another:</p>

<div id="graph-here">
  <script src="http://mbostock.github.com/d3/d3.v2.min.js"></script>
  <script>
var width = 400,
    height = 400,
    margin = 5,
    scalex = d3.scale.linear().domain([0, 7]).range([margin, width - margin]),
    scaley = d3.scale.linear().domain([0, 7]).range([height - margin, margin]);

var data = [
  [
      {x: 0, y: 5},{x: 1, y: 7},{x: 2, y: 5},
      {x: 3, y: 5},{x: 4, y: 3},{x: 6, y: 4},
      {x: 7, y: 2}
  ],
  [
      {x: 0, y: 3},{x: 1, y: 5},{x: 2, y: 3},
      {x: 3, y: 3},{x: 4, y: 1},{x: 6, y: 2},
      {x: 7, y: 1}
  ]
];

var straightLine = d3.svg.line()
        .interpolate("linear")
        .x(function(d){return scalex(d.x);})
        .y(function(d){return scaley(d.y);});
var smoothLine = d3.svg.line()
        .interpolate("cardinal")
        .x(function(d){return scalex(d.x);})
        .y(function(d){return scaley(d.y);});

var svg = d3.select("#graph-here").append("svg");

  svg.attr("height", height)
      .attr("width", width);

   svg.selectAll("path")
        .data(data)
      .enter()
        .append("path")
        .attr("class", "line")
        .attr("fill", "none")
        .attr("stroke", "blue")
        .attr("stroke-width", 2)
        .attr("d", function(d, i){
          if(i % 2 === 0) return straightLine(d);
          return smoothLine(d)
        });

    svg.selectAll("textPath").data(data)
      .enter()
        .append("text")
        .attr("x", function(d) { return scalex(d[d.length-2].x); })
        .attr("y", function(d) { return scaley(d[d.length-2].y); })
        .attr("text-anchor", "end")
        .text(function(d, i) {
          if(i % 2 === 0) return "Straight Lines";
          return "Smooth Lines";
        });

  </script>
</div>


<p>The curved line is rendered with the cardinal interpolator, one of several options D3 provides. The curvature of the line is called a <strong>spline</strong>. Splines are tools used by architects to draw curved lines, and the term was adopted by mathematicians to describe smooth, piecewise polynomial approximation:</p>

<blockquote><p>Splines are curves, which are usually required to be continuous and smooth&hellip; [The] join points are called knots. Splines with few knots are generally smoother than splines with many knots; however, increasing the number of knots usually increases the fit of the spline function to the data. Knots give the curve freedom to bend to more closely follow the data. &mdash;<a href="http://en.wikipedia.org/wiki/Spline_(mathematics">Wikipedia</a>)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delay Chained Transitions]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/delay-chained-transitions/"/>
    <updated>2014-03-15T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/delay-chained-transitions</id>
    <content type="html"><![CDATA[<p>Changing an element using multiple, chained transitions requires a little troubleshooting. You would think that just chaining them one after another would suffice:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Chained Transitions </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">selection</span><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">doubleR</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>But D3 does not wait for one transition to be complete before it begins the next one. Adding a delay will accomplish the desired transition chaining:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ACTUAL Chained Transitions <a href="https://gist.github.com/keighty/9508948">https://gist.github.com/keighty/9508948</a> Gist </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">selection</span><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">delay</span><span class="p">(</span><span class="mi">1700</span><span class="p">).</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">doubleR</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<div id="showme">
<style>
.axis path,
.axis line {
    fill: none;
    stroke: black;
    shape-rendering: crispEdges;
}

.axis text {
    font-family: sans-serif;
    font-size: 11px;
}
</style>
<script src="http://mbostock.github.com/d3/d3.v2.min.js"></script>
<script>

var width = 500,
    height = 500,
    margin = 50,
    data,
    dataFromCsv;

var scaleX=d3.scale.linear().domain([0,10]).range([margin,width-margin]);
var scaleY=d3.scale.linear().domain([0,10]).range([height-margin,margin]);

var svg=d3.select("#showme").append("svg")
      .attr("width",width)
      .attr("height",height);

function drawAxes() {
  var xAxis = d3.svg.axis()
    .scale(scaleX)
    .orient("bottom")
    .ticks(5)
    .tickSubdivide(1)
    .tickPadding(10)
    .tickFormat(function(d) { return d + " ticks"});

  var yAxis = d3.svg.axis()
    .scale(scaleY)
    .orient("left");

  svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0," + (height - margin) + ")")
    .call(xAxis);
  svg.append("text")
    .attr("class", "x label")
    .attr("text-anchor", "middle")
    .attr("x", width/2)
    .attr("y", height)
    .text("X-value");

  svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(" + margin + ",0)")
    .call(yAxis);
  svg.append("text")
    .attr("class", "y label")
    .attr("text-anchor", "middle")
    .attr("x", -height/2)
    .attr("y", 6)
    .attr("dy", ".75em")
    .attr("transform", "rotate(-90)")
    .text("Y-value");
}

dataFromCsv = [{ "Color": "#9467bd", "X": 1, "Y": 8, "Quantity": 91 },
{ "Color": "#1f77b4", "X": 9, "Y": 1, "Quantity": 32 },
{ "Color": "#1f77b4", "X": 3, "Y": 1, "Quantity": 67 },
{ "Color": "#bcbd22", "X": 5, "Y": 5, "Quantity": 63 },
{ "Color": "#9467bd", "X": 6, "Y": 6, "Quantity": 57 },
{ "Color": "#2ca02c", "X": 5, "Y": 10, "Quantity": 65 },
{ "Color": "#d62728", "X": 8, "Y": 2, "Quantity": 36 },
{ "Color": "#9467bd", "X": 2, "Y": 8, "Quantity": 82 },
{ "Color": "#bcbd22", "X": 4, "Y": 7, "Quantity": 69 },
{ "Color": "#9467bd", "X": 5, "Y": 3, "Quantity": 88 },
{ "Color": "#d62728", "X": 1, "Y": 5, "Quantity": 29 },
{ "Color": "#1f77b4", "X": 10, "Y": 7, "Quantity": 60 },
{ "Color": "#2ca02c", "X": 8, "Y": 5, "Quantity": 56 },
{ "Color": "#bcbd22", "X": 1, "Y": 6, "Quantity": 31 },
{ "Color": "#bcbd22", "X": 6, "Y": 5, "Quantity": 57 },
{ "Color": "#d62728", "X": 9, "Y": 6, "Quantity": 85 },
{ "Color": "indigo", "X": 9, "Y": 10, "Quantity": 70 },
{ "Color": "indigo", "X": 9, "Y": 10, "Quantity": 31 },
{ "Color": "#1f77b4", "X": 2, "Y": 4, "Quantity": 26 },
{ "Color": "#bcbd22", "X": 10, "Y": 5, "Quantity": 61 },
{ "Color": "#2ca02c", "X": 4, "Y": 2, "Quantity": 64 },
{ "Color": "#1f77b4", "X": 8, "Y": 9, "Quantity": 71 }];
function importData() {
  data = d3.nest()
          .key(function(d) { return d.Color; })
          .rollup(aggregateData)
          .entries(dataFromCsv);
  // drawElements();
  setInterval( drawElements, 4000 );
}

/***********************
  Draw circles, bind data, and move elements to final location
***********************/
function drawElements() {
  var selection = svg.selectAll("circle").data(data);

  selection.enter()
    .append("circle")
    .attr("cx",scaleX(0))
    .attr("cy",scaleY(0))
    .attr("r", 0)

  selection.transition().duration(1500)
      .attr("cx",getX)
      .attr("cy",getY)
      .attr("r", getR)
      .style("fill", getColor)
    .transition().delay(1500+200).duration(1500)
      .attr("r", doubleR);
}

/***********************
  Helper functions
***********************/
function getX(d)     { return scaleX(d.values.X); }
function getY(d)     { return scaleY(d.values.Y); }
function getR(d)     { return d.values.Quantity / 10; }
function doubleR(d)     { return d.values.Quantity / 5; }
function getColor(d) { return d.key; }
// Use D3 built in array functions to aggregate data
function aggregateData(d) {
  return {
    "X"       : d3.mean(d, function(e) { return +e.X; }),
    "Y"       : d3.median(d, function(e) { return +e.Y; }),
    "Quantity": d3.max(d, function(e) { return +e.Quantity; })
  };
}

drawAxes();
importData();
</script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easing Does It]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/easing-does-it/"/>
    <updated>2014-03-12T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/easing-does-it</id>
    <content type="html"><![CDATA[<p>With the possible exception of UFOs, things don&rsquo;t usually switch from being stationary to moving at maximum velocity without an intervening period of acceleration or deceleration. Similarly, it can be difficult to track elements on a web page that move from one position to another with no warning, or faster than the human eye can perceive. Enter easing functions: <!--more--></p>

<blockquote><p>&ldquo;<strong>Easing functions</strong> specify the rate of change of a parameter over time.&rdquo; &mdash;Robert Penner</p></blockquote>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Easy easing <a href="https://gist.github.com/keighty/9508948">https://gist.github.com/keighty/9508948</a> Gist </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">selection</span><span class="p">.</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">circle</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">cx</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="nx">scaleX</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">cy</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="nx">scaleY</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">r</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="nx">selection</span><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">ease</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">cubic</span><span class="o">-</span><span class="k">in</span><span class="o">-</span><span class="nx">out</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">cx</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">cy</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">r</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">fill</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">getColor</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The transition will act on the selection in the following ways:</p>

<ul>
<li>it will move the element from its starting x position of 0 to the x position defined by <code>getX()</code></li>
<li>it will move the element from its starting y position of 0 to the y position defined by <code>getY()</code></li>
<li>it will increase the element&rsquo;s radius from 0 to the radius returned from <code>getR()</code></li>
<li>it will gradually change the element&rsquo;s color using an ordinal color scale, from black to the color returned from <code>getColor()</code></li>
<li>all of this movement will be performed with a &ldquo;cubic-in-out&rdquo; easing function</li>
</ul>


<p>The cubic-in-out easing function is the standard D3 easing function. The element will increase velocity by a power of 3 until halfway down the path it is destined to trace. It will then decrease velocity by a power of 3 until it reaches its final location. There are many different types of easing functions. Check out the resources for more information, and ask your doctor which easing function is right for you!</p>

<h3>Resources</h3>

<p>Robert Penner&rsquo;s <a href="http://www.robertpenner.com/easing/">Easing Functions</a></p>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Value of Slow Transitions]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/the-value-of-transition/"/>
    <updated>2014-03-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/the-value-of-transition</id>
    <content type="html"><![CDATA[<h3>The Why</h3>

<p>From <a href="http://bost.ocks.org/mike/constancy/">Object Constancy</a> by Mike Bostock:</p>

<blockquote><p>Animated transitions are pretty, but they also serve a purpose: they make it easier to follow the data. This is known as <strong>object constancy</strong>: a graphical element that represents a particular data point&hellip; can be tracked visually through the transition. This lessens the cognitive burden by using <strong>preattentive processing</strong> of motion rather than sequential scanning of labels.</p></blockquote>

<p>(The emphasis is mine)</p>

<h3>The How</h3>

<p>Object constancy is achieved through object identity: the data is bound to it&rsquo;s object by a shared unique identifier. This allows D3 to reuse the object when the data set is updated. Object identity is achieved by passing a key function to the data() method at the time of data binding:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var data = [ // &lt;-A&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    {id: 0, value: "foo"},
</span><span class='line'>    {id: 1, value: "bar"},
</span><span class='line'>    {id: 2, value: "foo"},
</span><span class='line'>    {id: 3, value: "baz"},
</span><span class='line'>    {id: 4, value: "bar"}
</span><span class='line'>];
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>d3.selectAll(&ldquo;svg:g&rdquo;)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>.data(data, function(d){return d.id;});
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
