<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[keighty]]></title>
  <link href="http://www.katieleonard.ca/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2014-02-04T07:46:05-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Add -p]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/git-add-p/"/>
    <updated>2014-02-01T20:51:09-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/git-add-p</id>
    <content type="html"><![CDATA[<p>I learned a new tool that has quickly become an essential part of my workflow. <code>git add -p</code><!--more--> lets you add small hunks of modified code to the index from your working tree in order to prepare your next commit.</p>

<p>The best refactors are small atomic changes, and while I may not always work incrementally, I still want my git history to reflect the ideal. I use <code>git add -p</code> before every commit to ensure that each code change is intentional.</p>

<figure class='code'><figcaption><span>An example from my latest test project.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add -p
</span><span class='line'>diff --git a/send.rb b/send.rb
</span><span class='line'>index 5e89eaf..a0f25b6 100644
</span><span class='line'>--- a/send.rb
</span><span class='line'>+++ b/send.rb
</span><span class='line'>@@ -17,5 +17,5 @@ <span class="nv">queue</span> <span class="o">=</span> channel.queue<span class="o">(</span><span class="s2">&quot;hello&quot;</span><span class="o">)</span>
</span><span class='line'> channel.default_exchange.publish<span class="o">(</span><span class="s2">&quot;Hello world!&quot;</span>, :routing_key <span class="o">=</span>&gt; q.name<span class="o">)</span>
</span><span class='line'> puts <span class="s2">&quot; [x] Sent &#39;Hello World!&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'>-# close the connection
</span><span class='line'>-conn.close
</span><span class='line'><span class="se">\ </span>No newline at end of file
</span><span class='line'>+#close the connection
</span><span class='line'>+connection.close
</span><span class='line'>Stage this hunk <span class="o">[</span>y,n,q,a,d,/,e,?<span class="o">]</span>?
</span></code></pre></td></tr></table></div></figure>


<p>Woah &mdash; that is a lot of information&hellip; lets go through by the numbers:</p>

<ol>
<li>the initial command</li>
<li>tells me that it is showing the changes made in the send.rb file. &lsquo;a&rsquo; is the version already in the commit history, and &lsquo;b&rsquo; is the copy in the working directory.</li>
<li>shows the commit SHA range for this branch</li>
<li>tells me that lines marked with a &lsquo;&ndash;&rsquo; are from the committed version of send.rb</li>
<li>tells me that lines marked with a &lsquo;+&rsquo; are from the working directory version of send.rb</li>
<li><code>@@ -17,5 +17,5 @@</code> indicates that the hunk under scrutiny begins at line 17 of the committed version (&lsquo;-17&rsquo;) and affects 5 lines. It corresponds to the working directory version starting at line 17 (&lsquo;+17&rsquo;), also affecting 5 lines.</li>
<li>the remaining lines contain the details of the changes in the hunk.</li>
</ol>


<h3>Know your options</h3>

<p>Now that you have a hunk, what can you do with it?</p>

<figure class='code'><figcaption><span>Type &#8216;?&#8217; to learn what you can do with your hunk</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>Stage this hunk <span class="o">[</span>y,n,q,a,d,/,e,?<span class="o">]</span> ?
</span><span class='line'>y - stage this hunk
</span><span class='line'>n - <span class="k">do </span>not stage this hunk
</span><span class='line'>q - quit, <span class="k">do </span>not stage this hunk nor any of the remaining ones
</span><span class='line'>a - stage this and all the remaining hunks in the file
</span><span class='line'>d - <span class="k">do </span>not stage this hunk nor any of the remaining hunks in the file
</span><span class='line'>g - <span class="k">select </span>a hunk to go to
</span><span class='line'>/ - search <span class="k">for </span>a hunk matching the given regex
</span><span class='line'>j - leave this hunk undecided, see next undecided hunk
</span><span class='line'>J - leave this hunk undecided, see next hunk
</span><span class='line'>k - leave this hunk undecided, see previous undecided hunk
</span><span class='line'>K - leave this hunk undecided, see previous hunk
</span><span class='line'>s - split the current hunk into smaller hunks
</span><span class='line'>e - manually edit the current hunk
</span><span class='line'>? - print <span class="nb">help</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first few options are obvious choices &mdash; <code>y</code> (&ldquo;Yes, please!&rdquo;), and <code>n</code> (&ldquo;What was I thinking there?&rdquo;), as well as <code>q</code> (&ldquo;Hey, Jane! Get me off this crazy thing!&rdquo;).</p>

<p>I haven&rsquo;t quite got a handle on the middle options, but I have skimmed down and used <code>s</code> to split the hunk into smaller pieces. Split will only divide a hunk if there is a logical place for separation, like a gap between changes. For real index-finesse and line-by-line control you have to&hellip; edit the hunk (gasp).</p>

<p>Seasoned veterans may blanch at the thought of editing a hunk without a GUI, but I have discovered the secret to command-line-hunk-editing-prowess. The secret is:</p>

<h2>Read the instructions</h2>

<p>Revisiting the earlier example, I choose <code>e</code> to edit my hunk. I think the original comment on line 10 is better than the new one on line 13 (spacy == better). Selecting <code>e</code> opens your editor of choice with the now familiar hunk, along with&hellip;</p>

<p>Lo, and behold! Instructions after the hunk!</p>

<p><img src="http://www.katieleonard.ca/images/addp-hunk-edit_diff-8.png"></p>

<p>Simple enough:</p>

<ul>
<li><code>-# close the connection</code> becomes <code># close the connection</code> &mdash; mind the space!</li>
<li>remove <code>+#close the connection</code> entirely</li>
<li>save and close.</li>
</ul>


<p>Success? If you have done everything right, the hunk will be staged and git will move on to the next hunk in your working directory. If you have made an error you will see the following message:</p>

<figure class='code'><figcaption><span>Type &#8216;?&#8217; to learn what you can do with your hunk</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Your edited hunk does not apply.
</span><span class='line'>Edit again <span class="o">(</span>saying <span class="s2">&quot;no&quot;</span> discards!<span class="o">)</span> <span class="o">[</span>y/n<span class="o">]</span>?
</span></code></pre></td></tr></table></div></figure>


<p>Aw nuts. <code>y</code> will let you amend your transgressions (did you remember to save? did you forget to leave a space in place of the &lsquo;&ndash;&rsquo;?), and <code>n</code> will abandon your changes and take you back to the drawing board, where you are free to transgress anew.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Retrieve: A Drama]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/git-retrieve/"/>
    <updated>2014-01-23T20:47:46-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/git-retrieve</id>
    <content type="html"><![CDATA[<p>Have you ever deleted a file on impulse, only to wake up with remorse later? It doesn&rsquo;t matter if later is the next morning or the next week, thanks to git you have the power to reanimate gone-but-not-forgotten files. Nothing is <del>ever</del> EVER lost with git. So how do you retrieve a file that has been deleted in a previous commit?</p>

<!--more-->


<p><a href="http://stackoverflow.com/a/953573">stackoverflow</a> has a few suggestions, and I like this one the best:</p>

<h3>Git Drama in Three Acts</h3>

<figure class='code'><figcaption><span>Act 1 Scene 1: foo.bar Folly</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/very_important_project/
</span><span class='line'><span class="nv">$ </span>touch readme.md index.html foo.bar
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s2">&quot;These changes are AWESOME.&quot;</span>
</span><span class='line'><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> 9155e0b<span class="o">]</span> These changes are AWESOME.
</span><span class='line'> 0 files changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'> create mode 100644 foo.bar
</span><span class='line'> create mode 100644 index.html
</span><span class='line'> create mode 100644 readme.md
</span></code></pre></td></tr></table></div></figure>


<p>but wait! <code>foo.bar</code>?! that is just crazy talk?</p>

<figure class='code'><figcaption><span>Act 1 Scene 2: Regret</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm foo.bar
</span><span class='line'>rm <span class="s1">&#39;foo.bar&#39;</span>
</span><span class='line'><span class="nv">$ </span>git add -u
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;I have made a huge mistake.&quot;</span>
</span><span class='line'><span class="o">[</span>master b045a52<span class="o">]</span> I have made a huge mistake.
</span><span class='line'> 0 files changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'> delete mode 100644 foo.bar
</span></code></pre></td></tr></table></div></figure>


<p>Everything seems back to normal!</p>

<figure class='code'><figcaption><span>Act 2 Scene 1: I have made good life-choices</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;#I rock and I am smug about it!&quot;</span> &gt; bar.rb
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s2">&quot;This work is the BOMB.&quot;</span>
</span><span class='line'><span class="o">[</span>master 3535f28<span class="o">]</span> This work is the BOMB.
</span><span class='line'> 0 files changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'> create mode 100644 bar.rb
</span><span class='line'><span class="nv">$ </span>cat foo.bar
</span><span class='line'>cat: foo.bar: No such file or directory you heartless creature!
</span></code></pre></td></tr></table></div></figure>


<p>but wait! there is no bar without a foo! where is my foo.bar? How can I find it? I have to find the commit where it was deleted, but how? What if I list out the commits that include a deleted file?</p>

<figure class='code'><figcaption><span>Act 2 Scene 2: Regret</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log --diff-filter<span class="o">=</span>D --summary
</span><span class='line'>commit b045a528b4a0824f63562cad867b264983b32c7c
</span><span class='line'>Author: keighty &lt;keighty.leonard@gmail.com&gt;
</span><span class='line'>Date:   Wed Jan 22 20:46:16 2014 -0800
</span><span class='line'>
</span><span class='line'>    I have made a huge mistake.
</span><span class='line'>
</span><span class='line'> delete mode 100644 foo.bar
</span></code></pre></td></tr></table></div></figure>


<p>There you are! in commit b045a528. The summary option shows the details, so you can see what files were deleted, when, and by whom. In some cases, there may be more than one change in a commit, so using <code>commitSHA~1 &lt;filename&gt;</code> will pluck the one precious deleted file from the commit and restore it to your working tree.</p>

<figure class='code'><figcaption><span>Act 3: foo.bar&#8217;s Return</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout b045a528~1 foo.bar
</span><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="c"># On branch master</span>
</span><span class='line'><span class="c"># Changes to be committed:</span>
</span><span class='line'><span class="c">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># new file:   foo.bar</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s2">&quot;Together at last, together forever.&quot;</span>
</span><span class='line'><span class="o">[</span>master 8492eac<span class="o">]</span> Together at last, together forever.
</span><span class='line'> 0 files changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'> create mode 100644 foo.bar
</span></code></pre></td></tr></table></div></figure>


<p>EXEUNT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongod Maintenance]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/maintaining-mongod/"/>
    <updated>2014-01-22T07:23:10-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/maintaining-mongod</id>
    <content type="html"><![CDATA[<p>My laptop&rsquo;s battery died, and I let it. Not a big deal, it is an old laptop and is used to being abused. Every time it does a hard shut down like that I wonder if it will recover. The laptop recovered just fine, but mongo did not. When my computer coughed back to life, I politely requested a meteor server, to which meteor replied that it could not start my server because it could not find a running mongodb. My first instinct, naturally, was to start it up again<!--more-->:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mongo start
</span><span class='line'>MongoDB shell version: 2.4.6
</span><span class='line'>connecting to: start
</span><span class='line'>Mon Jan 20 07:42:47.289 Error: couldn<span class="err">&#39;</span>t connect to server 127.0.0.1:27017 at src/mongo/shell/mongo.js:145
</span><span class='line'>exception: connect failed
</span></code></pre></td></tr></table></div></figure>


<p>Followed by a trip to the logs:</p>

<figure class='code'><figcaption><span>This error has been reformatted to fit your tv.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tail /var/log/mongodb/mongodb.log
</span><span class='line'>*************
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> exception in initAndListen: 10309 Unable to create/open lock file: /var/lib/mongodb/mongod.lock errno:13 Permission denied Is a mongod instance already running?, terminating
</span><span class='line'>dbexit:
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> shutdown: going to close listening sockets...
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> shutdown: going to flush diaglog...
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> shutdown: going to close sockets...
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> shutdown: waiting <span class="k">for </span>fs preallocator...
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> shutdown: closing all files...
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> closeAllFiles<span class="o">()</span> finished
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> shutdown: removing fs lock...
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> couldn<span class="err">&#39;</span>t remove fs lock errno:9 Bad file descriptor
</span><span class='line'>dbexit: really exiting now
</span></code></pre></td></tr></table></div></figure>


<p>A lock file, you say? Well! I know what to do with those!</p>

<figure class='code'><figcaption><span>Are you sure you want to mess with this?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rm /var/lib/mongodb/mongod.lock
</span><span class='line'>rm: remove write-protected regular file <span class="sb">`</span>/var/lib/mongodb/mongod.lock<span class="err">&#39;</span>? n
</span></code></pre></td></tr></table></div></figure>


<p>No, I am not sure &mdash; thanks for asking! After a deep breath and a reminder that I should not be so hasty (rtfm, katie), I found this note on <a href="http://docs.mongodb.org/manual/reference/configuration-options/#repair">mongodb.org</a>:</p>

<blockquote><p>Note: Because mongod rewrites all of the database files during the repair routine, if you do not run repair under the same user account as mongod usually runs, you will need to run chown on your database files to correct the permissions before starting mongod again.</p></blockquote>

<p>A file rewrite will include a lock file, will it not?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo -u mongodb mongod --repair --dbpath /var/lib/mongodb/
</span><span class='line'><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for </span>keighty:
</span><span class='line'>...
</span><span class='line'>sudo service mongodb start
</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embrace HRT for Collabrative Nirvana]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/embrace-hrt-for-collabrative-nirvana/"/>
    <updated>2014-01-20T07:07:15-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/embrace-hrt-for-collabrative-nirvana</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/1449302440/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1449302440&amp;linkCode=as2&amp;tag=keighty-20">Team Geek: A Software Developer&rsquo;s Guide to Working Well with Others</a> by Brian W. Fitzpatrick and Ben Collins-Sussman.</p>

<p>With decades of collective experience, these two authors distill the essential philosophy required to be part of a healthy development team: HRT &mdash; humility, respect, and trust. These values are covered in the first chapter and the remainder of the book describes how to best use them as an engineer and as a manager. Some techniques particularly resonated with my world view.<!--more--></p>

<h3>Fail early. Fail fast. Fail often</h3>

<p>It is easy to pay lip-service to this philosophy, but it is impossible to adopt without a culture of HRT. From my own limited experience I can add &mdash; Communicate early. Communicate fast. Communicate often. &mdash; as another mantra of healthy team dynamics. Failure is always an option, but without HRT and open lines of communication it can take much more time to discover.</p>

<h3>Make time vs manager time</h3>

<p>Fitzpatrick and Collins-Sussman drew on a lot of great resources, and there is as much gold in the footnotes as there is in the text. They referenced Paul Graham&rsquo;s essay, <a href="http://www.paulgraham.com/makersschedule.html">Maker&rsquo;s Schedule</a>, in which he contrasts the different working styles of managers and makers (writers or programmers). The manager&rsquo;s schedule can be divided into hour-long chunks that may be apportioned to meetings, appointments, or tasks.: the essence of David Allen&rsquo;s <a href="http://www.davidco.com/about-gtd">GTD</a> (Getting Things Done). Makers, on the other hand, cannot be effective in one hour intervals. Graham writes that a single meeting in the afternoon can affect the productivity for a whole day. First it breaks up the afternoon into two pieces that are not long enough to really get into the zone, then it psychologically leaks into the morning where you are &ldquo;less likely to start something ambitious&rdquo;. I can definitely identify with this propensity. The cost of task switching around meetings often results in a lost day.</p>

<h3>Core values</h3>

<p>HRT is the heart of high-functioning teams of any ilk. When I was interviewing for my first job in software development (all those weeks ago) the most difficult question an interviewer could pose to me was &ldquo;where do you see yourself in 5 years&rdquo;? It was difficult because I had just spent the last five years dreaming about writing code for a living. I couldn&rsquo;t even verbalize what I was looking for in a company, only that I would know it when I met it. Now I can identify the traits I was looking for: teams that value writing code and shipping product, consensus based team decision making, asynchronous communication (I am not room-meat), and of course, they&rsquo;ve got to have HeaRT.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open-source Setup:]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/opensource-setup-git-checkout-the-ego/"/>
    <updated>2014-01-18T11:18:29-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/opensource-setup-git-checkout-the-ego</id>
    <content type="html"><![CDATA[<h2><code>git checkout</code> the Ego.</h2>

<p>In the interests of giving back to the software community, I have been looking for an active open-source project to contribute to. I am working to gain mastery of ruby on rails, so naturally I gravitate towards projects of that ilk. Unfortunately, I have gained just enough knowledge to be a little smug, so when I found a project I wanted to work on I scrolled immediately to the README and started scanning.<!--more--> The first block of text was headed by:</p>

<h3>Start here if this is your first ruby on rails project&hellip;</h3>

<p>&hellip;with a link to a blog post. I kept scanning for information that would be relevant to ME. This was not my first ruby on rails project. I have my elaborate dev environment set up just the way I like it, thank you very much, and I can reproduce your project with a flick of my config file, I am sure (chuckles condescendingly). This is a snippet of the proceeding workflow:</p>

<figure class='code'><figcaption><span>Workflow of the egotistical programmer.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone repo
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>repo/
</span><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'>Errors: need to update your rubygems
</span><span class='line'><span class="nv">$ </span>gem update --system
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:setup
</span><span class='line'>Errors: need postgres installed <span class="o">(</span>no inkling in the README<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>brew install postgres
</span><span class='line'>... follow half of the required instructions
</span><span class='line'>Errors
</span><span class='line'>Frustration because you don<span class="err">&#39;</span>t know how to follow instructions
</span><span class='line'><span class="nv">$ </span>brew info postgres
</span><span class='line'>...
</span><span class='line'><span class="s2">&quot;ooooohhhhhhhh... I missed a step&quot;</span>
</span><span class='line'><span class="nv">$ </span>follow instructions this <span class="nb">time</span>
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:setup
</span><span class='line'>Errors: need redis installed
</span><span class='line'><span class="nv">$ </span>brew install redis
</span><span class='line'><span class="nv">$ </span>follow instructions because I have learned my lesson
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:setup
</span><span class='line'>Errors: redis config file missing information
</span><span class='line'>Frustration because redis config file was removed 100 commits ago
</span><span class='line'>...
</span><span class='line'>Determine that first pull request
</span><span class='line'>will be an amendment to setup documentation
</span><span class='line'>Rebuild config file and add host name
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:setup
</span><span class='line'>Errors: required seeds file was removed 100 commits ago
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:migrate
</span><span class='line'><span class="nv">$ </span>SUCCESS!!!
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake spec
</span><span class='line'>Errors: run db:test:prepare
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:test:prepare
</span><span class='line'>Errors
</span><span class='line'>Frustration
</span><span class='line'><span class="nv">$ RAILS_ENV</span><span class="o">=</span><span class="nb">test </span>bundle <span class="nb">exec </span>rake db:migrate
</span><span class='line'><span class="nv">$ </span>SUCCESS!!
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake spec
</span><span class='line'>Errors... sigh.. more errors
</span><span class='line'><span class="nv">$ </span>limp away <span class="k">for </span>lunch, live to contribute another day
</span></code></pre></td></tr></table></div></figure>


<p>Getting a new project setup and functional is not an easy chore, and I was quite chastened when I swallowed my pride and checked out the blog post for first timers, which boiled down to:</p>

<ol>
<li>Install <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a></li>
<li>Install <a href="http://www.vagrantup.com/">Vagrant</a></li>
<li><code>git clone repo</code></li>
<li><code>cd repo</code></li>
<li><code>vagrant up</code></li>
<li><code>vagrant ssh</code></li>
<li><code>cd /vagrant</code></li>
<li><code>bundle install</code></li>
<li><code>bundle exec rake db:migrate</code></li>
<li><code>bundle exec rails s</code></li>
</ol>


<p>I could have been contributing hours ago, when I still had momentum! Perhaps my first pull request should still be to modify the README. I would rephrase the heading to read &ldquo;For all developers: get started right here&rdquo;, and then remove every other instruction that followed.</p>

<p>Perhaps I should go get started&hellip;</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor User]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/meteor-user/"/>
    <updated>2014-01-14T19:38:16-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/meteor-user</id>
    <content type="html"><![CDATA[<p><a href="http://www.packtpub.com/getting-started-with-meteor-javascript-framework/book">&ldquo;Getting Started with Meteor.js JavaScript Framework&rdquo;</a> by Isaac Strack is a great introduction to a powerful tool.</p>

<!--more-->


<h3>User accounts in three easy steps</h3>

<p>Meteor rolls its own user accounts system, and getting it running on your application is a three step process:</p>

<figure class='code'><figcaption><span>1) command line: Add the relevant packages</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>meteor add accounts-base
</span><span class='line'>accounts-base: A user account system
</span><span class='line'><span class="nv">$ </span>meteor add accounts-password
</span><span class='line'>accounts-password: Password support <span class="k">for </span>accounts
</span><span class='line'><span class="nv">$ </span>meteor add email
</span><span class='line'>email: Send email messages
</span><span class='line'><span class="nv">$ </span>meteor add accounts-ui
</span><span class='line'>accounts-ui: Simple templates to add login widgets to an app
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>2) html: Add a div to hold the login button</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;float:right; margin-right:20px;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {{loginButtons align=&quot;right&quot;}}
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>3) client javascript: Add an Accounts config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Accounts</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">passwordSignupFields</span><span class="o">:</span> <span class="s1">&#39;USERNAME_AND_OPTIONAL_EMAIL&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The catch</h2>

<p>While the server side and client side code looks similar they are definitely not interchangeable. Server code run on the client side will likely fail silently, but client code run on the server will crash the app. One place where I got tripped up was accessing the userId:</p>

<h3>Server side <code>this.userId</code></h3>

<p><span class='pullquote-right' data-pullquote='Use this.userId inside the server publish function'>
In Meteor server side javascript the context is clear: <code>this</code> is called in the context of a Meteor object, and you can therefore make inquiries about its properties. Use this.userId inside the server publish function to access the id of the current user (or null if no user is logged in &mdash; from the <a href="http://docs.meteor.com/#publish_userId">docs</a>).
</span></p>

<h3>Client side: <code>Meteor.userId()</code></h3>

<p><span class='pullquote-right' data-pullquote='Use Meteor.userId() anywhere BUT in the server publish function'>
In the Meteor client side, <code>this</code> has a different context: the <code>window</code> object. The window object has a userId property that can be set at Document.ready(), but in the case that a user logs out and another user logs in to that same window without a page refresh, <code>window.userId</code> will retain the id of the first user. Use Meteor.userId() anywhere BUT in the server publish function to get the current user id (or null if no user is logged in &mdash; from the <a href="http://docs.meteor.com/#accounts_api">docs</a>).
</span></p>

<p>Thanks to this <a href="http://stackoverflow.com/a/20781135">stackoverflow</a> response, the Meteor <a href="http://docs.meteor.com/">docs</a>, and packtpub&rsquo;s awesome <a href="http://www.packtpub.com/getting-started-with-meteor-javascript-framework/book">support page</a> for helping me get reacquainted with javascript contexts.</p>

<p>Awesome</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Clean]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/get-clean/"/>
    <updated>2014-01-13T21:29:03-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/get-clean</id>
    <content type="html"><![CDATA[<p>I experiment a lot before I choose an implementation I like. I am sure I am not alone in making a few (or many) false starts, and yet feeling sick at the thought of deleting any code. What if one of those paths I started down was the right one? This loss aversion often leads to working trees of non-working code, and <code>git stash</code>-es that I will never revisit. If I stop myself from going too far down yet another road without an end in sight, attempts to clean up my working directory often stall miserably at the end of a <code>git checkout .</code>:<!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>On branch intelligent_branch_name
</span><span class='line'><span class="c"># Untracked files:</span>
</span><span class='line'><span class="c">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># ../test/yay_I_wrote_tests.rb</span>
</span><span class='line'><span class="c"># ../helpers/yay_I_wrote_a_helper.rb</span>
</span><span class='line'><span class="c"># ../helpers/how_many_helpers_did_I_write.rb</span>
</span><span class='line'><span class="c"># ../views/i_dont_remember_creating_this_file.rb</span>
</span><span class='line'><span class="c"># ../models/oh_thats_where_that_went.rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once upon a time, I would click my way through <code>rm</code> after <code>rm</code>. A small improvement in <code>rm</code> efficiency came when I discovered I could <code>rm</code> more than one file at a time (don&rsquo;t judge me, I am new at this). Still, the biggest break-through came when a coworker, perhaps observing my struggles, pointed me to <a href="http://ndpsoftware.com/git-cheatsheet.html">git-cheatsheet</a> &mdash; a interactive visual tool to display the relevant commands for each stage of my git workflow.</p>

<h3>Enter <code>git clean</code></h3>

<p>Git clean is a force to be reckoned with, and not just because it doesn&rsquo;t do anything unless you force it.</p>

<figure class='code'><figcaption><span>Use the -n flag to describe the action the cleaner would take linenos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clean -n
</span><span class='line'>Would remove ../helpers/yay_I_wrote_a_helper.rb
</span><span class='line'>Would remove ../helpers/how_many_helpers_did_I_write.rb
</span><span class='line'>Would remove ../views/i_dont_remember_creating_this_file.rb
</span><span class='line'>Would remove ../models/oh_thats_where_that_went.rb
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Use the -f flag to force the cleanup linenos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clean -f
</span><span class='line'>removed ../helpers/yay_I_wrote_a_helper.rb
</span><span class='line'>removed ../helpers/how_many_helpers_did_I_write.rb
</span><span class='line'>removed ../views/i_dont_remember_creating_this_file.rb
</span><span class='line'>removed ../models/oh_thats_where_that_went.rb
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I can be as crufty as I want to be in my working tree, because <code>git</code> will be there to clean up the mess.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factoring in Nests]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/factoring-in-nests/"/>
    <updated>2013-10-29T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/factoring-in-nests</id>
    <content type="html"><![CDATA[<p>I am building an application that uses several nested attributes: Users have many Goals (Goals belong_to Users), and Goals have many Hours (Hours belong_to Goals).</p>

<p>Using <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a> to create a User is straightforward:</p>

<div>
  <pre><code class='ruby'>FactoryGirl.define do
  factory :user do
    sequence :name  { |n| &quot;person#{n}&quot; }
    sequence :email { |n| &quot;person#{n}@example.com&quot; }
  end
end

describe User do
  before  { @user = FactoryGirl.create(:user) }
  subject { @user }
  it { should respond_to(:name) }
  ...
end</code></pre>
</div>


<p>How do I create Goals that are linked to the User?</p>

<!--more-->


<h3>How to create Factories for nested attributes</h3>

<h5>1. Make a new Factory for producing Goals:</h5>

<div>
  <pre><code class='ruby'>FactoryGirl.define do
  factory :goal do
    sequence :description { |n| &quot;my goal #{n}&quot; }
    sequence :motivation  { |n| &quot;my motivation #{n}&quot; }
  end
end</code></pre>
</div>


<h5>2. Call the Goal Factory from the User Factory and store the Goals in an Array</h5>

<div>
  <pre><code class='ruby'>FactoryGirl.define do
  factory :user do
    sequence :name { |n| &quot;person#{n}&quot; }
    sequence :email { |n| &quot;person#{n}@example.com&quot; }

    goals { Array.new(1) { FactoryGirl.build(:goal) } }

  end
end</code></pre>
</div>


<p>Your objects will look like this:</p>

<div>
  <pre><code class='bash'>&gt; p @user
#&lt;User id: 1, name: &quot;person1&quot;, email: &quot;person1@example.com&quot;, ... &gt;
&gt; p @user.goals.first
#&lt;ActiveRecord::Associations::CollectionProxy [#&lt;Goal id: 1, user_id: 1, description: &quot;my goal 1&quot;, motivation: &quot;my motivation 1&quot;, ...]&gt;</code></pre>
</div>


<p>Create Hours for Goals in the same manner: create a Factory for making Hours, call the Hours Factory from the Goals Factory.</p>

<div>
  <pre><code class='ruby'>FactoryGirl.define do
  factory :hour do
    duration { 100 * rand(36) }
    ...
  end
end

FactoryGirl.define do
  factory :goal do
    sequence :description { |n| &quot;my goal #{n}&quot; }
    sequence :motivation  { |n| &quot;my motivation #{n}&quot; }

    hours { Array.new(3) { FactoryGirl.build(:hour) } }
  end
end</code></pre>
</div>


<p>Checking your objects:</p>

<div>
  <pre><code class='bash'>&gt; p @user
#&lt;User id: 1, name: &quot;person1&quot;, email: &quot;person1@example.com&quot;, ... &gt;
&gt; p @user.goals.first
#&lt;ActiveRecord::Associations::CollectionProxy [#&lt;Goal id: 1, user_id: 1, description: &quot;my goal 1&quot;, motivation: &quot;my motivation 1&quot;, ...]&gt;
&gt; p @user.goals.first.hours.first
#&lt;ActiveRecord::Associations::CollectionProxy [#&lt;Hour id: 1, goal_id: 1, duration: 3200 , ...]&gt;</code></pre>
</div>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meatier Apps With Meteor]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/meatier-apps-with-meteor/"/>
    <updated>2013-10-20T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/meatier-apps-with-meteor</id>
    <content type="html"><![CDATA[<p><a href="http://www.meteor.com/">Meteor</a> is a framework that allows you to write web applications using only javascript. All the work is done on the client-side. Meteor embraces new principles of web design: data on the wire, one language is enough, and simplicity makes for productivity.</p>

<p>Simplicity is something I value as well, and while setting up meteor on my linux machine was not a three-step process as outlined in their examples, it only took a little tinkering to figure out the problem. <!--more-->First, a look at the three meteor setup steps:</p>

<h4>Install</h4>

<div>
  <pre><code class='bash'>$ curl https://install.meteor.com | /bin/sh</code></pre>
</div>


<h4>Create a sample application</h4>

<div>
  <pre><code class='bash'>$ meteor create testapp</code></pre>
</div>


<h4>Run the sample application</h4>

<div>
  <pre><code class='bash'>$ cd testapp
$ meteor</code></pre>
</div>


<p>This is where the meteor server is supposed to start, connecting to your mongo installation, and serving your application on port 3000:</p>

<div>
  <pre><code class='bash'>$ meteor
[[[[[ /path/to/testapp ]]]]]

=&gt; Meteor server running on: http://localhost:3000/</code></pre>
</div>


<p>Instead, my terminal became quite upset about it:</p>

<div>
  <pre><code class='bash'>[[[[[ /path/to/testapp ]]]]]

Unexpected mongo exit code 1. Restarting.
Unexpected mongo exit code 1. Restarting.
Unexpected mongo exit code 1. Restarting.
Can&#39;t start mongod</code></pre>
</div>


<p>Whups! Everything seems normal in my mongo installation, but after a lot of searching I finally found the problem on <a href="http://stackoverflow.com/questions/18505372/meteor-update-0-6-4-0-6-5-mongo-error">stackoverflow</a>. From among the answers I found this solution:</p>

<blockquote><p>I&rsquo;m also getting this error on Ubuntu. As mentioned, it&rsquo;s caused by mongo and mongod from ~/.meteor/tools/latest/mongodb/bin being compiled with an older version of glib. You can replace the version of mongo bundled by meteor with the version installed in your system:</p></blockquote>

<div>
  <pre><code class='bash'>cd ~/.meteor/tools/latest/mongodb/bin/
mv mongo mongo-backup
mv mongod mongod-backup
ln -s /usr/bin/mongo
ln -s /usr/bin/mongod</code></pre>
</div>


<p>Brilliant! Following these instructions, I was finally able to start meteor.</p>

<h3>Getting down to business</h3>

<p>Now to test out some of the awesome functionality of this framework. I <a href="http://www.meteor.com/examples/todos">followed an example</a> and created a todo list:</p>

<div>
  <pre><code class='bash'>$ meteor create --example todos
$ cd todos
$ meteor deploy totally-fake-url.meteor.com
Deploying to totally-fake-url.meteor.com.  Bundling...
Uploading...
Now serving at totally-fake-url.meteor.com</code></pre>
</div>


<p>Playing around with creating new todos and lists, it is clear that data is being added and changed instantly and persistently.</p>

<p>A Meteor application is a mix of JavaScript that runs inside a client web browser, JavaScript that runs on the Meteor server inside a Node.js container, and all the supporting HTML fragments, CSS rules, and static assets.</p>

<p>I am really looking forward to diving further into <a href="http://docs.meteor.com/#concepts">the docs</a> to learn more about this incredible framework.
AWESOME</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Partial to Ajax]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/partial-to-ajax/"/>
    <updated>2013-10-18T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/partial-to-ajax</id>
    <content type="html"><![CDATA[<p>I have been building a new project and getting creative with views. I am working with bootstrap and jquery to develop tabbed displays, and in the process have been gleaning a deeper understanding of rails routes, controllers, and assets. Using Ajax to load partials into rails views is a three part process:</p>

<!--more-->


<h4>1. In the View, Add a Link</h4>

<p>/path/to/view.html.erb</p>

<div>
  <pre><code class='ruby'>&lt;%= link_to &quot;Show my partial&quot;, path_to_controller, remote: true %&gt;</code></pre>
</div>


<p>The key difference in the syntax for this link is &ldquo;remote: true&rdquo;, which signals to the controller action to respond using ajax, not html.</p>

<h4>2. Create a Partial</h4>

<p>/path/to/view/_my_partial.html.erb</p>

<div>
  <pre><code class='ruby'>&lt;div&gt;
  &lt;%= form_for @model do |f| %&gt;
    &lt;%= f.label :my_text_field, &quot;Text Field Label&quot; %&gt;
    &lt;%= f.text_area :my_text_field %&gt;
    &lt;%= f.submit &quot;New&quot;, class: &quot;btn btn-primary&quot; %&gt;
  &lt;% end %&gt;
&lt;/div&gt;</code></pre>
</div>


<h4>3. In the Controller Action, Add a js Response</h4>

<p>/path/to/controller.rb</p>

<div>
  <pre><code class='ruby'>def my_action
  respond_to do |format|
    format.js
  end
end</code></pre>
</div>


<p>Normally, Rails will render the view that corresponds to the name of the action in response to an html request. The format.js line asks rails to look for a javascript file instead of an html file when it tries to render a view.</p>

<h4>3. Create a my_action.js.erb File to Shape the Ajax Response</h4>

<p>/path/to/view/my_action.js.erb</p>

<div>
  <pre><code class='javascript'>$(&quot;#your-placeholder-id&quot;).prepend(&#39;&lt;%= escape_javascript(render &#39;path/to/view/my_partial&#39;) %&gt;</code></pre>
</div>


<p>Files with multiple extensions are processed from last to the first one. With js.erb, the erb will process all the ruby content first, and then the javascript will be run. Your js.erb file should be saved in the same folder as the rest of your controller&rsquo;s views. This is an example :</p>

<div>
  <pre><code class='bash'>app/views/users/
├── _my_partial.html.erb
├── edit.js.erb
├── show.html.erb</code></pre>
</div>


<p>Voila! When you click the link in your view the partial is loaded using Ajax.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails, You Can Depend on Javascript]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/rails-depends-on-javascript/"/>
    <updated>2013-09-16T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/rails-depends-on-javascript</id>
    <content type="html"><![CDATA[<p>I am between computers at the moment, and I really really miss my OSX development environment. Dependency installation is so smooth and painless on mac, that I had quite forgotten the complications of setting up a complete environment in linux. For instance</p>

<h3>Rails requires a javascript runtime environment</h3>

<p>I am running an Ubuntu 9.4 remix on my little Atom Netbook. Getting rails up and running anew is a lesson in returning to fundamentals.</p>

<div>
  <pre><code class='bash'>$ gem install rails
$ rails new testapp -T
$ rails generate rspec:install
...
Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes</code></pre>
</div>




<!--more-->


<h3>Why does rails use a javascript runtime?</h3>

<p>A web application does not exist in a ruby/rails vacuum &mdash; rendering an html page requires css and javascript as well. By default, the &lsquo;rails new&rsquo; command generates a Gemfile containing a few suggested goodies, including uglifier, which compresses javascript assets. Dealing with multiple layers of javascripts can hurt application performance, which is why rails has adopted a compression strategy. Uglifier minifies your javascript by removing all the whitespace.</p>

<p>From the RailsGuides:</p>

<blockquote><p>You will need an ExecJS supported runtime in order to use uglifier. If you are using Mac OS X or Windows you have a JavaScript runtime installed in your operating system. Check the ExecJS documentation for information on all of the supported JavaScript runtimes.</p></blockquote>

<h3>Setup Node.js on Linux</h3>

<p>In Ubuntu 10.4 and above, a JavaScript runtime is included, but installing Node on an older Ubuntu distro is not as simple as</p>

<div>
  <pre><code class='bash'>$ sudo apt-get nodejs</code></pre>
</div>


<p>I found the key sequence of commands on the Node.js website. First, update your packages and install node.js dependencies: python, g++, make, etc</p>

<div>
  <pre><code class='bash'>$ sudo apt-get update
$ sudo apt-get install python-software-properties python g++ make</code></pre>
</div>


<p>Next, add the location of the nodejs repository, update, and install.</p>

<div>
  <pre><code class='bash'>$ sudo add-apt-repository ppa:chris-lea/node.js
$ sudo apt-get update
$ sudo apt-get install nodejs</code></pre>
</div>


<p>Wow &mdash; with all of that done, I can finally:</p>

<div>
  <pre><code class='bash'>$ rails generate rspec:install
      create  .rspec
      create  spec
      create  spec/spec_helper.rb</code></pre>
</div>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Execution]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/ruby-execution/"/>
    <updated>2013-09-10T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/ruby-execution</id>
    <content type="html"><![CDATA[<p>I have started including an executable in my project setup. Many of the code challenges I have been practicing lately have included file I/O, and while TDD and code exercising with RSpec is still my main process, developing a stand-alone fully-functional project requires something more.</p>

<!--more-->


<h3>Blocks Code Challenge</h3>

<p>I found the blocks code challenge on the <a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=3&amp;page=show_problem&amp;problem=37">UVa code competition website</a>. To sum up, you have to write a program that will parse and carry out a series of commands for stacking blocks.</p>

<ol>
<li>move a onto b</li>
<li>move a over b</li>
<li>pile a onto b</li>
<li>pile a over b</li>
<li>quit</li>
</ol>


<p>The commands will be provided in an input file, and an output is specified. Fun problem, right? So, I start my project folder using my <a href="http://www.katieleonard.ca/automation/2013/09/08/thor-sets-up-a-project/">thor task</a>, and work awhile adding logic and tests and data as appropriate. My file tree finishes like this:</p>

<div>
  <pre><code class='bash'>blocks
├── data
│   ├── input.txt
│   └── output.txt
├── lib
│   └── blocks.rb
├── spec
│   ├── blocks_spec.rb
│   └── spec_helper.rb
├── Gemfile
└── README.md</code></pre>
</div>


<p>So, in order to use my script, I would have to call it from the command line:</p>

<div>
  <pre><code class='bash'>$ ruby lib/blocks.rb data/input.txt
#=&gt; or
$ data/input.txt | ruby lib/blocks.rb</code></pre>
</div>


<p>This is an extremely verbose way to deliver a final product, and I would much rather call $ blocks &lt;file_input&gt;. It turns out that making an executable is easy and elegant, just like everything else in ruby. You just have to declare the ruby environment, include a few notes on usage, load the file tree, and call the class:</p>

<div>
  <pre><code class='ruby'>#!/usr/bin/env ruby
# blocks
# 10-Sep-2013
#
# Usage:
# ./blocks data/input.txt
#
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), &#39;lib&#39;))
require &#39;blocks&#39;
Blocks.new.process_input</code></pre>
</div>


<p>Placing this code in a non-extension file, like &lsquo;blocks&rsquo;, in the main directory, I can make it an executable by changing the file permissions:</p>

<div>
  <pre><code class='bash'>$ chmod +x ./blocks</code></pre>
</div>


<p>And I can call it like any other executable:</p>

<div>
  <pre><code class='bash'>$ ./blocks data/input.txt</code></pre>
</div>


<p>I liked this solution so much, I added it to my thor project setup! Oh, and if you are interested in seeing my solution for the blocks problem, checkout my <a href="https://github.com/keighty/datastructures/tree/master/ruby/blocks">github repo</a></p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thor Sets Up a Project]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/thor-sets-up-a-project/"/>
    <updated>2013-09-08T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/thor-sets-up-a-project</id>
    <content type="html"><![CDATA[<p>A few weeks ago I posted about <a href="http://www.katieleonard.ca/automation/2013/08/30/hammer-out-tasks-with-thor/">using Thor to generate system-wide notes files with a standard format</a>. Since then, I have been doing a lot of smaller code challenges, and I wanted to set up a Thor task for generating a standard project file tree.</p>

<!--more-->


<p>My Goal Tree:</p>

<div>
  <pre><code class='bash'>project_name
├── lib
│   └── project_name.rb
├── spec
│   ├── project_name_spec.rb
│   └── spec_helper.rb
├── Gemfile
└── README.md</code></pre>
</div>


<p>I always begin with these files and this organization. A Gemfile and README are essential for setting up the environment and explaining the gist of the project. I am most comfortable with RSpec, and to get into the practice of TDD, setting up a testing environment right away is non-negotiable. All of these standard files contain some automatic content as well:</p>

<h5>spec_helper.rb loads the library</h5>

<div>
  <pre><code class='ruby'>$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), &#39;..&#39;, &#39;lib&#39;))
require &#39;rspec&#39;
require &#39;project_name&#39;</code></pre>
</div>


<h5>project_name_spec.rb sets up the first test</h5>

<div>
  <pre><code class='ruby'>require &#39;spec_helper&#39;

describe ProjectName do
  before (:each) {  }
  subject {  }

  it &quot;should pass&quot;
end</code></pre>
</div>


<h5>Gemfile specifies the right gems for setting up the project</h5>

<div>
  <pre><code class='ruby'>ruby &#39;2.0.0&#39;
gem &#39;rspec&#39;</code></pre>
</div>


<p>There are other files that could have auto-generated content as well, like a Rakefile, or a config.ru, but this is a good start.</p>

<h4>Create a Thor task (rb_project.thor):</h4>

<div>
  <pre><code class='ruby'>#!/usr/bin/env ruby
require &quot;rubygems&quot;
require &quot;thor&quot;

class RbProject &lt; Thor
  desc &quot;init&quot;, &quot;creates a ruby project with rspec&quot;

  def init(title=&quot;new_project&quot;)
    Dir.mkdir(title)
    Dir.chdir(title)
    Dir.mkdir(&quot;spec&quot;)
    Dir.mkdir(&quot;lib&quot;)
    filename = &quot;#{title}&quot;

    open(File.new(&quot;README.md&quot;, &quot;w&quot;), &quot;w&quot;) do |note|
      note.puts &quot;# #{title}&quot;
    end

    open(File.new(&quot;Gemfile&quot;, &quot;w&quot;), &quot;w&quot;) do |my_gem|
      my_gem.puts &quot;ruby &#39;2.0.0&#39;&quot;
      my_gem.puts &quot;gem &#39;rspec&#39;&quot;
    end

    open(File.new(&quot;spec/spec_helper.rb&quot;, &quot;w&quot;), &quot;w&quot;) do |spec|
      spec.puts &quot;$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), &#39;..&#39;, &#39;lib&#39;))&quot;
      spec.puts &quot;require &#39;rspec&#39;&quot;
      spec.puts &quot;require &#39;#{filename}&#39;&quot;
    end

    open(File.new(&quot;spec/#{filename}_spec.rb&quot;, &quot;w&quot;), &quot;w&quot;) do |spec|
      spec.puts &quot;require &#39;spec_helper&#39;&quot;
      spec.puts &quot;&quot;
      spec.puts &quot;describe #{camelize(filename)} do&quot;
      spec.puts &quot;  before (:each) {  }&quot;
      spec.puts &quot;  xit &#39;should pass&#39;&quot;
      spec.puts &quot;end&quot;
    end
  end

  private
    def camelize(snake)
      title = snake.split(&#39;_&#39;).each do |word|
        word.capitalize!
      end
      title.join(&#39;&#39;)
    end
end</code></pre>
</div>


<p>I created a private method camelize in order to change the snake_case project name into a CamelCase class name.</p>

<p>As before, I install my thor task system wide:</p>

<div>
  <pre><code class='bash'>$ thor install rb_project.thor</code></pre>
</div>


<p>And now my project generation task can be run from any directory, anywhere on my system:</p>

<div>
  <pre><code class='bash'>$ thor list
note
----
thor note:create  # creates a notes file in markdown

rb_project
----------
thor rb_project:init  # creates a ruby project with rspec

$ thor rb_project:init test_project
$ tree test_project/
test_project/
├── lib
│   └── test_project.rb
├── spec
│   ├── spec_helper.rb
│   └── test_project_spec.rb
├── Gemfile
├── README.md

2 directories, 6 files</code></pre>
</div>


<p>Awesome.</p>

<div>
  <pre><code class='bash'></code></pre>
</div>




<div>
  <pre><code class='bash'></code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARGF All You Want]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/argf-all-you-want/"/>
    <updated>2013-09-05T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/argf-all-you-want</id>
    <content type="html"><![CDATA[<p>Many of the fun, junior code challenges I have encountered deal a lot with input/output of data, and I found a great ruby feature that provides flexibility at the command line.</p>

<!--more-->


<h3>Data Input</h3>

<p>There are a lot of ways to treat data at the command line, but the one I was most familiar with is passing in a filename as an argument:</p>

<div>
  <pre><code class='bash'>$ ruby example_script.rb file1.csv file2.csv ...
$ ruby example_script.rb file1.csv | more
$ ruby example_script.rb file1.csv &gt; output.txt</code></pre>
</div>


<h3>Filename Input</h3>

<p>Using ARGV, we can access the list of filenames provided at the command line. ARGV is an array containing all the information that follows the command. For example:</p>

<div>
  <pre><code class='bash'>$ example_command apple banana orange
# ARGV = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;]</code></pre>
</div>


<p>One can process each filename in ARGV using regular array methods:</p>

<div>
  <pre><code class='ruby'>ARGV.each do |arg|
  process_string(File.read(arg))
end</code></pre>
</div>


<p>File.read(arg) reads the file into a &ldquo;\n&rdquo; delimited string, which can be processed further. If there are no arguments, ARGV is an empty array.</p>

<h3>Piped Input</h3>

<p>Say that we want to enter data directly into a program rather than use a fixed filename at the command line &mdash; a useful technique for when we want data to flow out of one process and into another:</p>

<div>
  <pre><code class='bash'>$ cat file1.csv | ruby example_script.rb
$ cat *.csv | ruby example_script.rb
$ ruby example_script.rb &lt; file1.csv</code></pre>
</div>


<p>Using the pipe, &ldquo;|&rdquo; or &ldquo;&lt;&rdquo;, we can push a string of data from one process into another, but what happens to our program when we try to do this?</p>

<div>
  <pre><code class='bash'>$ example.csv | ruby example_script.rb
TypeError: can`t convert nil into String</code></pre>
</div>


<p>We get a TypeError! Recall that command line arguments are stored in ARGV, but we are not providing any command line arguments. ARGV is an empty array, and we are attempting to open a file from ARGV[0] = nil. Shame on us! How do we access data that is piped in as well as data that is appended to the command line? Do we have to check for the source of the data before we can treat it? Turns out, we DON&rsquo;T.</p>

<h3>The ARGF Solution</h3>

<p>Ruby has a nifty interface for handling data input, regardless of whether it arrives as a command line argument or from another data source. We can replace the code we wrote earlier with a single line:</p>

<div>
  <pre><code class='ruby'>process_string(ARGF.read)</code></pre>
</div>


<p>If ARGV is not empty, ARGF will assume it is an array of filenames and will treat them accordingly. If ARGV is empty, it will read from $stdin to get the data passed in via the pipe. One caveat is that you can&rsquo;t read from both ARGV and the pipe: if ARGV != [  ], $stdin is ignored.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hammer-out Tasks With Thor]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/hammer-out-tasks-with-thor/"/>
    <updated>2013-08-30T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/hammer-out-tasks-with-thor</id>
    <content type="html"><![CDATA[<p>A few months ago I gave a small lightning talk to my code school class about automating tasks using <a href="http://rake.rubyforge.org/">Rake</a>. Before I learned ruby I used bash scripts to accomplish similar things, but was often bogged down in learning the syntax of string-processing essentials like awk or sed. I wished for the simplicity of Ruby, and thought that Rake was the bees-knees. After my talk, <a href="chuckvose.com">Chuck</a>, my PCS mentor, put together a repo of <a href="http://whatisthor.com/">Thor</a> tasks that accomplished the same tasks but could be installed system wide.</p>

<!--more-->


<h3><a href="http://whatisthor.com/">Thor</a> is my new hero</h3>

<p>Unlike Rake tasks, which are confined to the directory containing the Rakefile, Thor tasks can be installed on your system and called from anywhere. My note files are all formatted in a particular way. Before Thor, I used a rake task:</p>

<div>
  <pre><code class='bash'>$ cd notesDirWithRakefile
$ rake post title=&quot;new post title&quot;
$ Creating new post: &quot;./130830_new_post_title&quot;</code></pre>
</div>


<p>The Rake task auto-formats the filename, replacing spaces with underscores, and prepends today&rsquo;s date so that they will sort in the order they are made. This worked great for when I wanted to keep notes in that one folder, but later I wanted to be able to keep notes on a particular project. I would either have to copy the Rakefile (two places to update if I made any changes), or create a symbolic link (which would break if I ever moved my Rakefile). Neither of these options seemed to be the most practical. Enter Thor:</p>

<p>Creating the Thor task is as easy as pie:</p>

<div>
  <pre><code class='ruby'>require &#39;thor&#39;

class Note &lt; Thor
  desc &quot;create&quot;, &quot;creates a notes file in markdown&quot;
  def create(title=&quot;new note&quot;)
    slug = title.downcase.strip.gsub(&#39; &#39;, &#39;_&#39;).gsub(/[^\w-]/, &#39;&#39;)
    date = Time.parse(Time.now).strftime(&#39;%y%m%d&#39;)
    filename = File.join(&quot;./&quot;, &quot;#{date}_#{slug}.md&quot;)

    if File.exist?(filename)
      abort(&quot;rake aborted!&quot;) if ask(&quot;#{filename} already exists. Do you want to overwrite?&quot;, [&#39;y&#39;, &#39;n&#39;]) == &#39;n&#39;
    end

    puts &quot;Creating new post: #{filename}&quot;
    open(filename, &#39;w&#39;) do |post|
      post.puts &quot;# #{title.gsub(/-/,&#39; &#39;).capitalize}&quot;
    end
  end
end</code></pre>
</div>


<p>Listing all Thor tasks is easy:</p>

<div>
  <pre><code class='bash'>$ thor list
note
----
thor note:create  # creates a notes file in markdown</code></pre>
</div>


<p>Installing a Thor task for system use is easy:</p>

<div>
  <pre><code class='bash'>$ thor install notes.thor
...
Do you wish to continue [y/N]? y
Please specify a name for notes.thor in the system repository [notes.thor]: note
Storing thor file in your system repository</code></pre>
</div>


<p>Uninstalling a Thor task is easy:</p>

<div>
  <pre><code class='bash'>$ thor uninstall note
Uninstalling note.
Done.</code></pre>
</div>


<p>With my Thor notes task installed system-wide, I can create a note page in any directory, for any reason, without copying code.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serving Some Java]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/serving-some-java/"/>
    <updated>2013-08-24T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/serving-some-java</id>
    <content type="html"><![CDATA[<p>For a recent java coding challenge I was asked, among other things, to make a server. It has been several years since I last attempted it, and I had forgotten how easy it could be.</p>

<!--more-->


<h4>Server</h4>

<p>A server, like any good conversationalist, is a good listener. A server is a program running on a computer that listens at a port, waiting to receive instructions.</p>

<div>
  <pre><code class='java'>public class Server {
  private static String inputLine;

  public static void main(String[] args) {

    private static final int PORT_NUMBER = 63400

    try {
      // Socket variables
      ServerSocket serverSocket = new ServerSocket(PORT_NUMBER);
      Socket clientSocket = serverSocket.accept();

      // IO variables
      InputStreamReader inputReader = new InputStreamReader(clientSocket.getInputStream());
      BufferedReader bReader = new BufferedReader(inputReader);

      while ((inputLine = bReader.readLine()) != null) {
        System.out.println(inputLine);
      }

    } catch (Exception e) {
      System.out.println(e);
    }
  }
}</code></pre>
</div>


<p>The server opens a socket on a specified port (in this case, port 63400). A socket is the point at which two-way communication happens between computer programs. The server opens a socket at a port and waits for a client to bind the socket so they can exchange information. It waits for input from the client, with instructions to print out anything the client puts in (line 18). So where is the client?</p>

<h4>Client</h4>

<p>The client is even simpler than the server: it finds the server at the specified port and connects to the socket.</p>

<div>
  <pre><code class='java'>public class Client {

  private static final int PORT_NUMBER = 63400

  public static void main(String[] args) {

    try {

      // Socket variables
      Socket socket = new Socket(&quot;localhost&quot;, PORT_NUMBER);
      PrintWriter pWriter = new PrintWriter(socket.getOutputStream(), true);

      pWriter.println(&quot;Hello World!&quot;);

    } catch (Exception e) {
      System.out.println(e);
    }
  }
}</code></pre>
</div>


<p>With a successful connection, it generates an output stream. If you start the server in one console it will look like it isn&rsquo;t doing anything, but when you start the client in another console you can watch them communicate. The client writes &ldquo;Hello World&rdquo; directly into the port where the server is listening (socket.getOutputStream()), and as instructed, the server obediently prints &ldquo;Hello World&rdquo; to the console.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime for Your Life]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/runtime-for-your-life/"/>
    <updated>2013-08-19T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/runtime-for-your-life</id>
    <content type="html"><![CDATA[<p>Eh? is coming along as a functioning interpreted language, but we are still missing a runtime. We have a lexer that chops and tags our code string into tokens, and a grammar that contains the rules for order of operations, and a parser that is generated by RACC from the grammar. The parser assembles the tokens into an evaluation tree (AST), but we need a runtime to do the actual evaluation.</p>

<!--more-->


<p>Recall from my previous post that the AST consists of nodes, like this one for a method definition:</p>

<div>
  <pre><code class='ruby'>class DefNode
  def initialize(name, params, body)
    @name = name
    @params = params
    @body = body
  end

  def eval(context)
    context.current_class.can_methods[@name] = CanMethod.new(@params, @body)
  end
end</code></pre>
</div>


<p>When a method definition node is evaluated it adds a new entry to the can_methods hash. The name of the method is its key, and the value is an object (CanMethod.new) that contains the details of method evaluation (parameters and the method body). The context is the scope of the evaluation &ndash; in the case of a method call, the context is the enclosing class.</p>

<p>Ok, so when does the CanMethod get evaluated? It happens at runtime. A class node is built and all the method definitions are added, but the node tree will remain untouched until until a method is called.</p>

<div>
  <pre><code class='ruby'>class CanMethod
  def initialize(params, body)
    @params = params
    @body = body
  end

  def call(receiver, arguments)
    @body.eval(Context.new(receiver))
  end
end</code></pre>
</div>


<p>When your program calls a method, a portion of the AST is evaluated. The body of the method object is called with the provided parameters in the context of the method receiver. For ruby newbies, the receiver is the object on the left side of the method call &mdash; ie. in foo.bar(3), foo is the receiver and bar is called with the parameter of 3 in the context of foo.  The runtime will create a new context for the method (recall that ruby is block scoped, meaning that all variables and blocks within the method are confined to that method&hellip; mostly).</p>

<div>
  <pre><code class='ruby'>class Context
  attr_reader :locals, :current_self, :current_class

  @@constants = {}

  def initialize(current_self, current_class=current_self.can_class)
    @locals = {}
    @current_self = current_self
    @current_class = current_class
  end
end</code></pre>
</div>


<p>The context contains all the local variables for the scope as well as a reference to what object is self, and which is super. We are getting very close to putting all these pieces together!</p>

<p>Awesome</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parcel Parser]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/parcel-parser/"/>
    <updated>2013-08-16T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/parcel-parser</id>
    <content type="html"><![CDATA[<p>On the last episode, I described how to label chunks of code for processing through a parser. Strings are labeled as &lsquo;STRING&rsquo;, class definitions as &lsquo;A&rsquo; + &lsquo;CONSTANT&rsquo;, etc.</p>

<h2>What is a parser?</h2>

<p>A parser separates and analyzes a piece of text according to a set of rules specified by a formal grammar. The analysis is performed by assembling the tokenized code into an Abstract Syntax Tree (AST) &ndash; a tree of nodes that represent what the code means to the language. The AST evaluates the nodes in a similar manner to order of operations in math: each token is placed on the evaluation tree, and expressions are evaluated by reducing each branch in order.</p>

<p>The parser itself is can be written by hand, but I am using RACC: an LALR (Look Ahead, Left to right, Reverse) parser written by <a href="https://github.com/tenderlove/racc">tenderlove</a> to generate Ruby programs. How do we specify a grammar that RACC will understand?</p>

<!--more-->


<p>Each rule is formatted in the following way:</p>

<div>
  <pre><code class='bash'>RuleName:
  OtherRule TOKEN AnotherRule    { code to run }
| OtherRule                      { ... }
;</code></pre>
</div>


<p>It is similar to an if/else statement that captures all possible expressions beginning with the most specific (ie: an expression with TWO rules matches line 2) to more general (all other single expressions are captured on line 3). When a token matches a rule, the code in the attached code block is run.</p>

<p>The code blocks correspond to instructions on how to treat matching tokens. For example, the grammar should specify what happens when the code contains a class definition, labeled with &lsquo;A&rsquo; + &lsquo;CONSTANT&rsquo;.</p>

<div>
  <pre><code class='ruby'>...
# Class definition
Class:
  A CONSTANT Block { result = ClassNode.new(val[1], val[2]) }
;
...</code></pre>
</div>


<p>When the parser catches a class token it will create a new ClassNode with the class name (CONSTANT) and the block as arguments. The val[] array refers to the grammar rule [A, CONSTANT, Block].</p>

<p>Some tokens are parsed very close to AS IS:</p>

<div>
  <pre><code class='ruby'>Literal:
  NUMBER { result = LiteralNode.new(val[0]) }
| STRING { result = LiteralNode.new(val[0]) }
| TRUE   { result = LiteralNode.new(true) }
| FALSE  { result = LiteralNode.new(false) }
| NIL    { result = LiteralNode.new(nil) }
;</code></pre>
</div>


<p>Each literal triggers the creation of a new LiteralNode with its value as the only argument.</p>

<p>The Nodes are outlined in a Nodes class, where the rules of evaluation are defined.</p>

<div>
  <pre><code class='ruby'>...
class ClassNode
  def initialize(name, body)
    @name = name
    @body = body
  end

  def eval(context)
    eh_class = CanadianClass.new
    context[@name] = eh_class
    @body.eval(Context.new(eh_class, eh_class))
    eh_class
  end
end
...</code></pre>
</div>


<p>A ClassNode is initialized with two params (recall from the grammar: ClassNode.new(val[1], val[2])), the class name and its code block. The context is like scope &ndash; it can hold modules, classes, methods, attributes, aliases, requires, and includes. Classes, modules, and files are all Contexts (definition from <a href="http://ruby-doc.org/stdlib-1.8.6/libdoc/rdoc/rdoc/RDoc/Context.html">Rdocs</a>). Evaluation of a ClassNode begins by assigning the class to a context and evaluating the code block, which adds more contexts. In this way, a tree structure is formed &ndash; an AST &ndash; which does all the interpreting work for the new language.</p>

<p>When the grammar and node definitions are complete, RACC will generate a parser:</p>

<div>
  <pre><code class='ruby'>$ racc -vo parser.rb grammar.y</code></pre>
</div>


<p>The parser is a relatively obtuse set of methods and state transition tables, and when you run code through the parser you get an AST that follows the grammar you have defined.</p>

<p>So, now I have a lexer and a parser, but I still can&rsquo;t run my code. I need to define a runner class that will put all these parts together, but first, I need a break.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flex Your Lexer]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/flex-your-lexer/"/>
    <updated>2013-08-15T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/flex-your-lexer</id>
    <content type="html"><![CDATA[<p>A Lexer is a ruby class with a single method: tokenize(). Its purpose is to label each chunk of code with a particular token. Strings are labeled as strings, numbers as numbers, and class names as constants. For example,</p>

<div>
  <pre><code class='ruby'>Lexer.new.tokenize(&quot;string&quot;)
# =&gt;[[:STRING, &quot;string&quot;]]
Lexer.new.tokenize(&quot;True&quot;)
# =&gt;[[:CONSTANT, &quot;True&quot;]]
Lexer.new.tokenize(&quot;a Car&quot;)
# =&gt;[[:A, &#39;a&#39;], [:CONSTANT, &#39;Car&#39;]])
Lexer.new.tokenize(&quot;+&quot;)
# =&gt;[[&quot;+&quot;, &quot;+&quot;]]</code></pre>
</div>


<p>&ldquo;Lexing&rdquo; is accomplished using regular expressions. The lexer treats the text string of your code like a shish kabob &ndash; it slides recognizable chunks off the skewer one at a time and categorizes them (onion, pepper, method definition, etc).</p>

<!--more-->


<div>
  <pre><code class='ruby'>class Lexer
  KEYWORDS = [&#39;a&#39;, &#39;can&#39;, &#39;if&#39;, &#39;else&#39;, &#39;while&#39;, &#39;true&#39;, &#39;false&#39;, &#39;nil&#39;]

  def tokenize(code)
    code.chomp!
    i = 0
    tokens = []

    while i &lt; code.size
      chunk = code[i..-1]

      # checks keywords
      if identifier = chunk[/\A(eh\?)/, 1]
        tokens &lt;&lt; [&#39;}&#39;, &#39;}&#39;]
        i += identifier.size

      elsif identifier = chunk[/\A([a-z]\w*)/, 1]
        if KEYWORDS.include?(identifier)
          tokens &lt;&lt; [identifier.upcase.to_sym, identifier]
        else
          tokens &lt;&lt; [:IDENTIFIER, identifier]
        end
        i += identifier.size
...</code></pre>
</div>


<p>In this example lexer I have defined my list of keywords, removed the trailing newline, and begun peeling identifiable chunks off the code example.
* If the code chunk matches an &lsquo;eh?&rsquo; it will add a closing brace to the token array.
* If the code chunk matches a KEYWORD it will be upcased and labeled as a keyword and added to the token array.
* If the code chunk matches any word of lowercase letters it will be labeled as an IDENTIFIER and added to the token array.</p>

<p>I continued defining regex rules until I was able to completely tokenize a class definition:</p>

<div>
  <pre><code class='ruby'>code = &lt;&lt;-EOS
a Canadian
  can curl
    if skip:
      say &#39;Hurry!&#39;
    eh?
  eh?
eh?
EOS
...
Lexer.new.tokenize(code)
# =&gt; [[:A, &quot;a&quot;], [:CONSTANT, &quot;Canadian&quot;], [:CAN, &quot;can&quot;], [:IDENTIFIER, &quot;curl&quot;], [:IF, &quot;if&quot;], [:IDENTIFIER, &quot;skip&quot;], [&quot;{&quot;, &quot;{&quot;], [:IDENTIFIER, &quot;say&quot;], [:STRING, &quot;Hurry!&quot;], [&quot;}&quot;, &quot;}&quot;], [&quot;}&quot;, &quot;}&quot;], [&quot;}&quot;, &quot;}&quot;]]</code></pre>
</div>


<p>Now that I have an array of tokens, it is time to write my grammar laws that will tell the parser what to do with them.</p>

<p>Awesome</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canadian Flair]]></title>
    <link href="http://www.katieleonard.ca/blog/2013/canadian-flair/"/>
    <updated>2013-08-10T22:29:03-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2013/canadian-flair</id>
    <content type="html"><![CDATA[<p>For my last month at code school, I have decided to learn what it takes to develop a new programming language. Having been teased for my Canadian accent, I thought it appropriate to incorporate some idiomatic Canadianisms, and call my language Eh? Deciding what actual features I want to implement in my programming language is an interesting task, and I think I have narrowed it down to a couple of standard rules and a couple wacky ones:</p>

<h3>Rules for Eh?</h3>

<ul>
<li>blocks of code are delimited by &lsquo;:&rsquo; and &lsquo;eh?&rsquo;</li>
<li>classes are declared using &ldquo;A&rdquo; keyword</li>
<li>methods are defined using &ldquo;CAN&rdquo; keyword</li>
<li>lowercase identifiers are local variables or method names</li>
<li>capitalized identifiers are global variables</li>
<li>no parens for args</li>
<li>last value evaluated in return value</li>
<li>everything is an object</li>
</ul>


<!--more-->


<h1>Steps for building an interpreted language</h1>

<ol>
<li>This code has to be provided as input to a lexer.</li>
<li>The lexer will convert that input into tokens.</li>
<li>The parser will organize those tokens into a tree of nodes.</li>
<li>The runtime will evaluate the nodes using ruby.</li>
</ol>


<h3>Prototype</h3>

<p>Here is what I would like the final result to look like:</p>

<div>
  <pre><code class='ruby'>a Canadian
  with toque
  with scarf
  with broom

  can curl
    if skip:
      say &quot;Hurry!&quot;
    eh?
    if lead:
      pass
    eh?
    say &quot;How social the game...&quot;
  eh?

  can say_aboot:
    say &quot;What&#39;s it all aboot?&quot;
  eh?
eh?</code></pre>
</div>


<p>With this vague action plan and <a href="http://createyourproglang.com/?hop=rubyinside">&ldquo;Create Your Own Programming Language&rdquo;</a> by Marc-Andre Cournoyer in hand, off we go!</p>

<p>Awesome</p>
]]></content>
  </entry>
  
</feed>
