<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[keighty]]></title>
  <link href="http://www.katieleonard.ca/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2014-03-04T18:52:36-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[D3 Nests and Rollups]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/d3-nests-and-rollups+%28cyclops%27s+conflicted+copy+2014-03-04%29/"/>
    <updated>2014-03-04T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/d3-nests-and-rollups (cyclops&#8217;s conflicted copy 2014-03-04)</id>
    <content type="html"><![CDATA[<p>D3 provides powerful functions for manipulating raw data sets, including csv(), nest(), and rollup().</p>

<!--more-->


<h3>csv()</h3>

<p>You can import a raw, comma-delimited data file, and bind the data directly to an svg.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d3.csv("test_data.csv", function(csv_data) {
</span><span class='line'>
</span><span class='line'>  svg.selectAll("circle").data(csv).enter()
</span><span class='line'>    .append("circle")
</span><span class='line'>    .attr("cx",getX)
</span><span class='line'>    .attr("cy",getY)
</span><span class='line'>    .attr("r", getR)
</span><span class='line'>    .style("fill", getColor);
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p><a href=""></a><img src="source/images/post_d3_csv_data.png" />
<img src="source/images/post_d3_csv_data.png"></p>

<h3>nest() and rollup()</h3>

<p>You can also aggregate data on any property &mdash; just tell D3 which one, and use any of D3&rsquo;s handy utility functions (mean, median, sum, min/max, quantile, etc) to return the aggregate data you want to display.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d3.csv("apples.csv",function(csv) {
</span><span class='line'>  data = d3.nest()
</span><span class='line'>          .key(function(d) { return d.Colors; })
</span><span class='line'>          .rollup( function(d) {
</span><span class='line'>            return {
</span><span class='line'>              "X": d3.mean(d, function(e) { return +e.X; }),
</span><span class='line'>              "Y": d3.mean(d, function(e) { return +e.Y; }),
</span><span class='line'>              "Quantity": d3.mean(d, function(e) { return +e.Quantity; })
</span><span class='line'>            };
</span><span class='line'>          })
</span><span class='line'>          .entries(csv);
</span><span class='line'>
</span><span class='line'>  svg.selectAll("circle").data(data).enter()
</span><span class='line'>    .append("circle")
</span><span class='line'>    .attr("cx",getX)
</span><span class='line'>    .attr("cy",getY)
</span><span class='line'>    .attr("r", getR)
</span><span class='line'>    .style("fill", getColor);
</span><span class='line'>
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p><img src="source/images/post_d3_rollupdata_image.png"></p>

<p>D3 is awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[D3 Nests and Rollups]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/d3-nests-and-rollups/"/>
    <updated>2014-03-04T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/d3-nests-and-rollups</id>
    <content type="html"><![CDATA[<p>D3 provides powerful functions for manipulating raw data sets, including csv(), nest(), and rollup().</p>

<!--more-->


<p>I generated a hundred rows of test_data.csv using <a href="http://www.generatedata.com/#about">generatedata.com</a>:</p>

<figure class='code'><figcaption><span>test_data.csv</span><a href='https://gist.github.com/keighty/9348444#file-test_data-csv'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Colors,X,Y,Quantity
</span><span class='line'>violet,1,8,91
</span><span class='line'>blue,9,1,32
</span><span class='line'>blue,3,1,67
</span><span class='line'>yellow,5,5,63
</span><span class='line'>violet,6,6,57
</span><span class='line'>green,5,10,65
</span><span class='line'>red,8,2,36
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>The basic properties are a Color (one of blue, yellow, violet, green, and red), an X-value (between 1 and 10), a Y-value (also between 1 and 10), and a Quantity value (between 1 and 100).</p>

<h3>csv()</h3>

<p>You can import a raw, comma-delimited data file, and bind the data directly to an svg.</p>

<figure class='code'><figcaption><span>csv()</span><a href='https://gist.github.com/keighty/9348444'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">csv</span><span class="p">(</span><span class="s2">&quot;test_data.csv&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">csv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="nx">csv</span><span class="p">).</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.katieleonard.ca/images/post_d3_csv_data.png"></p>

<h3>nest() and rollup()</h3>

<p>You can also aggregate data on any property &mdash; just tell D3 which one, and use any of D3&rsquo;s handy utility functions (mean, median, sum, min/max, quantile, etc) to return the aggregate data you want to display. For example, I want to plot the average data for each color. I tell my D3 selection to nest the data on the color key. Then I tell the rollup function to take the average for each property of the data. Pass the new data to the svg instead of the csv, and voila</p>

<figure class='code'><figcaption><span>nest() and rollup()</span><a href='https://gist.github.com/keighty/9348540'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">csv</span><span class="p">(</span><span class="s2">&quot;test_data.csv&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">csv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">nest</span><span class="p">()</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">key</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Colors</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">rollup</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;X&quot;</span><span class="o">:</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">X</span><span class="p">;</span> <span class="p">}),</span>
</span><span class='line'>              <span class="s2">&quot;Y&quot;</span><span class="o">:</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">Y</span><span class="p">;</span> <span class="p">}),</span>
</span><span class='line'>              <span class="s2">&quot;Quantity&quot;</span><span class="o">:</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">Quantity</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">csv</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.katieleonard.ca/images/post_d3_rollupdata_image.png"></p>

<p>D3 is so awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Technique for Producing Ideas]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/a-technique-for-producing-ideas/"/>
    <updated>2014-03-04T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/a-technique-for-producing-ideas</id>
    <content type="html"><![CDATA[<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling D3]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/d3-scaling/"/>
    <updated>2014-03-03T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/d3-scaling</id>
    <content type="html"><![CDATA[<p>Add scales to a d3 plot in three easy steps:</p>

<h3>1. Define the scale</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Image dimensions</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">margin</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">scaleX</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">().</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">]).</span><span class="nx">range</span><span class="p">([</span><span class="nx">margin</span><span class="p">,</span> <span class="nx">width</span><span class="o">-</span><span class="nx">margin</span><span class="p">]);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">scaleY</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">().</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">]).</span><span class="nx">range</span><span class="p">([</span><span class="nx">height</span><span class="o">-</span><span class="nx">margin</span><span class="p">,</span> <span class="nx">margin</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Draw the scale</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Image container</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">svg</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span><span class="nx">width</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Axis definition</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">xAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">scaleX</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;bottom&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">yAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">scaleY</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;left&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Axis graphics</span>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(0,&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">height</span> <span class="o">-</span> <span class="nx">margin</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">xAxis</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(&quot;</span> <span class="o">+</span> <span class="nx">margin</span> <span class="o">+</span> <span class="s2">&quot;,0)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">yAxis</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Apply the scale to your data</h3>

<figure class='code'><figcaption><span>Apply the scale.</span><a href='https://gist.github.com/keighty/9327604'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">csv</span><span class="p">(</span><span class="s2">&quot;test_data.csv&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">csv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="nx">csv</span><span class="p">).</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Apply scale to the x value</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getX</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">scaleX</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">X</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Apply scale to the y value</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getY</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">scaleY</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Y</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getR</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Quantity</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getColor</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Colors</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Dates]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/javascript-dates/"/>
    <updated>2014-03-01T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/javascript-dates</id>
    <content type="html"><![CDATA[<p>Javascript Date objects have zero indexed months but not dates.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; (new Date(2014, 0, 1)).strftime("%b %d, %Y")
</span><span class='line'>"Jan 1, 2014"
</span><span class='line'>&gt; (new Date(2013, 11, 31)).strftime("%b %d, %Y")
</span><span class='line'>"Dec 31, 2013"
</span><span class='line'>&gt; (new Date(2014, 0, 0)).strftime("%b %d, %Y")
</span><span class='line'>"Dec 31, 2013"</span></code></pre></td></tr></table></div></figure>


<p>Wat?</p>

<!--more-->


<h3>Resources</h3>

<p><a href="http://tech.bluesmoon.info/2008/04/strftime-in-javascript.html">Javascript strftime</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String Conversion in Javascript]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/to-i-in-javascript/"/>
    <updated>2014-02-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/to-i-in-javascript</id>
    <content type="html"><![CDATA[<p>Almost every day, javascript blows my mind. Today I discovered that you can convert a string to a number simply by prepending a +:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; typeof(+"this is a string")
</span><span class='line'>"number"
</span><span class='line'>&gt; typeof(+"100")
</span><span class='line'>"number"
</span><span class='line'>&gt; +"100" + 50
</span><span class='line'>150</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Neuroscience of Programming]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/programming-and-linguistics/"/>
    <updated>2014-02-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/programming-and-linguistics</id>
    <content type="html"><![CDATA[<h3><a href="http://www.huffingtonpost.com/chris-parnin/scientists-begin-looking-_b_4829981.html">Scientists Begin Looking at Programmers&#8217; Brains: The Neuroscience of Programming</a> from The Huffington Post.</h3>

<blockquote><p>A new study provides new evidence that programmers are using language regions of the brain when understanding code and found little activation in other regions of the brain devoted to mathematical thinking.</p></blockquote>

<ul>
<li>Each programming language you learn requires expressing abstract concepts with a different syntax &mdash; and in the case of punctuation (~>, =>, :, {}, [], etc) an augmented alphabet. How is a programming language NOT like linguistics?</li>
</ul>


<blockquote><p>Besides a mathematical inclination, an exceptionally good mastery of one&rsquo;s native tongue is the most vital asset of a competent programmer. &mdash;Djikstra</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binding Functions as Data]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/binding-functions-as-data/"/>
    <updated>2014-02-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/binding-functions-as-data</id>
    <content type="html"><![CDATA[<p>Primitives and object literals are not the only things you can bind to a D3 visualization. After all, aren&rsquo;t javascript functions objects as well?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">15</span> <span class="o">+</span> <span class="nx">x</span><span class="o">*</span><span class="nx">x</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">newData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">next</span><span class="p">);</span> <span class="k">return</span> <span class="nx">data</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">selection</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#container&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">newData</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>                  <span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#span&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you provide a function to the data function, D3 will simply invoke the function and use the returned value as a parameter of the data function.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualize With Purpose]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/why-visualize/"/>
    <updated>2014-02-26T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/why-visualize</id>
    <content type="html"><![CDATA[<p>Information visualization (insight, understanding, and discovery) and information art (aesthetics) differ in their context, audience, and goals. In my exploration of D3 I came across an <a href="http://www.visualcomplexity.com/vc/blog/?p=644">Information Visualization Manifesto</a> by Manuel Lima, and this is what I have learned<!--more-->:</p>

<ul>
<li><strong>Form follows function</strong>: keep your problem domain in mind when assembling a visualization.</li>
<li><strong>Question</strong>: Drive your work through questions and curiosity.</li>
<li><strong>Interactivity</strong> is key.</li>
<li><strong>Sources</strong>: Provide access to the raw data if possible.</li>
<li><strong>Narrative</strong>: Tell a story with your data.</li>
<li><strong>Aesthetics</strong> Are a consequence of visualization, not a goal.</li>
<li><strong>Relevancy</strong>: What is the context? What patterns are discernable?</li>
<li><strong>Time</strong>: Consider time when your data is affected by it.</li>
<li><strong>Knowledge</strong>: Bring new understanding and insight.</li>
<li><strong>Ease up</strong>: Not everything can or should be visualized. Be deliberate and add to information, don&rsquo;t obfuscate with unnecessary visualizations.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implied Functions Applied]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/implied-functions-applied/"/>
    <updated>2014-02-26T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/implied-functions-applied</id>
    <content type="html"><![CDATA[<p>When binding a primitive datum to a node in a D3 visualization, the callback function can be implicitly called on the datum without the typical verbosity<!--more-->:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">data</span><span class="p">([</span><span class="mi">32</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">293</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span> <span class="mi">90</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span> <span class="nb">String</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In line 5, String() is performed on the data element, as is Math.sqrt in line 6, with the same result as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">data</span><span class="p">([</span><span class="mi">32</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">293</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span> <span class="mi">90</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; but better.</p>

<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="http://mbostock.github.io/d3/tutorial/circle.html">Three Little Circles D3 Tutorial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enter Update Exit]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/enter-update-exit/"/>
    <updated>2014-02-25T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/enter-update-exit</id>
    <content type="html"><![CDATA[<p>D3 is a data visualization tool that uses method chaining to produce big pictures with little code. The selection library performs a full Outer Join between the data (D) and the visual elements (V), and the enter-update-exit pattern performs work on subsets of this join<!--more-->:</p>

<h3>UPDATE: Inner Join (D union V)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>selection.data(data_points)</span></code></pre></td></tr></table></div></figure>


<p>data() binds data_points to the html or svg elements returned by the selection and returns the data not visualized.</p>

<h3>ENTER: Left excluding join (D/V)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>selection.data(data_points).enter()</span></code></pre></td></tr></table></div></figure>


<p>enter() returns data_points that are not yet represented visually by html or svg. Chain .append() to add a new element to the page.</p>

<h3>EXIT: Right excluding join (V/D)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>selection.data(data_points).exit()</span></code></pre></td></tr></table></div></figure>


<p>exit() returns html or svg elements that no longer have data associated with them. Chain .remove() to eliminate them, or .translate() to make them slide off the page.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>

<p><a href="http://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins">Visual Representation of SQL Joins</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[D3 Is Selective]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/d3-is-selective/"/>
    <updated>2014-02-21T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/d3-is-selective</id>
    <content type="html"><![CDATA[<p>D3 uses the W3C standard selector library, and selection modifiers work on both single and multiple element selections, and will automatically apply the modifier iteratively over the entire collection, which makes your code simpler and easier to maintain.</p>

<!--more-->


<h4>Selection modifiers</h4>

<ul>
<li><strong>d3.select(&lsquo;p&rsquo;).text()</strong>     : retrieve or modify text</li>
<li><strong>d3.select(&lsquo;p&rsquo;).attr()</strong>     : retrieve or modify a given attribute</li>
<li><strong>d3.select(&lsquo;p&rsquo;).classed()</strong>  : retrieve or modify css classes</li>
<li><strong>d3.select(&lsquo;p&rsquo;).style()</strong>    : retrieve or modify styles</li>
<li><strong>d3.select(&lsquo;p&rsquo;).html()</strong>     : retrieve or modify a selections inner html (like text but with tags)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d3.selectAll('div')
</span><span class='line'>            .attr("class", "alert")
</span><span class='line'>            .each(function(d, i) {
</span><span class='line'>              d3.select(this).append("h1").text(i);
</span><span class='line'>            });</span></code></pre></td></tr></table></div></figure>


<p>Selections are essentially arrays with some extra variables baked in. The <code>.each</code> call on line 3 treats the selected elements as an array, and performs a function on each one. The extra variables provided to the iterator function for free are: the data bound to the element (d), the index of the element, and the element itself (this).</p>

<p>Awesome</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Arguing]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/functional-arguing/"/>
    <updated>2014-02-20T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/functional-arguing</id>
    <content type="html"><![CDATA[<p>The <code>arguments</code> variable is a hidden parameter in javascript functions that contains all the arguments for the invocation in a pseudo-array (ie: it does not have array functions other than length and indexing).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">instance</span><span class="p">.</span><span class="nx">headline</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">return</span> <span class="nx">headline</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">headline</span> <span class="o">=</span> <span class="nx">h</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">instance</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even though the function specifically calls for an argument (<code>h</code>), it can still be called without one. This construction has a ruby equivalent, <code>attr_accessor :headline</code>, which behaves as a getter and a setter, depending on the arguments provided (none, or <code>headline = new_value</code>).</p>

<p>This &ldquo;variable-parameter&rdquo; function design is what enables method chaining. When the function is called as a getter it returns a string, but when it is called as a setter it returns the invoking object, passing itself along to the next method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">widget</span> <span class="o">=</span> <span class="nx">SimpleWidget</span><span class="p">({</span> <span class="nx">color</span><span class="o">:</span> <span class="s2">&quot;#6439ed&quot;</span> <span class="p">})</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">headline</span><span class="p">(</span><span class="s2">&quot;SimpleWidget&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">description</span><span class="p">(</span><span class="s2">&quot;This is a simple widget&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Live on 24 Hours a Day]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/how-to-live-on-24-hours-a-day/"/>
    <updated>2014-02-17T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/how-to-live-on-24-hours-a-day</id>
    <content type="html"><![CDATA[<p><a href="http://www.gutenberg.org/files/2274/2274-h/2274-h.htm">How to Live on 24 Hours a Day</a>, by Arnold Bennett (published in 1910)</p>

<h3>Arnold Bennett&rsquo;s recommendations for leading a full and happy life:</h3>

<ol>
<li>Wake up earlier</li>
<li>Practice concentrating your mind on a single task.</li>
<li>Don&rsquo;t try to change too much too quickly.</li>
<li>Spend time each day reflecting on how closely your life aligns with your principles.</li>
<li>Study the performing arts.</li>
<li>Read poetry.</li>
<li>Failing that, read anything except novels, and think about what you read.</li>
<li>Don&rsquo;t be smug about it.</li>
</ol>


<!--more-->


<p>I was surprised to learn that much of the ennui of modern life turns out not to be particularly modern after all. In this often sarcastic essay, Bennett shares his recipe for maximizing &ldquo;the full use of one&rsquo;s time to the great end of living (as distinguished from vegetating).&rdquo;</p>

<h3>Wake up earlier</h3>

<p>In the preface he disposes of the most common excuse for not improving oneself &mdash; I just don&rsquo;t have enough time. The solution is simple:</p>

<blockquote><p>Employ your engines in something beyond [your routine] before, and not after, you employ them on the [routine] itself. Briefly, get up earlier in the morning&hellip; Most people sleep themselves stupid.</p></blockquote>

<p>This call to action comes before he even outlines his ideas for how you should spend your reclaimed time. Bennett asks the reader whether they have not ever said to themselves &ldquo;I would love to do such-and-such if only I had the time,&rdquo; or &ldquo;When such-and-such is over I will have time to address this-and-that?&rdquo; We all have the wish to accomplish something beyond our routine, and it will give us no peace (but an awful lot of guilt) until we have done some small thing towards the pursuit of that goal.</p>

<p>Time is unstealable, and is measured out to you a moment at a time without regard to whether you use it wisely, squander it, or deserve it. No amount of birthright, money or genius will increase your allotment. Why spend it sleeping?</p>

<h3>Practice concentrating your mind on a single task.</h3>

<blockquote><p>You practice physical exercises for a mere ten minutes morning and evening, and yet you are not astonished when your physical health and strength are beneficially affected every hour of the day, and your whole physical outlook changed. Why should you be astonished that an average of over an hour a day given to the mind should permanently and completely enliven the whole activity of the mind?&#8221;</p></blockquote>

<p>My mind wanders constantly, even though I have read so much about willpower and meditation. Disciplining the mind has to be the difficulty Bennett warned us of, but he claims that &ldquo;mind control is the first element of a full existence:</p>

<blockquote><p>Nothing whatever happens to us outside our own brain; since nothing hurts us or gives us pleasure except within the brain, the supreme importance of being able to control what goes on in that mysterious brain is patent.</p></blockquote>

<h3>Don&rsquo;t try to take on too much too quickly</h3>

<blockquote><p>Beware of undertaking too much at the start. Be content with quite a little. Allow for accidents. Allow for human nature, especially your own.</p></blockquote>

<p>At New Year&rsquo;s time we make resolutions to eat healthier and exercise more, to spend more time with our families and to watch less TV. These are all laudable goals, but they mostly go out the window before the last day of January. Bennett&rsquo;s advice &ndash; &ldquo;let the pace of the first lap be even absurdly slow, but let it be as regular as possible.&rdquo; Slow and steady wins the race.</p>

<h3>Spend time each day reflecting on how closely your life aligns with your principles.</h3>

<blockquote><p>All martyrs are happy, because their conduct and their principles agree. [Perform a] daily, candid, honest examination of what one has recently done, and what one is about to do — of a steady looking at one&rsquo;s self in the face (disconcerting though the sight may be).</p></blockquote>

<h3>Study the performing arts.</h3>

<blockquote><p>Reading literature is not the only pursuit that will expand your appreciation of the finer things in life. If you enjoy music, pick up a book on how to appreciate music. Then, the next time you found yourself at a concert &ldquo;you would live [there], whereas previously you had merely existed there in a state of beatific coma, like a baby gazing at a bright object.</p></blockquote>

<h3>Read poetry</h3>

<blockquote><p>A good novel rushes you forward like a skiff down a stream, and you arrive at the end, perhaps breathless, but unexhausted. The best novels involve the least strain. Now in the cultivation of the mind one of the most important factors is precisely the feeling of strain, of difficulty, of a task which one part of you is anxious to achieve and another part of you is anxious to shirk; and that feeling cannot be got in facing a novel. Imaginative poetry produces greater mental strain than a novel.</p></blockquote>

<p>Bennett has two suggestions beginning a study of any kind: the first is to define the direction and scope of your efforts, the second suggestion is to think as well as to read.</p>

<blockquote><p>Unless you give at least forty-five minutes to careful, fatiguing reflection (it is an awful bore at first) upon what you are reading, your ninety minutes of a night are chiefly wasted. This means that your pace will be slow.</p></blockquote>

<h3>Don&rsquo;t be smug about it</h3>

<ol>
<li>It is easy to begin judging people who don&rsquo;t follow the same program of rigorous mind expansion as you have:

<blockquote><p>Unconsciously to become a prig is an easy and a fatal thing.</p></blockquote></li>
<li>It is easy to go overboard:

<blockquote><p>A programme of daily employ is not a religion.</p></blockquote></li>
<li>Don&rsquo;t get carried away by the list of things to learn, of being gradually more and more obsessed by what one has to do next.</li>
<li>Don&rsquo;t try to do too much too quickly

<blockquote><p>Let the pace of the first lap be even absurdly slow, but let it be as regular as possible.</p></blockquote></li>
<li>Study what you are interested in

<blockquote><p>In choosing [what to study,] be guided by nothing whatever but your taste and natural inclination.</p></blockquote></li>
</ol>


<p>What an awesome find.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Asides]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/custom-asides/"/>
    <updated>2014-02-15T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/custom-asides</id>
    <content type="html"><![CDATA[<p>I was following a <a href="http://blog.jmac.org/blog/2013/03/30/putting-twitter-back-into-octopress/">tutorial</a> on how to include a twitter widget in the sidebar of my octopress site and couldn&rsquo;t figure out why my twitter content wouldn&rsquo;t render. It turns out that custom asides require an internal div. <!--more-->The process:</p>

<h3>1. Create a twitter timeline widget</h3>

<p>This was surprisingly easy. Just login to <a href="https://twitter.com/">twitter.com</a> and click the settings icon: <i class="fa fa-cog fa-2x"></i></p>

<p>Click &ldquo;Widgets&rdquo; on the bottom of the left nav and follow the instructions.</p>

<p>CAKE WALK.</p>

<h3>2. Create a custom aside</h3>

<p>Perhaps it is the tutorial showing its age, but I couldn&rsquo;t get the content to render as described. I grabbed the widget html and created a file in source/custom/asides:</p>

<figure class='code'><figcaption><span>twitter.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Twitter<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- paste twitter widget code here --&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I looked to the other asides for help, and realized that the content had to be anchored to a div of its own:</p>

<figure class='code'><figcaption><span>div: my saviour</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Twitter<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- paste twitter widget code here --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Add the aside to your _config.yml</h3>

<figure class='code'><figcaption><span>What my _config.yml looks like</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># list each of the sidebar modules you want to include, in the order you want them to appear.</span>
</span><span class='line'><span class="c1"># To add custom asides, create files in /source/_includes/custom/asides/ and add them to the list like &#39;custom/asides/custom_aside_name.html&#39;</span>
</span><span class='line'><span class="n">default_asides</span><span class="p">:</span> <span class="o">[</span><span class="n">custom</span><span class="o">/</span><span class="n">asides</span><span class="o">/</span><span class="n">contactme</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">asides</span><span class="o">/</span><span class="n">recent_posts</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">asides</span><span class="o">/</span><span class="n">github</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">custom</span><span class="o">/</span><span class="n">asides</span><span class="o">/</span><span class="n">aboutme</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">custom</span><span class="o">/</span><span class="n">asides</span><span class="o">/</span><span class="n">twitter</span><span class="o">.</span><span class="n">html</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For Score]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/for-score/"/>
    <updated>2014-02-11T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/for-score</id>
    <content type="html"><![CDATA[<p>The <code>for in</code> statement can function as a quick and semantic iterator for looping over object properties.</p>

<figure class='code'><figcaption><span>In your console, try</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">first_name</span><span class="o">:</span> <span class="s2">&quot;Katie&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">last_name</span> <span class="o">:</span> <span class="s2">&quot;Leonard&quot;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="k">for</span><span class="p">(</span><span class="nx">name</span> <span class="k">in</span> <span class="nx">person</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; : &quot;</span> <span class="o">+</span> <span class="nx">person</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span>
</span><span class='line'>  <span class="p">)};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">first_name</span> <span class="o">:</span> <span class="nx">Katie</span>
</span><span class='line'><span class="nx">last_name</span> <span class="o">:</span> <span class="nx">Leonard</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>Awesome</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=bridgeforpoke-20">JavaScript: The Good Parts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Passionate Programmer]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/the-passionate-programmer/"/>
    <updated>2014-02-10T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/the-passionate-programmer</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/B00AYQNR5U/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00AYQNR5U&amp;linkCode=as2&amp;tag=bridgeforpoke-20">The Passionate Programmer: Creating a Remarkable Career in Software Development</a> (Pragmatic Life), by Chad Fowler
(affiliate link)</p>

<p>This book is aptly titled, and an awesome read. It consists of a series of tips &mdash; strategies Fowler has employed to build his own remarkable career. The most important tip is one that can&rsquo;t really be crossed off a list, and that is to build a successful career in software development one must be passionate about software development.</p>

<h2>Update:</h2>

<p>Unbeknownst to me when I was finishing this book, but knownst to me now is that there has been a vibrant conversation occurring on the interweb about passion and programming. Check out Avdi Grimm&rsquo;s latest, <a href="http://devblog.avdi.org/2014/02/10/the-passion-gospel/">The Passion Gospel</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Augmented Objects]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/augmented-objects/"/>
    <updated>2014-02-09T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/augmented-objects</id>
    <content type="html"><![CDATA[<p>Because it bears repeating: javascript and ruby have many features in common, including the ability to add functionality to existing objects.</p>

<!--more-->


<h2>Ruby singleton</h2>

<p>You can add methods to an instance of a class without affecting any other instances of that class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; x, <span class="nv">y</span> <span class="o">=</span> <span class="s2">&quot;stringA&quot;</span>, <span class="s2">&quot;stringB&quot;</span>
</span><span class='line'>&gt; def x.baz
</span><span class='line'>&gt;   puts <span class="s2">&quot;I can haz?&quot;</span>
</span><span class='line'>&gt; end
</span><span class='line'><span class="c"># =&gt; nil</span>
</span><span class='line'>&gt; x.baz
</span><span class='line'>I can haz?
</span><span class='line'><span class="c"># =&gt; nil</span>
</span><span class='line'>&gt; y.baz
</span><span class='line'>NoMethodError: undefined method <span class="sb">`</span>baz<span class="s1">&#39; for &quot;stringB&quot;:String</span>
</span><span class='line'><span class="s1">  from (irb):62</span>
</span><span class='line'><span class="s1">  from /home/katherine/.rvm/rubies/ruby-2.0.0-rc1/bin/irb:12:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Javascript augmenting</h2>

<p>You can add methods to an of an Array object without affecting any other array objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; var <span class="nv">data1</span> <span class="o">=</span> <span class="o">[</span>1, 2, 3, 4, 5, 6<span class="o">]</span>;
</span><span class='line'>undefined
</span><span class='line'>&gt; var <span class="nv">data2</span> <span class="o">=</span> <span class="o">[</span>2, 4, 6, 8, 10, 12<span class="o">]</span>;
</span><span class='line'>undefined
</span><span class='line'>&gt; data1.total <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span> <span class="k">return </span>21; <span class="o">}</span>;
</span><span class='line'><span class="k">function</span> <span class="o">()</span> <span class="o">{</span> <span class="k">return </span>21; <span class="o">}</span>
</span><span class='line'>&gt; data1.total<span class="o">()</span>;
</span><span class='line'>21
</span><span class='line'>&gt; data2.total<span class="o">()</span>
</span><span class='line'>TypeError: Object <span class="o">[</span>object Array<span class="o">]</span> has no method <span class="s1">&#39;total&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Augmented Types]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/augmented-types/"/>
    <updated>2014-02-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/augmented-types</id>
    <content type="html"><![CDATA[<p>Javascript and Ruby have many features in common, including the ability to add functionality to existing objects.</p>

<!--more-->


<h2>Ruby monkeypatching</h2>

<p>Ruby allows you to reopen classes to add new functionality. For example, I can reopen the String class to add a new method, &ldquo;foo()&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>irb &gt; class String
</span><span class='line'>irb &gt;   def foo
</span><span class='line'>irb &gt;     <span class="s2">&quot;I see you!&quot;</span>
</span><span class='line'>irb &gt;   end
</span><span class='line'>irb &gt; end
</span><span class='line'><span class="c"># =&gt; nil</span>
</span><span class='line'>irb &gt; <span class="s2">&quot;&quot;</span>.class
</span><span class='line'><span class="c"># =&gt; String</span>
</span><span class='line'>irb &gt; <span class="s2">&quot;&quot;</span>.foo
</span><span class='line'><span class="c"># =&gt; &quot;I see you!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Javascript augmenting</h2>

<p>Javascript allows you to augment existing objects with additional functionality.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;I see you!&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;I see you!&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;string&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">.</span><span class="nx">foo</span><span class="p">()</span>
</span><span class='line'><span class="s2">&quot;I see you!&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Abatement]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/global-abatement/"/>
    <updated>2014-02-07T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/global-abatement</id>
    <content type="html"><![CDATA[<h3>or, What the heck is global abatement?</h3>

<p><strong>tldr</strong>: Global variables are <a href="http://en.wikipedia.org/wiki/Code_smell">code smells</a>. Declaring variables inside an application-level function serves to namespace the variables and minimizes the use of global variables. <!--more--></p>

<p>Javascript has function-level scoping, which means that variables declared anywhere within a function are scoped to that function. Writing a javascript without an enclosing function leaves your declared variables vulnerable to name collisions, or reassignment by other javascripts.</p>

<p>A <strong>global abatement</strong> is a strategy used to reduce the vulnerability of your javascript variables by removing them from the global scope. Application namespacing is one such strategy:</p>

<figure class='code'><figcaption><span>BAD GLOBAL</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">first_name</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">last_name</span><span class="o">:</span> <span class="s1">&#39;Kitty&#39;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>GOOD LOCAL</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">first_name</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">last_name</span><span class="o">:</span> <span class="s1">&#39;Kitty&#39;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Declaring an application-level function ensures that the correct <code>person</code> is called when needed. It improves readability by essentially flagging the scope of the variable and reducing ambiguity.</p>

<p><a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=bridgeforpoke-20">JavaScript: The Good Parts</a></p>
]]></content>
  </entry>
  
</feed>
