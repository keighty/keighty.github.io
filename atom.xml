<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[keighty]]></title>
  <link href="http://www.katieleonard.ca/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2017-01-08T13:13:02-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    <email><![CDATA[keighty.leonard@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keighty's 2016 - by the Numbers]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/2016-year-in-review/"/>
    <updated>2016-12-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/2016-year-in-review</id>
    <content type="html"><![CDATA[<p>Many people would like a do-over of 2016, but this was a pretty epic year for me. I was traveling pretty constantly, reading voraciously, and enjoying each left-turn my career has taken me. I started the year helping to build instrumentation for single-page applications, bounced into some UI projects using React, and spent the last quarter ensconced in a crash-course in Java Concurrency. <!--more -->Other highlights include achieving US Residency (so long for now, Canada ðŸ‡¨ðŸ‡¦  ), seeing a more reasonable amount of theater, and shipping more diverse side-project code than ever. Check out my personal infographic (thanks <a href="https://www.canva.com/">canva.com</a>!):</p>

<p><img src="http://www.katieleonard.ca/images/161227-year-in-review/2016-year-in-review.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Browser-sync Is the Easiest Webserver EVER]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/browser-sync-webserver/"/>
    <updated>2016-10-23T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/browser-sync-webserver</id>
    <content type="html"><![CDATA[<p><a href="https://www.browsersync.io/">Browser-sync</a> is the fastest way to spin up a local web server. It will even open your default browser with the entry point you specify, and live-reload your changes as you make them. It couldn&rsquo;t possibly be any simpler to test out a site you&rsquo;re developing locally.</p>

<!--more-->


<h2>1. Install browser-sync</h2>

<p>To get started, install the browser-sync package from npm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g browser-sync
</span></code></pre></td></tr></table></div></figure>


<h2>2. Configure the server</h2>

<p>Setup a simple static project folder like this (<a href="https://gist.github.com/keighty/9e5eb136c27b6a4f98f7c4f49d749256">gist</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>â”œâ”€â”€ bs-config.js
</span><span class='line'>â”œâ”€â”€ foo
</span><span class='line'>â”‚   â””â”€â”€ index.html
</span><span class='line'>â””â”€â”€ index.html
</span></code></pre></td></tr></table></div></figure>


<p>In your bs-config.js file, list the configuration options for how browser-sync should serve your files, including which file extensions it should watch for changes (<code>"*html","*js","*css"</code>), and what resources should be served by a new route name (<code>"/foo": "foo"</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// bs-config.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;files&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;*html&quot;</span><span class="p">,</span><span class="s2">&quot;*js&quot;</span><span class="p">,</span><span class="s2">&quot;*css&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;server&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;port&quot;</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;routes&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;/foo&quot;</span><span class="o">:</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p> Checkout all the options available in the <a href="https://www.browsersync.io/docs/options"> docs</a>.</p>

<p> For this example, I have also included an entry point at index.html, and an additional html file to try a new route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- index.html --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>INDEX<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      This is the index
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- foo/index.html --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>FOO<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      This is a foo
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that you have a sample project outlined, start the server.</p>

<h2>3. Start the web server</h2>

<p><code>$ browser-sync start --config bs-config.js</code></p>

<p>Browser-sync will open your default web browser and load the index.html file:</p>

<p><img src="http://www.katieleonard.ca/images/161023-browser-sync/https2.png"></p>

<p>Test out the router by navigating to <code>localhost:3000/foo</code>, and you should see the content of <code>foo/index.html</code></p>

<p><img src="http://www.katieleonard.ca/images/161023-browser-sync/routes.png"></p>

<p>Serving a local site is just that quick. If you don&rsquo;t know where to start with your bs-config.js file, you can have browser-sync generate one for you:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir testserver <span class="o">&amp;&amp;</span> <span class="nb">cd </span>testserver
</span><span class='line'><span class="nv">$ </span>browser-sync init
</span><span class='line'><span class="o">[</span>BS<span class="o">]</span> Config file created bs-config.js
</span><span class='line'><span class="o">[</span>BS<span class="o">]</span> To use it, in the same directory run: browser-sync start --config bs-config.js
</span></code></pre></td></tr></table></div></figure>


<p>In the generated config file, you find all the options that are used internally, but there are many more described on the <a href="http://www.browsersync.io/docs/options/">website</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;ui&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;port&quot;</span><span class="o">:</span> <span class="mi">3001</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;weinre&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;port&quot;</span><span class="o">:</span> <span class="mi">8080</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;files&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;watchOptions&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>    <span class="s2">&quot;server&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;proxy&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;port&quot;</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;middleware&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;serveStatic&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="s2">&quot;ghostMode&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;clicks&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;scroll&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;forms&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;submit&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;inputs&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;toggles&quot;</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;logLevel&quot;</span><span class="o">:</span> <span class="s2">&quot;info&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;logPrefix&quot;</span><span class="o">:</span> <span class="s2">&quot;BS&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;logConnections&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;logFileChanges&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;logSnippet&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rewriteRules&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="s2">&quot;open&quot;</span><span class="o">:</span> <span class="s2">&quot;local&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;browser&quot;</span><span class="o">:</span> <span class="s2">&quot;default&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;cors&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;xip&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;hostnameSuffix&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;reloadOnRestart&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;notify&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scrollProportionally&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scrollThrottle&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scrollRestoreTechnique&quot;</span><span class="o">:</span> <span class="s2">&quot;window.name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scrollElements&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="s2">&quot;scrollElementMapping&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example: to <a href="https://www.browsersync.io/docs/options#option-https">test your application over https</a>, set <code>"https": true</code> right beneath your server options. When browser-sync opens the browser with your entry point, the browser should warn you that the connection isn&rsquo;t safe:</p>

<p><img src="http://www.katieleonard.ca/images/161023-browser-sync/https.png"></p>

<p>Click on <code>Proceed to localhost (unsafe)</code> to load your content.</p>

<p>Easy peasy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service Workers]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/service-workers/"/>
    <updated>2016-10-15T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/service-workers</id>
    <content type="html"><![CDATA[<p>A service worker is a script that sits between a web page and the network, acting as a proxy for network requests: if the network is available, the request is passed on to the target url; if the network is not available, the service worker will handle the request itself by checking cached responses or or queuing the request for synchronization once the network is available. Service workers are bridging the gap between native mobile applications and traditional web applications that require a network connection to function. Sometimes called progressive web apps, these applications enable a seamless offline experience when the user is not connected to a network.</p>

<!--more-->


<p>Service workers can be used for data synchronization in the background, but data fetching and sync-ing are only one of the ways we can leverage this API. We can:</p>

<ul>
<li>use background resources to perform client-side compilation of assets  (useful for web development)</li>
<li>pre-fetch data that the user is likely going to need in the near future (think photo albums or playlists)</li>
<li>share large data sets between multiple pages</li>
<li>notify mobile users of updates via push notifications</li>
</ul>


<p>For example, <a href="https://www.washingtonpost.com/">The Washington Post</a> uses service workers to send push notifications of breaking news content to users of their web application on android.</p>

<h2>How do they work?</h2>

<p>Service workers rely on the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise API</a> &mdash; a Promise is a proxy for &ldquo;a value that may be  available now, or in the future, or never.&rdquo; They also use the event emitter pattern, where listeners are registered to handle specific events, such as <code>fetch</code> requests.</p>

<p>To employ a service worker you must first register a script with the service worker API: <code>navigator.serviceWorker.register('./sw.js')</code>. Checkout the following example (<a href="https://gist.github.com/keighty/ec1a37a0f6475d7cdf2db64b01eff445.js">get the gist</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- index.html references the javascript application --&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Service worker test app<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app.js</span>
</span><span class='line'><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s1">&#39;sw.js&#39;</span><span class="p">)</span> <span class="c1">// register a worker script with the service</span>
</span><span class='line'><span class="nx">navigator</span><span class="p">.</span><span class="nx">serviceWorker</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">reg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do the following if registration is successful</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">reg</span><span class="p">.</span><span class="nx">installing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// first visit or fresh reload of the worker</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Service worker installing on registration.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">reg</span><span class="p">.</span><span class="nx">waiting</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// a worker may be installed but waiting for another worker to stop</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Service worker already installed on registration.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">reg</span><span class="p">.</span><span class="nx">active</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// pages from the same origin may share a service worker</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Service worker already active on registration.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// if registration is unsuccessful, tell us why</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Registration failed with &#39;</span> <span class="o">+</span> <span class="nx">error</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// sw.js</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;inside registration script&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;install&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Service worker installed.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;activate&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Service worker activated.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Service workers can be registered with a specific origin and path to watch. Since they run in a background thread with a context separate from the application javascript, service workers have no DOM access. So don&rsquo;t try to perform synchronous work (like accessing LocalStorage) or update the DOM from a service worker.</p>

<p>Running this example code sends some output to the console:
<img src="http://www.katieleonard.ca/images/161015-service-workers/service-worker-demo1.png"></p>

<h4>NOTE: A single service worker can control many pages (so be careful with global variables).</h4>

<p><img src="http://www.katieleonard.ca/images/161015-service-workers/service-worker-demo2.png"></p>

<h2>Developing with service workers</h2>

<p>Service workers can only function in a secure context, which means that you can only register a service worker from a web application that is served over <code>https</code>. One option is to use <a href="https://pages.github.com/">GitHub pages</a> to deploy your application, as these pages are generally served over <code>https</code>. Another option is to use a local web server (<code>localhost</code> is considered semi-secure).</p>

<p>I use <a href="https://www.browsersync.io/">Browser-sync</a>, a super light-weight easy to start web server. In my project directory, I start the browser-sync server and set it to watch my javascript files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g browser-sync
</span><span class='line'><span class="nv">$ </span>browser-sync start --server --files *.js
</span><span class='line'><span class="o">[</span>BS<span class="o">]</span> Access URLs:
</span><span class='line'> ----------------------------------
</span><span class='line'>       Local: http://localhost:3000
</span><span class='line'>    External: http://10.0.0.8:3000
</span><span class='line'> ----------------------------------
</span><span class='line'>          UI: http://localhost:3001
</span><span class='line'> UI External: http://10.0.0.8:3001
</span><span class='line'> ----------------------------------
</span><span class='line'><span class="o">[</span>BS<span class="o">]</span> Serving files from: ./
</span><span class='line'><span class="o">[</span>BS<span class="o">]</span> Watching files...
</span></code></pre></td></tr></table></div></figure>


<p>Browser-sync is so helpful, it will even open a browser window for you. :awthanks:</p>

<p>Don&rsquo;t forget to checkout the Chrome developer tools, which can be super helpful in creating different states for your service worker</p>

<p><img src="http://www.katieleonard.ca/images/161015-service-workers/service-worker-dev-tools.png"></p>

<hr />

<h2>MOAR Resources</h2>

<p>For more about the service worker API, checkout these resources:</p>

<ul>
<li>the <a href="https://www.w3.org/TR/service-workers/">W3C spec</a></li>
<li>the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">MDN docs</a></li>
<li>and the <a href="https://github.com/mdn/sw-test/">example</a> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The EventEmitter Pattern and the Event Loop -- a Timeline]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/event-emitter-and-event-loop/"/>
    <updated>2016-10-14T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/event-emitter-and-event-loop</id>
    <content type="html"><![CDATA[<p>The EventEmitter pattern is a derivative of the Observer pattern: an object can notify a set of observers when a change in its state occurs.<!--more--> Consider the following example using the EventEmitter pattern:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">EventEmitter</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">findPattern</span> <span class="o">=</span> <span class="p">(</span><span class="nx">files</span><span class="p">,</span> <span class="nx">regex</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">emitter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventEmitter</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">files</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">file</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">content</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">emitter</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">emitter</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;fileread&#39;</span><span class="p">,</span> <span class="nx">file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">let</span> <span class="nx">match</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">match</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">regex</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">match</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">elem</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">emitter</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;found&#39;</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">elem</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">emitter</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fileA.txt contains the words &quot;hello blah blah blah&quot;</span>
</span><span class='line'><span class="c1">// fileB.json is empty</span>
</span><span class='line'><span class="c1">// fileC.md does not exist</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;fileA.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;fileB.json&#39;</span><span class="p">,</span> <span class="s1">&#39;fileC.md&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">findPattern</span><span class="p">(</span><span class="nx">files</span><span class="p">,</span> <span class="sr">/hello \w+/g</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;fileread&#39;</span><span class="p">,</span> <span class="nx">file</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">file</span><span class="p">}</span> <span class="nx">was</span> <span class="nx">read</span><span class="err">`</span><span class="p">)})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;found&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">match</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Matched</span> <span class="nx">$</span><span class="p">{</span><span class="nx">match</span><span class="p">}</span> <span class="k">in</span> <span class="nx">file</span> <span class="nx">$</span><span class="p">{</span><span class="nx">file</span><span class="p">}</span><span class="err">`</span><span class="p">)})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nb">Error</span> <span class="nx">emitted</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="err">`</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some of the script is executed synchronously, but the real work is done asynchronously. The EventEmitter pattern takes advantage of the event loop to work efficiently.</p>

<p>Keep the following schematic in mind as you parse through the execution of this script:</p>

<p><img src="http://www.katieleonard.ca/images/161012-callbacks/event-loop.png"></p>

<p><em>image credit: Mario Casciaro and Luciano Mammino from Node.js Design Patterns. Colour notations are mine.</em></p>

<p>The first set of operations happen synchronously:</p>

<ul>
<li>call <code>findPattern</code> with the file list and regex pattern</li>
<li>create a new event emitter</li>
<li>submit <code>readFile</code> I/O request for fileA.txt to the event demultiplexer</li>
<li>submit <code>readFile</code> I/O request for fileB.json to the event demultiplexer</li>
<li>submit <code>readFile</code> I/O request for fileC.md to the event demultiplexer</li>
<li>return the event emitter</li>
<li>register <code>fileread</code> listener on the event emitter</li>
<li>register <code>found</code> listener on the event emitter</li>
<li>register <code>error</code> listener on the event emitter</li>
</ul>


<p><img src="http://www.katieleonard.ca/images/161014-event-emitter/event-emitter-1.png"></p>

<p>Once the I/O operations are submitted to the event demultiplexer, they will return in the order in which the requests are fulfilled. In this example, fileC.md does not exist, so the event demultiplexer submits the result along with the handler to the Event loop.</p>

<ul>
<li>The event loop runs the result through the callback for fileC.md, which <strong>emits an error event</strong> (line 9)! The EventEmitter adds the error handler to the event loop.</li>
</ul>


<p><img src="http://www.katieleonard.ca/images/161014-event-emitter/event-emitter-2.png"></p>

<p>In the meantime, the event demultiplexer has fulfilled the I/O request for fileB.json, and added the result and the callback to the event loop.</p>

<ul>
<li>The event loop runs the result through the callback for fileB, which emits a <code>fileread</code> event (line 11). The EventEmitter adds the <code>fileread</code> handler to the event loop.</li>
</ul>


<p>The event demultiplexer also fulfills the I/O request for fileA.txt and adds the result and the callback to the event loop.</p>

<ul>
<li>The event loop runs the result through the callback for fileA, which emits a <code>fileread</code> event (line 11) AND a <code>found</code> event (line 16). The EventEmitter adds the <code>fileread</code> and <code>found</code> handlers to the event loop.</li>
</ul>


<p>The event loop is busily processing all of these events in the order of arrival:</p>

<ul>
<li>run the listener callback for the <code>error</code> event (fileC)</li>
<li>run the listener callback for the <code>fileread</code> event (fileB)</li>
<li>run the listener callback for the <code>fileread</code> event (fileA)</li>
<li>FINALLY &mdash; run the listener callback for the <code>found</code> event (fileA)</li>
</ul>


<p>The result of running this script on the command line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ node --use_strict events.js
</span><span class='line'>Error emitted: ENOENT: no such file or directory, open &#39;fileC.md&#39;
</span><span class='line'>fileB.json was read
</span><span class='line'>fileA.txt was read
</span><span class='line'>Matched hello blah in file fileA.txt
</span></code></pre></td></tr></table></div></figure>


<p><em>Side note: set the flag <code>--use-strict</code> to run scripts using ES6 syntax</em></p>

<p>Why did the files process in what seems to be reverse order? The event demultiplexer adds work to the event loop as it fulfills I/O requests. When <code>readfile()</code> is given three files &mdash; a file with content (fileA), an empty file (fileB), and a non-existent file (fileC) &mdash; it is reasonable to assume that the I/O request for a non-existent file will return first, as there is no file to read. It is also reasonable that an empty file will  return next, as there is very little work to be done reading an empty file. Finally, the I/O request for the file with content returns &mdash; it requires more work to read a file with content than an empty file.</p>

<p>For more about the event emitter pattern in Node, check out <a href="https://www.amazon.com/Node-js-Design-Patterns-Mario-Casciaro/dp/1785885588/ref=sr_1_1/161-7210115-5247461?ie=UTF8&amp;qid=1476284148&amp;sr=8-1&amp;keywords=node.js+design+patterns">Node.js Design Patterns</a> by Mario Casciaro and Luciano Mammino.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Callbacks and the Event Loop]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/clarified-callbacks/"/>
    <updated>2016-10-12T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/clarified-callbacks</id>
    <content type="html"><![CDATA[<p>When I started writing javascript in earnest a couple of years ago, I was stuck in a very procedural way of thinking &mdash; all of my functions executed synchronously. If you replaced <code>function</code> with <code>def</code> and removed all <code>var</code> keywords, you would be reading Ruby (true story: yesterday I was debugging an issue with a React module and put in a <code>binding.pry</code> instead of <code>debugger</code> :facepalm: Old habits die hard).</p>

<p>Last year, I joined a team that writes javascript in the Node.js style, using callbacks for flow control. While I became familiar with the pattern pretty quickly, the whys and wherefores were missing from my understanding. Today I am filling in the gaps by reading <a href="https://www.amazon.com/Node-js-Design-Patterns-Mario-Casciaro/dp/1785885588/ref=sr_1_1/161-7210115-5247461?ie=UTF8&amp;qid=1476284148&amp;sr=8-1&amp;keywords=node.js+design+patterns">Node.js Design Patterns</a> by Mario Casciaro and Luciano Mammino.<!--more--></p>

<h3>The Event Loop</h3>

<p>The first step to understanding asynchronous javascript is to understand the event loop. It is a single thread that processes one message at a time, as they appear in the FIFO event queue.</p>

<p><img src="http://www.katieleonard.ca/images/161012-callbacks/event-loop.png">
<em>image credit: Mario Casciaro and Luciano Mammino from Node.js Design Patterns. Colour notations are mine.</em></p>

<ol>
<li>An I/O request is sent to the event demultiplexer.</li>
<li>The event demultiplexer queues the I/O instructions along with the context and a callback function that contains the instructions for what do to with the result once it is received.</li>
<li>When the I/O order is filled, the event demultiplexer pops an event on to the event queue, with the filled I/O request, and the callback handler.</li>
<li>The event loop pulls the event off of the event queue and applies the result to the callback function.</li>
<li>The event loop either sends the result of the callback operation to the application, or generates more I/O work for the event demultiplexer.</li>
</ol>


<p>When I check my email in the morning, I go through a similar process:</p>

<ul>
<li>My inbox is the event demultiplexer, where requests for resources are made.</li>
<li>I (as the event loop) process emails from in the queue from oldest to newest, and I only process one at at time.</li>
<li>For each message I read the context and perform one of two actions (callback):

<ul>
<li>Process the message and return to the queue to pick up another message.</li>
<li>Add a new action to my todo list event queue along with the a reminder to attach the result of the new action to the email when I respond (callback).</li>
</ul>
</li>
</ul>


<p>When I am finished with my email inbox I start on my todo list, performing the actions required and responding to the email. Sometimes the action will generate additional actions, which I append to the end of my todo list. While the idea of an infinite todo list is a little disheartening to a human, this is how the V8 javascript engine was designed: it performs the work with maximum efficiency, and can do so with only a single thread.</p>

<h3>The difference between synchronous and asynchronous javascript</h3>

<p>Synchronous javascript can be easily identified by the use of a <code>return</code> statement, which returns control back to the caller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">introduction</span> <span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;Hello, my name is &#39;</span> <span class="o">+</span> <span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">lastName</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">introduction</span><span class="p">(</span><span class="s1">&#39;Keighty&#39;</span><span class="p">,</span> <span class="s1">&#39;Leonard&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// &quot;hello! my name is Keighty Leonard&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Asynchronous javascript uses a &lsquo;continuous passing pattern&rsquo;, where the result of a function is passed to a handler for further processing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">createEmailAddress</span> <span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// create asynchronous call</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;before the async&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do some work</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">email</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;@example.com&#39;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;during the async&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// pass the result of the work to the callback</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span><span class="nx">email</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">2000</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;after the async&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">cb</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">createEmailAddress</span><span class="p">(</span><span class="s1">&#39;Keighty&#39;</span><span class="p">,</span> <span class="s1">&#39;Leonard&#39;</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &gt; before the async</span>
</span><span class='line'><span class="c1">// &gt; after the async</span>
</span><span class='line'><span class="c1">// &gt; during the async</span>
</span><span class='line'><span class="c1">// &gt; keighty.leonard@example.com</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>createEmailAddress</code> is called. When execution reaches the setTimeout function, and the 2000ms have elapsed, the callback passed to setTimeout is placed in the event queue, awaiting its turn for execution. The thread is release and does not have to wait for the setTimeout period to elapse before continuing execution &mdash; it continues with the second console statement (&lsquo;after the async&rsquo;). When the setTimeout callback is finally processed, the <code>firstName</code> and <code>lastName</code> variables are still accessible because they exist in the function closure.</p>

<p>Javascript has many features that make the continuous passing pattern easy:</p>

<ul>
<li>Closures allow you to access the environment on which a function was created, no matter when the callback is invoked.</li>
<li>Functions are first class data types, meaning they can be assigned to variables, passed as parameters, and stored in data structures.</li>
</ul>


<hr />

<p>More on the event loop and event-emitter observer pattern to come!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Squash to Speed Up Your Workflow]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/git-squash-to-speed-up-your-workflow/"/>
    <updated>2016-09-12T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/git-squash-to-speed-up-your-workflow</id>
    <content type="html"><![CDATA[<p>I am a big fan of work-in-progress (WIP) commits. When I am working through a prototype or a spike, and need to do some experimentation with the code, I use WIP commits like they are save points in a game. <!--more-->These points act like milestones, and allow me to keep working with the confidence that I can always go back to an earlier working state. I use these aliases for the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># in ~/.bashrc</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">wip</span><span class="o">=</span><span class="s2">&quot;git commit -am &#39;WIP&#39;&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">popwip</span><span class="o">=</span><span class="s2">&quot;git reset --soft head~1; git reset head .&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I get the work into a good state, I <code>wip</code> it (I may even sing ðŸŽ¶ <a href="https://www.youtube.com/watch?v=IIEVqFB4WUo"><em>When a problem comes along&hellip; you must whip it!</em></a> ðŸŽ¶). If I want to grab the last WIP commit from the branch, I <code>popwip</code> to pop the last commit off the stack and put the last bunch of changes back into my working directory.</p>

<p>However, when I have been prototyping for a while, making <code>wip</code> commits as I go, popping a bunch of commits off the stack gets a little unwieldy. Until now I used an interactive rebase to rewrite my branch&rsquo;s commit history. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log --pretty<span class="o">=</span>format:<span class="se">\&quot;</span>%h %ad | %s%d <span class="o">[</span>%an<span class="o">]</span><span class="se">\&quot;</span> --graph --date<span class="o">=</span>short
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.katieleonard.ca/images/160912-git-squash/githist.png"></p>

<p>For this git history, I would rebase on sha 83bfc47:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rebase -i 83bfc47
</span><span class='line'>
</span><span class='line'>pick 540c0fe WIP
</span><span class='line'>pick 8af4cfe WIP
</span><span class='line'>pick 50bd7db WIP
</span><span class='line'>pick f90410b WIP
</span><span class='line'>
</span><span class='line'><span class="c"># Rebase 83bfc47..f90410b onto 83bfc47</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># MOAR git-structions below...</span>
</span></code></pre></td></tr></table></div></figure>


<p>I would proceed to <code>reword</code> the first and <code>fixup</code> the rest, writing a thoughtful and all-encompassing commit message to convey the intention behind this chunk of work. Then I discovered <code>git merge --squash</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout master
</span><span class='line'>Switched to branch <span class="s1">&#39;master&#39;</span>
</span><span class='line'>Your branch is up-to-date with <span class="s1">&#39;origin/master&#39;</span>.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git merge --squash test_branch
</span><span class='line'>Updating 83bfc47..f90410b
</span><span class='line'>Fast-forward
</span><span class='line'>Squash commit -- not updating HEAD
</span><span class='line'> routes/performance.js                          | 3 +++
</span><span class='line'> routes/performer.js                            | 3 +++
</span><span class='line'> routes/user.js                                 | 2 ++
</span><span class='line'> src/app.js                                     | 3 +++
</span><span class='line'> src/components/performance-frame.jsx           | 3 +++
</span><span class='line'> src/containers/filterable-performance-grid.jsx | 3 +++
</span><span class='line'> 6 files changed, 17 insertions<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git status
</span><span class='line'>On branch master
</span><span class='line'>Your branch is up-to-date with <span class="s1">&#39;origin/master&#39;</span>.
</span><span class='line'>Changes to be committed:
</span><span class='line'>  <span class="o">(</span>use <span class="s2">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  modified:   routes/performance.js
</span><span class='line'>  modified:   routes/performer.js
</span><span class='line'>  modified:   routes/user.js
</span><span class='line'>  modified:   src/app.js
</span><span class='line'>  modified:   src/components/performance-frame.jsx
</span><span class='line'>  modified:   src/containers/filterable-performance-grid.jsx
</span></code></pre></td></tr></table></div></figure>


<p>All of the changes I have made on that branch since it diverged from master have been added to the index. I am free to either chunk up the changes into different commits (with commit messages that are more descriptive than WIP), or add them all to a single commit.</p>

<p>GOODBYE <code>rebase -i</code>! <code>Hello merge --squash</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Importing and Exporting: Modular React]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/importing-and-exporting-modular-react/"/>
    <updated>2016-08-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/importing-and-exporting-modular-react</id>
    <content type="html"><![CDATA[<p>While working on rewriting my side-project (VirtualPlaybill) in React, I got hung up on a very basic plumbing concept: named exports. <!--more--></p>

<p>With ES5 you can export in three ways and import in one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// EXPORT STYLE 1</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">crunchy</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CRUNCHY!&#39;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">bacon</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;BACON!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// EXPORT STYLE 2</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">crunchy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CRUNCHY!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">bacon</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;BACON!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// EXPORT STYLE 3 (and my personal favourite)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">breakfast</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">crunchy</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CRUNCHY!&#39;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">bacon</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;BACON!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">breakfast</span>
</span></code></pre></td></tr></table></div></figure>


<p>An export is a meaningful bundle of code. Importing takes a single form, providing a handle to the exported bundle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// IMPORT</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">breakfast</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;breakfast.js&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">breakfast</span><span class="p">.</span><span class="nx">crunchy</span><span class="p">()</span> <span class="c1">// CRUNCHY!</span>
</span><span class='line'><span class="nx">breakfast</span><span class="p">.</span><span class="nx">bacon</span><span class="p">()</span> <span class="c1">// BACON!</span>
</span></code></pre></td></tr></table></div></figure>


<p>In ES6 there is a lot more flexibility: exports can be named and imports can take many forms.</p>

<h4>Named exports</h4>

<p>Importing a named export allows you to grab only the functions you need from a module, leaving the rest behind. Use curly braces to import a named export:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//-----test.js-----//</span>
</span><span class='line'><span class="kr">export</span> <span class="nx">crunchy</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CRUNCHY!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="kr">export</span> <span class="nx">bacon</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;BACON!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// IMPORT BY NAME</span>
</span><span class='line'><span class="c1">//-----main.js-----//</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">crunchy</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./test&#39;</span>
</span><span class='line'><span class="nx">crunchy</span><span class="p">()</span> <span class="c1">// CRUNCHY!</span>
</span><span class='line'><span class="nx">bacon</span><span class="p">()</span> <span class="c1">// Uncaught ReferenceError: bacon is not defined(â€¦)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Default exports</h4>

<p>In addition to named exports, you can specify one <code>default</code> export per file. Simply importing that file provides a reference to the default export:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//-----test.js-----//</span>
</span><span class='line'><span class="kr">export</span> <span class="nx">crunchy</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CRUNCHY!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">default</span> <span class="kr">export</span> <span class="nx">bacon</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;BACON!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// IMPORT BY DEFAULT</span>
</span><span class='line'><span class="c1">//-----main.js-----//</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">myFunc</span> <span class="nx">from</span> <span class="s1">&#39;./test&#39;</span>
</span><span class='line'><span class="nx">myFunc</span><span class="p">()</span> <span class="c1">// BACON!</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also import both default and named exports at the same time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">myFunc</span><span class="p">,</span> <span class="p">{</span> <span class="nx">crunchy</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./test&#39;</span>
</span><span class='line'><span class="nx">crunchy</span><span class="p">()</span> <span class="c1">// CRUNCHY!</span>
</span><span class='line'><span class="nx">myFunc</span><span class="p">()</span> <span class="c1">// BACON!</span>
</span></code></pre></td></tr></table></div></figure>


<p>For even more import options, checkout the section on imports from the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">MDN docs</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">defaultMember</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">name</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">member</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">member</span> <span class="nx">as</span> <span class="nx">alias</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">member1</span> <span class="p">,</span> <span class="nx">member2</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">member1</span> <span class="p">,</span> <span class="nx">member2</span> <span class="nx">as</span> <span class="nx">alias2</span> <span class="p">,</span> <span class="p">[...]</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">defaultMember</span><span class="p">,</span> <span class="p">{</span> <span class="nx">member</span> <span class="p">[</span> <span class="p">,</span> <span class="p">[...]</span> <span class="p">]</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">defaultMember</span><span class="p">,</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">name</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="s2">&quot;module-name&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>name</p>

<blockquote><p>Name of the object that will receive the imported values.</p></blockquote>

<p>member, memberN</p>

<blockquote><p>Name of the exported members to be imported.</p></blockquote>

<p>defaultMember</p>

<blockquote><p>Name of the exported default to be imported.</p></blockquote>

<p>alias, aliasN</p>

<blockquote><p>Name of the object that will receive the imported property</p></blockquote>

<p>module-name</p>

<blockquote><p>The name of the module to import. This is a file name.</p></blockquote>

<h4>What you CAN&rsquo;T do&hellip;</h4>

<p>&hellip; is use ES5 syntax and expect the import to know what you mean:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//------my-component.js-------//</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">MyComponent</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">this</span> <span class="nx">is</span> <span class="nx">an</span> <span class="nx">awesome</span> <span class="nx">react</span> <span class="nx">component</span> <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">MyComponent</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//------main.js-------//</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">MyComponent</span> <span class="nx">from</span> <span class="s1">&#39;./my-component&#39;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MyComponent</span><span class="p">)</span> <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was trying to write ES5 in ES6! Without an explicit <code>export</code> in front of the class declaration, my default had no idea what I intended to export, so it did nothing. Adding <code>export</code> to the class definition, or even moving the whole <code>export default</code> to the class declaration does the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//------my-component.js-------//</span>
</span><span class='line'><span class="k">default</span> <span class="kr">export</span> <span class="kr">class</span> <span class="nx">MyComponent</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">this</span> <span class="nx">is</span> <span class="nx">an</span> <span class="nx">awesome</span> <span class="nx">react</span> <span class="nx">component</span> <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//------main.js-------//</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">MyComponent</span> <span class="nx">from</span> <span class="s1">&#39;./my-component&#39;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MyComponent</span><span class="p">)</span> <span class="c1">// function MyComponent() {...}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to <a href="http://stackoverflow.com/a/31853887">this stackoverflow answer</a> for pointing me in the right direction, and <a href="http://exploringjs.com/es6/ch_modules.html">exploringjs</a> for even greater detail!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nested Routes With Expressjs]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/nested-routes-with-expressjs/"/>
    <updated>2016-04-12T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/nested-routes-with-expressjs</id>
    <content type="html"><![CDATA[<p>Whenever I need to build a quick web application I turn to <a href="http://expressjs.com/">ExpressJS</a>. It is a fast, minimal, easy to configure web server that puts the <strong>E</strong> in <a href="http://mean.io/#!/">MEAN</a>). I wanted to build a REST API for a hobby app and found that the docs for how to nest routes are relatively few (see <a href="http://codetunnel.io/an-intuitive-way-to-organize-your-expressjs-routes/">blog</a>, <a href="http://stackoverflow.com/a/25305272/1279340">stackoverflow answer</a>). Combining these two resources, I learned a simple method for keeping your routes separate while creating a nested routing structure. <!--more--></p>

<h2>The Plan</h2>

<p>I want to create routes that look like these:</p>

<ul>
<li><code>/foo</code></li>
<li><code>/foo/bar</code></li>
<li><code>/foo/42</code></li>
<li><code>/foo/42/baz</code></li>
<li><code>/foo/42/baz/123</code></li>
</ul>


<p>Using the <a href="http://expressjs.com/en/starter/generator.html">express-generator</a> and a few simple commands, you can get your server up and running fast:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install express-generator -g
</span><span class='line'>$ express myapp
</span><span class='line'>$ cd myapp
</span><span class='line'>$ npm install
</span><span class='line'>$ npm start</span></code></pre></td></tr></table></div></figure>


<p>You will end up with a working directory that looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>â”œâ”€â”€ app.js
</span><span class='line'>â”œâ”€â”€ bin
</span><span class='line'>â”‚Â Â  â””â”€â”€ www
</span><span class='line'>â”œâ”€â”€ node_modules
</span><span class='line'>â”‚Â Â  â”œâ”€â”€ ...
</span><span class='line'>â”œâ”€â”€ package.json
</span><span class='line'>â”œâ”€â”€ public
</span><span class='line'>â”‚Â Â  â”œâ”€â”€ images
</span><span class='line'>â”‚Â Â  â”œâ”€â”€ javascripts
</span><span class='line'>â”‚Â Â  â””â”€â”€ stylesheets
</span><span class='line'>â”‚Â Â      â””â”€â”€ style.css
</span><span class='line'>â”œâ”€â”€ routes
</span><span class='line'>â”‚Â Â  â”œâ”€â”€ index.js
</span><span class='line'>â”‚Â Â  â””â”€â”€ users.js
</span><span class='line'>â””â”€â”€ views
</span><span class='line'>    â”œâ”€â”€ error.jade
</span><span class='line'>    â”œâ”€â”€ index.jade
</span><span class='line'>    â””â”€â”€ layout.jade</span></code></pre></td></tr></table></div></figure>


<p>Go ahead and delete the <code>/routes/users.js</code> file and the following lines from <code>app.js</code></p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/users&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then create a new routes file named <code>/routes/foo.js</code> and and require it from your app server.</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/foo&#39;</span><span class="p">,</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/foo&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How to <code>GET /foo</code></h2>

<p>Inside <code>/routes/foo.js</code>, you need to require the router module from ExpressJS, define a route on it, and export it back out.</p>

<figure class='code'><figcaption><span>/routes/foo.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;this is the index for foo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everytime you change a route, you need to restart your server. Nevigating to <a href="http://localhost:3000/foo">localhost:3000/foo</a> should display the message:</p>

<p><img src="http://www.katieleonard.ca/images/160412-nested-routes/foo.png"></p>

<h2>How to <code>GET /foo/bar</code></h2>

<p>Create simple nested routes by requiring the child route file from the parent route file.</p>

<figure class='code'><figcaption><span>/routes/foo.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./bar&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;this is the index for foo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo/bar</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/bar&#39;</span><span class="p">,</span> <span class="nx">bar</span><span class="p">)</span> <span class="c1">// tell the router to use bar.js for child routes</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a new routes file named <code>/routes/bar.js</code> and define a root route the same way you did for <code>/routes/foo.js</code>:</p>

<figure class='code'><figcaption><span>/routes/bar.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo/bar</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;this is the index for bar&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bounce your server again and navigate to <a href="http://localhost:3000/foo/bar">localhost:3000/foo/bar</a></p>

<p><img src="http://www.katieleonard.ca/images/160412-nested-routes/foobar.png"></p>

<h2>How to <code>GET /foo/42</code></h2>

<p>Expecting a parameter? No problem! access URL params directly from the request object: <code>req.params.nameOfParam</code>:</p>

<figure class='code'><figcaption><span>/routes/foo.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// GET /foo/42</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/:number&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;this is foo #&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">number</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>Navigate to <a href="http://localhost:3000/foo/42">localhost:3000/foo/42</a> to see the result.</p>

<p><img src="http://www.katieleonard.ca/images/160412-nested-routes/fooNumber.png"></p>

<h2>How to <code>GET /foo/42/baz</code></h2>

<p>Getting a child route from a parameterized parent is where I was getting confused. It turns out that you need to configure the router a little differently when you are passing params through.</p>

<figure class='code'><figcaption><span>/routes/foo.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">baz</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./baz&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// GET /foo/42/baz</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/:number/baz&#39;</span><span class="p">,</span> <span class="nx">baz</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>You need to pass an options object to <code>express.Router</code> to merge the params from any parent route:</p>

<figure class='code'><figcaption><span>/routes/baz.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">({</span><span class="nx">mergeParams</span><span class="o">:</span> <span class="kc">true</span><span class="p">})</span> <span class="c1">// don&#39;t forget the parent params!</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo/42/baz</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// the param name is from the parent as well</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;this is the baz for foo#&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>Navigate to <a href="http://localhost:3000/foo/42/baz">localhost:3000/foo/42/baz</a> to enjoy your success.</p>

<p><img src="http://www.katieleonard.ca/images/160412-nested-routes/fooNumberBaz.png"></p>

<h2>How to <code>GET /foo/42/baz/123</code></h2>

<p>Parameterizing a child route is the same process as for the parent route:</p>

<figure class='code'><figcaption><span>/routes/baz.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">({</span><span class="nx">mergeParams</span><span class="o">:</span> <span class="kc">true</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo/42/baz</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;this is the baz for foo#&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo/42/baz/123</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/:id&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;baz #&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="err">â€˜</span> <span class="k">for</span> <span class="nx">foo</span> <span class="err">#â€™</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">number</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>Navigate to <a href="http://localhost:3000/foo/42/baz/123">localhost:3000/foo/42/baz/123</a> to enjoy your success.</p>

<p><img src="http://www.katieleonard.ca/images/160412-nested-routes/fooNumberBazNumber.png"></p>

<p>TADA! a model of nested routes that you can apply to any application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preflight Check With CORS -- chainPreflight Option]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/preflight-check-with-cors-chainpreflight-option/"/>
    <updated>2016-04-09T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/preflight-check-with-cors-chainpreflight-option</id>
    <content type="html"><![CDATA[<p>I am working through setting up CORS on a web server, and <a href="http://katieleonard.ca/blog/2016/preflight-check-with-cors/">learning all about Cross-Origin Resource Sharing</a>. When I came across the <strong>chainPreflight</strong> option, I also learned that I didn&rsquo;t have a strong enough understanding of web server vocabulary.<!--more--> Here are the docs for the standard Jetty CrossOriginFilter object:</p>

<p><img src="http://www.katieleonard.ca/images/160329-preflight-cors/chainPreflight-docs.png"></p>

<p>Most references and docs for CORS filtering use the exact same language to describe <code>chainPreflight</code>, but what does it mean for requests to be &ldquo;chained to their target resource?&rdquo; Is this a good thing? If it defaults to true, it must be the expected behaviour&hellip; What about &ldquo;otherwise the filter will response to the preflight?&rdquo; Is that even proper grammar? I asked on <a href="http://stackoverflow.com/q/36414029/1279340">StackOverflow</a>, and five days later, still no answers.</p>

<p>Luckily, I have access to an army of experts at work, and this is what I learned about <strong>chainPreflight</strong>:</p>

<p><img src="http://www.katieleonard.ca/images/160329-preflight-cors/chainPreflight-seq.png"></p>

<p>The &lsquo;target resource&rsquo; is the server endpoint that the request is targeting. If the preflight request is chained to the target resource, it it will pass through the filter (which adds the necessary <code>Allows-*</code> headers) all the way to the endpoint, and the endpoint must have some business logic for handling and responding to the request.</p>

<p>If the preflight request is NOT chained to the target resource, then the filter will add the necessary <code>Allows-*</code> headers and send a response back directly.</p>

<p>Since I don&rsquo;t want to do anything with the OPTIONS preflight request, I can confidently set this option to false, saying &ldquo;whatever you&rsquo;ve got, send it over!&rdquo;</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preflight Check With CORS]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/preflight-check-with-cors/"/>
    <updated>2016-03-29T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/preflight-check-with-cors</id>
    <content type="html"><![CDATA[<p>Modern web applications can draw resources from anywhere on the web. Fonts, JavaScript libraries, images, and other data can be fetched from CDNs, Amazon, IMDB, or anywhere else that provides a public API. Early browsers restricted web applications to same-origin requests, which prevented the sharing of resources between applications, but also ensured that data from one application could not be tampered with by another. The thinkers at the W3C came up with a means of communicating safe cross-origin requests that would allow even destructive remote actions to be performed, as long as the server consented to receive the request. Enter CORS, and preflighting.</p>

<!--more-->


<h3>What is CORS?</h3>

<p>Cross-Origin Resource Sharing occurs when JavaScript on a web page requests data from (or sends data to) a location on a different host. Any website that embeds a video from YouTube, uses a custom font, or posts to social media on your behalf, is making a CORS request. CORS is a <a href="https://www.w3.org/TR/cors/">set of web standards</a> developed to enable safe cross-domain communication.</p>

<h3>What is preflighting?</h3>

<p>CORS functions through the specification of new HTTP headers that allow servers to describe the origin and nature of the request. For each outgoing request to a different domain, the browser will look at the headers to determine if the request that looks like it will affect data on the receiving server. Any simple request that uses one of the common HTTP verbs and a basic Content-Type are allowed to pass without further comment. But if the request has different header values, the browser checks with the server first to make sure the request is expected. This is called a pre-flight check.</p>

<h3>What does a simple CORS request look like?</h3>

<p>For simple requests (no pre-flight check), the method must be one of:</p>

<pre><code>- GET
- HEAD
- POST
</code></pre>

<p>The only extra headers allowed are:</p>

<pre><code>- Accept
- Accept-Language
- Content-Language
- Content-Type
</code></pre>

<p>For the Content-Type header, the only allowed values are:</p>

<pre><code>- application/x-www-form-urlencoded
- multipart/form-data
- text/plain
</code></pre>

<p>XMLHttpRequests (aka XHRs or ajax) use CORS to mitigate the risks of pulling or pushing sensitive data across domains. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;very safe, ordinary text content&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://api.example.com&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">()</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">send</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.katieleonard.ca/images/160329-preflight-cors/cors-without-preflight.png"></p>

<p>The browser checks out the request, sees that it is unlikely to have any negative consequences, and passes it along to the requested endpoint. In the Network tab, simple CORS requests will appear by themselves:</p>

<p><img src="http://www.katieleonard.ca/images/160329-preflight-cors/one-request.png"></p>

<h3>What does a pre-flight CORS request look like?</h3>

<p>For non-simple requests, the method could be any of the HTTP verbs along with any other combination of headers. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;possibly unstable or malicious content&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://api.example.com&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">()</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;application/json&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">send</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this request I am trying to POST a JSON object to an API endpoint, which could potentially have destructive consequences for data on the other side of the endpoint. When the browser inspects the headers of this request it gets suspicious, and fires off a preliminary request to the endpoint with the meta data from the request:</p>

<p><img src="http://www.katieleonard.ca/images/160329-preflight-cors/cors-with-preflight.png"></p>

<p>The server at the endpoint responds to the pre-flight request with a list of authorized headers, including acceptable request origins, content, and actions.</p>

<p>Ignoring for a moment that the requests fail (because api.example.com does not exist), the non-simple CORS request produces two requests instead of one:
<img src="http://www.katieleonard.ca/images/160329-preflight-cors/two-requests.png"></p>

<p>The result of the pre-flight OPTIONS request will determine if the second is ever sent on to the endpoint. This is how browsers keep your application data secure from malicious or unintended changes.</p>

<h3>Why OPTIONS, and not POST?</h3>

<p>I found <a href="http://stackoverflow.com/a/16945321">this great answer</a> on stackoverflow that explains why the creators of CORS made a new request type, <code>OPTIONS</code>. Before the CORS standards were introduced, neither browsers nor servers knew how to handle cross-domain requests. Browsers would throw an error, but servers would process the request without concern. Inventing a new method type that CORS-enabled browsers AND CORS-aware servers could handshake with ensures that both sides are sensible to the meaning of the pre-flight request.</p>

<h4>RESOURCES</h4>

<ul>
<li>Learn more about the web standards at <a href="https://www.w3.org/TR/cors/">W3C</a></li>
<li>Find out more about how CORS is <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests:">implemented at Mozilla</a></li>
<li>Find out what web browsers support CORS at <a href="http://caniuse.com/#search=CORS">caniuse.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keighty's 2015 - by the Numbers]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/keightys-2015-by-the-numbers/"/>
    <updated>2015-12-26T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/keightys-2015-by-the-numbers</id>
    <content type="html"><![CDATA[<p>2015 has been a very eventful year. Not only did I write and launch an ebook about my code school experience, but I have also built and launched a book site, competed in a national <a href="acbl.com">Bridge</a> tournament in New Orleans, celebrated 10 years of wedded bliss with <a href="http://virtual-playbill.herokuapp.com/about">Krista Garver</a>, spent 3 weeks traveling in the Mediterranean, and joined a new team at work where I get to deep-dive into JavaScript and browsers. Checkout my <a href="http://katieleonard.ca/images/151226-year-in-review/2015-year-in-review-infographic.png">infographic</a> for more!<!--more--></p>

<p><img src="http://www.katieleonard.ca/images/151226-year-in-review/2015-year-in-review-infographic.png"></p>

<h4>RESOURCES</h4>

<p>Interested in making your own infographic? Try <a href="http://www.canva.com/">canva</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faster Asset Loading With Cache-Control]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/faster-asset-loading-with-cache-control/"/>
    <updated>2015-11-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/faster-asset-loading-with-cache-control</id>
    <content type="html"><![CDATA[<p>My side project (Virtual Playbill) is an image-heavy application, and I used YSlow to find a few quick performance wins. The first &lsquo;F&rsquo; I got was for No Expires Headers:</p>

<p><img src="http://www.katieleonard.ca/images/151127-cache-control/add-expires-headers.png"></p>

<h3>What is an Expires Header?</h3>

<p>Loading the page requires slow and expensive network calls to download all the JavaScript, CSS, and image files. If someone visits the page more than once, I can avoid using the network by storing a local copy of the files in their browser cache &mdash; temporary local storage that is designed for quick retrieval. I can tell the browser to cache a copy of files that don&rsquo;t change very often by setting Expires headers.</p>

<!--more-->


<p>When a web server receives a request it adds some metadata to the response in the form of HTTP headers. Headers are key-value pairs that tell the browser information about the file it has received, such as how big it is (<code>Content-Length</code>), what kind it is (<code>Content-Type</code>), and how long the browser should cache the response (<code>Cache-Control</code>).</p>

<p>In the case of Virtual Playbill, all the images are served from AWS Simple Storage Service (S3), and there are a couple of ways to add headers.</p>

<h3>1. Tedious Manual Addition</h3>

<p>You can add headers manually to a single asset stored in S3 using the metadata section:
<img src="http://www.katieleonard.ca/images/151127-cache-control/add-metadata-in-s3-0.png">
<img src="http://www.katieleonard.ca/images/151127-cache-control/add-metadata-in-s3-1.png">
<img src="http://www.katieleonard.ca/images/151127-cache-control/add-metadata-in-s3-2.png"></p>

<p>But I have more than a hundred files to change (yawn).</p>

<h3>2. Write a Nodejs Script using <code>aws-sdk</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">aws</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;aws-sdk&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aws</span><span class="p">.</span><span class="nx">S3</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;Your_bucket_name&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">s3</span><span class="p">.</span><span class="nx">listObjects</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Something went wrong when retrieving the list of objects: &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">Contents</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">image</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Key</span> <span class="p">}))</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">imageList</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">collectImageParams</span><span class="p">(</span><span class="nx">imageList</span><span class="p">)</span>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">imageChangeParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">imageChangeParams</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">s3</span><span class="p">.</span><span class="nx">copyObject</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Oops! Something went wrong with copy/replace for &quot;</span> <span class="o">+</span> <span class="nx">params</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Duplicating a file in S3 will change the metadata.</span>
</span><span class='line'><span class="c1">// You can make sure the new file has the same</span>
</span><span class='line'><span class="c1">// access control by passing through the right permissions</span>
</span><span class='line'><span class="c1">// and ContentType along with the new CacheControl header</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">collectImageParams</span><span class="p">(</span><span class="nx">imageList</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">imageList</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">imageName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">imageParams</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;Bucket&#39;</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">Bucket</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;ACL&#39;</span><span class="o">:</span> <span class="s1">&#39;public-read&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;MetadataDirective&#39;</span><span class="o">:</span> <span class="s1">&#39;REPLACE&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;CacheControl&#39;</span><span class="o">:</span> <span class="s1">&#39;max-age=2592000&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;ContentType&#39;</span><span class="o">:</span> <span class="s1">&#39;image/jpeg&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">imageParams</span><span class="p">.</span><span class="nx">Key</span> <span class="o">=</span> <span class="nx">imageName</span>
</span><span class='line'>    <span class="nx">imageParams</span><span class="p">.</span><span class="nx">CopySource</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">imageParams</span><span class="p">.</span><span class="nx">Bucket</span> <span class="o">+</span><span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">imageParams</span><span class="p">.</span><span class="nx">Key</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">imageParams</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Still.. I don&rsquo;t want to have to run this script every time I upload a new file (yawn)&hellip;</p>

<h3>3. Add Headers Every Time You Upload</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">S3Upload</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">uploadToS3</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">public_url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">this_s3upload</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">this_s3upload</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">xhr</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">createCORSRequest</span><span class="p">(</span><span class="s1">&#39;PUT&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="nx">file</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;x-amz-acl&#39;</span><span class="p">,</span> <span class="s1">&#39;public-read&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Set the Cache-Control header for every file upload</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;Cache-Control&#39;</span><span class="p">,</span> <span class="s1">&#39;max-age=2592000&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Great Results</h3>

<p>No matter how you add the Cache-Control header, the result is amazing:
<img src="http://www.katieleonard.ca/images/151127-cache-control/cache-control.png"></p>

<h3>Resources</h3>

<p>For more information about HTTP headers and the browser cache, check out these useful resources:</p>

<ul>
<li><a href="http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/">Beginners Guide to HTTP Cache Headers</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=en">Optimizing Content Efficiency Using HTTP Caching</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Object Property Meta Properties]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/javascript-object-property-meta-properties/"/>
    <updated>2015-11-07T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/javascript-object-property-meta-properties</id>
    <content type="html"><![CDATA[<p>JavaScript Objects are complex types, and even defined properties have a control panel of their own. You can view the content of the control panel using <code>Object.getOwnPropertyDescriptor()</code>, and flip their switches using <code>Object.defineProperty()</code>. <!--more--></p>

<blockquote><p>Note: These property descriptors are for <code>own properties</code> &mdash; that is, properties that are directly defined on an object, not those that come along for the ride on the object&rsquo;s prototype chain.</p></blockquote>

<h3>The property descriptor holds meta data</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; var me = {
</span><span class='line'>  name: "Katie"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>&gt; Object.getOwnPropertyDescriptor( me, "name" )
</span><span class='line'>{
</span><span class='line'>  value: "Katie", // the value associated with the property
</span><span class='line'>  writable: true,   // true if the value of the property can be changed
</span><span class='line'>  enumerable: true, // true if the property shows up during enumeration of the properties
</span><span class='line'>  configurable: true // true if any of these meta properties can be changed
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Change the property value</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Object.defineProperty( me, "name", {
</span><span class='line'>  value: "keighty"
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>me.name // "keighty"</span></code></pre></td></tr></table></div></figure>


<h3>Make the property read only</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Object.defineProperty(me, "name", {
</span><span class='line'>  writable: false
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>me.name = "k80"
</span><span class='line'>me.name  //"keighty" -- actual value of me.name did not change</span></code></pre></td></tr></table></div></figure>


<h3>Make the property hidden from for-loops (or any enumeration)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>me.hobbies = ["bridge", "curling", "tap dancing"]
</span><span class='line'>me // Object {hobbies: Array[3], name: "keighty"}
</span><span class='line'>
</span><span class='line'>for(fact in me) {
</span><span class='line'> console.log(fact)
</span><span class='line'>}
</span><span class='line'>// All the properties defined on me are written to the console:
</span><span class='line'>// name
</span><span class='line'>// hobbies
</span><span class='line'>
</span><span class='line'>Object.defineProperty(me, "name", {
</span><span class='line'> enumerable: false
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>for(fact in me) {
</span><span class='line'> console.log(fact)
</span><span class='line'>}
</span><span class='line'>// Actually.. only enumerable properties are written to the console:
</span><span class='line'>// hobbies</span></code></pre></td></tr></table></div></figure>


<h3>Freeze the property</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Object.defineProperty(me, "name", {
</span><span class='line'> configurable: false
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>Object.getOwnPropertyDescriptor(me, "name")
</span><span class='line'>// { value: "keighty",
</span><span class='line'>//   writable: false,
</span><span class='line'>//   enumerable: false,
</span><span class='line'>//   configurable: false }
</span><span class='line'>
</span><span class='line'>Object.defineProperty(me, "name", {
</span><span class='line'> writable: true
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>Uncaught TypeError: Cannot redefine property: name(â€¦)</span></code></pre></td></tr></table></div></figure>


<p>From <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-8.10">the docs</a>: &ldquo;The Property Descriptor type is used to explain the manipulation and reification of named property attributes. Use Object.defineProperty for fine-grained control over the visibility and mutability of your object&rsquo;s properties.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estimate != Commitment != Target]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/software-estimation-is-hard/"/>
    <updated>2015-10-31T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/software-estimation-is-hard</id>
    <content type="html"><![CDATA[<p>Software estimation is hard, but I didn&rsquo;t really understand why until I started reading <a href="http://www.amazon.com/Software-Estimation-Demystifying-Developer-Practices/dp/0735605351">Software Estimation: Demystifying the Black Art</a> by Steve McConnell. It was published in 2006, and is very much still relevant &mdash; there are more ways to do estimation wrong than to do it right.</p>

<p>The biggest &ldquo;aha&rdquo; moment for me was learning the difference between estimates, targets, and commitments. <!--more-->I always thought that estimates were commitments and treated them like targets. If a task took longer than my estimate, I would worry that I had blown the project plan. The source of my stress was really semantics, and a deep misunderstanding of project plans in general.</p>

<h4>1. An estimate is a range where there is a 90% chance of finding the completion date</h4>

<p>An estimate is not a single point in time &mdash; that is a target. There is uncertainty in software development, and uncertainty about the uncertainty.</p>

<blockquote><p>There is a limit to how well a project can go but no limit to how many problems can occur.</p></blockquote>

<p>Estimates are probability distrubutions of possible outcomes:</p>

<p><img class="left" src="http://www.katieleonard.ca/images/151031-software-estimation/estimation-chart.png"></p>

<p>Most of my experience in estimating projects has been to break a feature down into small tasks and estimate those. Tightly defined requirements for a task make it easier to estimate, but there are always complications that can throw things off track. Thinking about an estimate as a range of possibilities between the best and worst case scenarios reduces stress about being right the first time.</p>

<h4>2. A commitment is a promise to deliver defined functionality at a certain level of quality at a certain date.</h4>

<p>You can use estimates to plan commitments, but not the other way around. If ten features take a year to develop, but your customer needs to have something in six months, you can commit to delivering four or five features by that target, but there is no way you can deliver ten.</p>

<h4>3. A target is a single point in time, and is usually determined by business needs.</h4>

<p>A target has more in common with a commitment than an estimate &mdash; it can have no bearing on the time estimated to complete a project, but will often define the envelope of time. Like in the previous example, the target for delivery to the customer was six months, but the commitment could be four or five features, depending on the estimates for each feature.</p>

<p>Estimation must come before planning, and before you really understand all of the requirements for the project. More often than not, events that happen during the project will have a big impact on the assumptions made to estimate the project at the beginning. Estimates are hard, but McConnell has some awesome advice on how to get it right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Clean Coder]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/the-clean-coder/"/>
    <updated>2015-09-26T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/the-clean-coder</id>
    <content type="html"><![CDATA[<p>In <a href="http://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr_1_1?ie=UTF8&amp;qid=1443288322&amp;sr=8-1&amp;keywords=the+clean+coder">The Clean Coder: A Code of Conduct for Professional Programmers</a>, Bob Martin (Uncle Bob) tells you what it means to be a professional programmer. Much of what distinguishes a professional from a non-professional can be reduced to responsibility: a professional is responsible for their project, their team, and their own career. <!--more--></p>

<p><a href="http://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr_1_1?ie=UTF8&amp;qid=1443288322&amp;sr=8-1&amp;keywords=the+clean+coder"><img class="left" src="http://www.katieleonard.ca/images/150926-clean-coder/cleancoder.jpg"></a></p>

<h2>Protect your projects</h2>

<p>Your first responsibility, according to Uncle Bob, is to your employer, which means doing the job that you have been hired to do.</p>

<ul>
<li><p><strong>Make reasonable estimates.</strong> Your project does not exist in isolation from other parts of the company. An estimate is a probability distribution of likely outcomes, not a single point in time. Many stakeholders rely on your estimates for coordinating marketing, sales, and other downstream tasks.</p></li>
<li><p><strong>Meet your commitments.</strong> Estimates are different from commitments. If you have committed to delivering a feature or a product by a target date, meet that date.</p></li>
</ul>


<blockquote><p>If it can&rsquo;t be done, you can still commit to actions that will bring you closer to the target. Finding out if it can be done can be one of the actions to commit to!</p></blockquote>

<ul>
<li><strong>Protect your time.</strong> An easy way to ensure the success of your project is to devote the time and energy you have already promised in your estimates. Meetings can be disruptive to your workflow, and you should decline any meeting that does not move your project forward. If you can&rsquo;t decline, ask for an agenda and clear goals before you accept.</li>
</ul>


<blockquote><p>Sometimes the meeting will be about something that interests you, but is not immediately necessary. You will have to choose whether you can afford the time. Be careful â€” there may be more than enough of these meetings to consume your days.</p></blockquote>

<h2>Protect your team</h2>

<blockquote><p>A team-player communicates frequently, keeps an eye out for his or her teammates, and executes his or her own responsibilities as well as possible.</p></blockquote>

<ul>
<li><strong>Stand by your original estimates</strong>, and don&rsquo;t confuse them with commitments. Your estimates should protect your team from long hours, undue management pressure, and unpleasant surprises. Don&rsquo;t promise what your team can&rsquo;t deliver.</li>
</ul>


<blockquote><p>Business likes to view estimates as commitments. Developers like to view estimates as guesses. The difference is profound.</p></blockquote>

<ul>
<li><strong>Mentor less experienced engineers.</strong> Contributing to the growth of everyone will make your team stronger. Don&rsquo;t wear your headphones to cut yourself off from interruptions. Making yourself available as a resource will get someone else on the team unstuck, which moves your project forward (Uncle Bob recommends using TDD instead of the Zone to pick up the stack if you have to drop it). â€œIt is unprofessional to be a loner or a recluse on a team.&#8221;</li>
</ul>


<h2>Protect your career</h2>

<p>Your employer is not responsible for keeping your skills up to date. They are not required to ensure that you are aware of cutting edge technologies and languages.</p>

<blockquote><p>Your career is your responsibility. It is not your employer&rsquo;s responsibility to make sure you are marketable. It is not your employer&rsquo;s responsibility to train you, or to send you to conferences, or to buy you books. These things are your responsibility. Woe to the software developer who entrusts his career to his employer.</p></blockquote>

<ul>
<li><strong>Practice coding.</strong> Uncle Bob is a big proponent of practicing code. Performing code kata before starting work will put you in the right frame of mind.</li>
</ul>


<blockquote><p>Professionals practice. True professionals work hard to keep their skills sharp and ready. It is not enough to simply do your daily job and call that practice. Doing your job is daily performance, not practice. Practice is when you specifically exercise your skills outside of the performance of your job for the sole purpose of refining and enhancing those skills.</p></blockquote>

<ul>
<li><strong>Learn about the industry.</strong> Falling behind in new technologies will make you obsolete. You will not stay marketable to new employers (or even your current employer), if you do not stay current.</li>
</ul>


<p>Reading The Clean Coder was like sitting down with a mentor and asking how I can grow my career. I would recommend it for anyone entering the profession today!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep Your Code Close and Your Notes Closer With a Global Gitignore]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/keeping-your-notes-close-to-the-code/"/>
    <updated>2015-09-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/keeping-your-notes-close-to-the-code</id>
    <content type="html"><![CDATA[<p>I like to keep my notes as close to the code as possible. When I start on a new code base, I create a folder at the top called <code>aa_notes</code>. Super obvious, and it makes an awesome scratch pad for things I don&rsquo;t want to lose. So, how can you do this without checking your folder in to source control? Adding it to a local .gitignore is one strategy, but that change will also need to be checked in to git.</p>

<!--more-->


<p>The answer is to use a global gitgnore.</p>

<p>You can configure a global gitignore file in your home directory that will ignore items in every repo on your machine.</p>

<h3>1. Add a folder to your source control</h3>

<p><img src="http://www.katieleonard.ca/images/150918-keep-your-notes-close/add_note_folder.png"></p>

<h3>2. Create a file and git will suggest to track it</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>âžœ  virtualplaybill2 git:(master) touch aa_notes/this_is_a_note_file.md
</span><span class='line'>âžœ  virtualplaybill2 git:(master) âœ— git status
</span><span class='line'>On branch master
</span><span class='line'>Your branch is up-to-date with 'origin/master'.
</span><span class='line'>Untracked files:
</span><span class='line'>  (use "git add file..." to include in what will be committed)
</span><span class='line'>
</span><span class='line'>        aa_notes/
</span><span class='line'>
</span><span class='line'>nothing added to commit but untracked files present (use "git add" to track)</span></code></pre></td></tr></table></div></figure>


<h3>3. Set up your global gitignore</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>âžœ  virtualplaybill2 git:(master) âœ— git config --global core.excludesfile ~/.gitignore_global
</span><span class='line'>âžœ  virtualplaybill2 git:(master) âœ— echo "aa_notes" &gt; ~/.gitignore_global</span></code></pre></td></tr></table></div></figure>


<h3>4. Git will ignore all folders on your machine named aa_notes</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>âžœ  virtualplaybill2 git:(master) âœ— git status
</span><span class='line'>On branch master
</span><span class='line'>Your branch is up-to-date with 'origin/master'.
</span><span class='line'>nothing to commit, working directory clean</span></code></pre></td></tr></table></div></figure>


<p>This comes in super handy when you want to make clarifying notes to yourself without sharing them with all of your collaborators. Of course, if they are good things to share, you should probably add them to the project wiki.</p>

<p>I keep things like daily <a href="https://www.safaribooksonline.com/blog/2014/06/26/information-flow/">infobits</a>, backdoor patches, bits of scripts, and other things. Sometimes writing a note about something helps me remember it a little better, so I still keep my own notes, even if the info is already on the wiki.</p>

<p>Checkout <a href="https://help.github.com/articles/ignoring-files/">this post on GitHub</a> for this and more ideas for fine tuning what git ignores.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hunting Monkey Patches]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/hunting-monkey-patches/"/>
    <updated>2015-08-08T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/hunting-monkey-patches</id>
    <content type="html"><![CDATA[<p>Ruby monkeypatching is a dangerous, but necessary tool. It is convenient to add new behaviours to  existing classes, or to replace existing methods with more customized or secure code. Once the patch is in place, however, it is easy to forget that it is there.</p>

<p>Recently, I was trying to discern the origin of such a patch, and discovered a new (to me) function in pry, my favourite Ruby debugger: <code>show-source</code>.</p>

<!--more-->


<ol>
<li>Put a <code>binding pry</code> below the monkeypatch so that it can be caught at boot time</li>
<li>Use <code>cd</code> to change directories into the reopened class</li>
<li>Use <code>show-source</code> to find the exact location where the method was originally defined</li>
<li>Use <code>show-source -a</code> to show the source and location of EVERY MONKEYPATCH</li>
</ol>


<p>In action:</p>

<h4>1. Debug your code at boot time</h4>

<p><img src="http://www.katieleonard.ca/images/150808-hunting-monkey-patches/step1-pry.png"></p>

<h4>2. Reopen the class</h4>

<p><img src="http://www.katieleonard.ca/images/150808-hunting-monkey-patches/step2-cd.png"></p>

<h4>3. Use &lsquo;show-source&rsquo;</h4>

<p><img src="http://www.katieleonard.ca/images/150808-hunting-monkey-patches/step3-show-source.png"></p>

<h4>4. Use &lsquo;show-source -a&rsquo;</h4>

<p><img src="http://www.katieleonard.ca/images/150808-hunting-monkey-patches/step4-show-source-a1.png">
<img src="http://www.katieleonard.ca/images/150808-hunting-monkey-patches/step4-show-source-a2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Count Your Chickens if They Are ActiveRecord Objects]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/dont-count-your-chickens-if-they-are-active-record-objects/"/>
    <updated>2015-05-07T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/dont-count-your-chickens-if-they-are-active-record-objects</id>
    <content type="html"><![CDATA[<p>You may believe that <code>#length</code>, <code>#size</code>, and <code>#count</code> are fairly equivalent:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>irb(main):002:0&gt; yourRubyChickens =  %w{ Chantecler RedShaver RhodeIslandRed }
</span><span class='line'>=&gt; ["Chantecler", "RedShaver", "RhodeIslandRed"]
</span><span class='line'>irb(main):003:0&gt; yourRubyChickens.length
</span><span class='line'>=&gt; 3
</span><span class='line'>irb(main):004:0&gt; yourRubyChickens.size
</span><span class='line'>=&gt; 3
</span><span class='line'>irb(main):005:0&gt; yourRubyChickens.count
</span><span class='line'>=&gt; 3</span></code></pre></td></tr></table></div></figure>


<p>But, beware of <code>#count</code> in Rails!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1] pry(main)&gt; yourRailsChickens = Chicken.all
</span><span class='line'>  Chicken Load (2.1ms)  SELECT "chickens".* FROM "chickens"
</span><span class='line'>=&gt; [#&lt;ChanteclerChicken:0x007f98eafcd6d8
</span><span class='line'>  id: 1,
</span><span class='line'>  type: "ChanteclerChicken",
</span><span class='line'>  color: "white",
</span><span class='line'>  created_at: Thu, 07 May 2015 14:36:36 UTC +00:00,
</span><span class='line'>  updated_at: Thu, 07 May 2015 14:36:36 UTC +00:00&gt;,
</span><span class='line'> #&lt;RedShaverChicken:0x007f98e63a9428
</span><span class='line'>  id: 2,
</span><span class='line'>  type: "RedShaverChicken",
</span><span class='line'>  color: "white",
</span><span class='line'>  created_at: Thu, 07 May 2015 14:37:01 UTC +00:00,
</span><span class='line'>  updated_at: Thu, 07 May 2015 14:37:01 UTC +00:00&gt;,
</span><span class='line'> #&lt;RedShaverChicken:0x007f98e63a9248
</span><span class='line'>  id: 3,
</span><span class='line'>  type: "RedShaverChicken",
</span><span class='line'>  color: "black",
</span><span class='line'>  created_at: Thu, 07 May 2015 14:37:25 UTC +00:00,
</span><span class='line'>  updated_at: Thu, 07 May 2015 14:37:25 UTC +00:00&gt;,
</span><span class='line'> #&lt;RedShaverChicken:0x007f98e63a9068
</span><span class='line'>  id: 4,
</span><span class='line'>  type: "RedShaverChicken",
</span><span class='line'>  color: "red",
</span><span class='line'>  created_at: Thu, 07 May 2015 14:37:35 UTC +00:00,
</span><span class='line'>  updated_at: Thu, 07 May 2015 14:37:35 UTC +00:00&gt;,
</span><span class='line'> #&lt;RedShaverChicken:0x007f98e63a8e88
</span><span class='line'>  id: 5,
</span><span class='line'>  type: "RedShaverChicken",
</span><span class='line'>  color: "white",
</span><span class='line'>  created_at: Thu, 07 May 2015 14:37:53 UTC +00:00,
</span><span class='line'>  updated_at: Thu, 07 May 2015 14:37:53 UTC +00:00&gt;]
</span><span class='line'>
</span><span class='line'>[2] pry(main)&gt; yourRailsChickens.length
</span><span class='line'>=&gt; 5
</span><span class='line'>[3] pry(main)&gt; yourRailsChickens.size
</span><span class='line'>=&gt; 5
</span><span class='line'>[4] pry(main)&gt; yourRailsChickens.count
</span><span class='line'>   (0.2ms)  SELECT COUNT(*) FROM "chickens"
</span><span class='line'>=&gt; 5</span></code></pre></td></tr></table></div></figure>


<p><code>#size</code> and <code>#length</code> are largely equivalent, but <code>#count</code> issues an additional query to the database that can seriously damage performance for the unsuspecting developer.</p>

<p>For more info, checkout the docs for <a href="http://www.rubydoc.info/docs/rails/4.0.0/ActiveRecord/Calculations:count">count</a> and <a href="http://www.rubydoc.info/docs/rails/4.0.0/ActiveRecord/Associations/CollectionAssociation:length">length</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Local Load Balancing]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/local-load-balancing/"/>
    <updated>2015-04-22T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/local-load-balancing</id>
    <content type="html"><![CDATA[<p>You can mimic the end-user&rsquo;s UI experience accurately enough by running application code locally, but what about the backend? Once your code is deployed to production, requests will be divided between dozens of servers. If there is variation in the code paths running on each server (like during a feature rollout, for example), it is useful to determine beforehand if there are any dangerous conflicts. Enter local load-balancing.</p>

<!--more-->


<p><a href="http://nginx.org/en/">NGiNX</a> is load balancing software that distributes requests across multiple servers, and it&rsquo;s easy to get running quickly.</p>

<h3>Installation</h3>

<p>You can download and compile from source at <a href="http://nginx.org/en/download.html">NGiNX.org</a>, or use <code>brew install nginx</code> on MacOS-X.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>âžœ  api_playground  brew install nginx
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>The default port has been <span class="nb">set </span>in /usr/local/etc/nginx/nginx.conf to 8080 so that nginx can run without sudo.
</span><span class='line'>
</span><span class='line'>To have launchd start nginx at login:
</span><span class='line'>    ln -sfv /usr/local/opt/nginx/*.plist ~/Library/LaunchAgents
</span><span class='line'>Then to load nginx now:
</span><span class='line'>    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist
</span><span class='line'>Or, <span class="k">if </span>you don<span class="err">&#39;</span>t want/need launchctl, you can just run:
</span><span class='line'>    nginx
</span></code></pre></td></tr></table></div></figure>


<p>Start the server with the command <code>nginx</code>.</p>

<h3>Configuration</h3>

<p>Your NGiNX installation added a config file: <code>/usr/local/etc/nginx/nginx.conf</code>. It is mostly commented configuration examples, so you can simply replace the current <code>server</code> configuration block with this:</p>

<figure class='code'><figcaption><span>/usr/local/etc/nginx/nginx.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>upstream myapp1 {
</span><span class='line'>  server localhost:3000;
</span><span class='line'>  server localhost:3030; #add as many servers as you want here
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>server {
</span><span class='line'>  listen 8080;
</span><span class='line'>  server_name localhost;
</span><span class='line'>  location / {
</span><span class='line'>    proxy_pass http://myapp1;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Reload your NGiNX server with <code>nginx -s reload</code>, and hit <a href="localhost:8080">localhost:8080</a> to ensure you have configured it correctly.</p>

<p><img src="http://www.katieleonard.ca/images/150421-local-loadbalancing/welcome_nginx.png"></p>

<h3>Start your servers</h3>

<p>NGiNX is configured and listening on ports 3000 and 3030. Now we just have to connect some servers!</p>

<p><strong>Server 1</strong>: <code>bundle exec rails server -p 3030</code></p>

<p><strong>Server 2</strong>: <code>bundle exec rails server -p 3000 --pid tmp/pids/server2.pid</code></p>

<blockquote><p>Pro-tip: The Rails server stores its process id in a temporary file (<code>/tmp/pids/server.pid</code>), and will complain if you start another server unless you specify a new temporary pid file.</p></blockquote>

<p>Check your progress by hitting localhost:8080:</p>

<p><img src="http://www.katieleonard.ca/images/150421-local-loadbalancing/load_balancing.png"></p>

<p>Checkout the <a href="http://nginx.org/en/docs/http/load_balancing.html">docs</a> for more examples of nginx configuration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Else You Can Do After Code School]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/what-else-you-can-do-after-code-school/"/>
    <updated>2015-04-16T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/what-else-you-can-do-after-code-school</id>
    <content type="html"><![CDATA[<p>Learning to program at a code school is a great opportunity to acquire new skills, and to make your current skills relevant in tech. Becoming a software developer is the most common goal, but there is a wide variety of roles that technical people can play in software that aren&rsquo;t about writing code. Whether you have left a job in customer service, teaching, or research, the skills you gained in your last career will help you fill a niche in your new one. Here are a few paths in tech that don&rsquo;t involve writing software, but do require some experience with coding, frameworks, and methodologies.</p>

<!--more-->


<h3>Product Manager</h3>

<h5>Code School + Business Management</h5>

<p>As a product manager (aka product owner), you decide what features to build by studying the market and learning your customers&#8217; needs. The result of your research is a product road map and business strategy for the next year and beyond. Field experience is essential to making good business decisions.</p>

<h3>Project Manager</h3>

<h5>Code School + Project Management</h5>

<p>A project manager follows the product road map feature by feature. In this role you will be responsible for marshalling resources and delivering product. Excellent communication skills are a must, as is a technical familiarity with the system under construction. You need to ask the right questions, identify risks, validate estimates, and eliminate blockers.</p>

<h3>Engineering Manager</h3>

<h5>Code School + Project Management + People Management</h5>

<p>High-functioning teams do not manifest by chance &mdash; they are the result of deliberate choices made at the intersection of project needs, culture fit, and career growth. As an engineering manager, you don&rsquo;t just assemble the team. You also schedule projects, implement (or remove) processes, grow careers, and communicate up and down the management chain. In addition to all of these tasks, you must be familiar with the job the team is performing.</p>

<h3>Technical Writer</h3>

<h5>Code School + Written Communication Skills</h5>

<p>Writing technical specs and documentation will require all of your technical knowledge as well as language, teaching, and research skills. The technical writing field is expected to grow enormously in the next 10 years<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, and delivering web-based product support will be par for the course. Use your new coding skills to build documentation websites and forums, as well as generate useful content.</p>

<h3>Technical Support</h3>

<h5>Code School + Customer Service</h5>

<p>Technical support is growing at a similar pace to technical writing. Helping users interact successfully with a product is essential to their happiness, and companies have a vested interest in troubleshooting where these interactions go wrong. You act as liaison between the end user and the development and management teams by reporting and triaging bugs, working with developers to resolve issues, and communicating with internal customers as well as external ones.</p>

<h3>Quality Assurance Engineer</h3>

<h5>Code School + Product Knowledge</h5>

<p>As a QA engineer, you are a product expert, not a tester. You understand the way users interact with the product and how the features interact with each other. You can reveal blind spots in design and edge cases of user experience that will catch a feature engineer unawares. Combining attention to detail with a holistic view of the system, QA engineers ensure that users continue to trust the product you are delivering.</p>

<p>Not everyone leaves code school with a passion for building software, but everyone does leave with the skills they need to have an awesome career in tech. No education or experience is wasted, so don&rsquo;t forget to leverage your current skill set as you are learning a new one.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Bureau of Labour Statistics: <a href="http://www.bls.gov/ooh/media-and-communication/technical-writers.htm">Technical Writers</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
