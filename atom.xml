<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[keighty]]></title>
  <link href="http://www.katieleonard.ca/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2014-02-21T08:04:52-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[D3 Is Selective]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/d3-is-selective/"/>
    <updated>2014-02-21T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/d3-is-selective</id>
    <content type="html"><![CDATA[<p>D3 uses the W3C standard selector library, and selection modifiers work on both single and multiple element selections, and will automatically apply the modifier iteratively over the entire collection, which makes your code simpler and easier to maintain.</p>

<!--more-->


<h4>Selection modifiers</h4>

<ul>
<li><strong>d3.select(&lsquo;p&rsquo;).text()</strong>     : retrieve or modify text</li>
<li><strong>d3.select(&lsquo;p&rsquo;).attr()</strong>     : retrieve or modify a given attribute</li>
<li><strong>d3.select(&lsquo;p&rsquo;).classed()</strong>  : retrieve or modify css classes</li>
<li><strong>d3.select(&lsquo;p&rsquo;).style()</strong>    : retrieve or modify styles</li>
<li><strong>d3.select(&lsquo;p&rsquo;).html()</strong>     : retrieve or modify a selections inner html (like text but with tags)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d3.selectAll('div')
</span><span class='line'>            .attr("class", "alert")
</span><span class='line'>            .each(function(d, i) {
</span><span class='line'>              d3.select(this).append("h1").text(i);
</span><span class='line'>            });</span></code></pre></td></tr></table></div></figure>


<p>Selections are essentially arrays with some extra variables baked in. The <code>.each</code> call on line 3 treats the selected elements as an array, and performs a function on each one. The extra variables provided to the iterator function for free are: the data bound to the element (d), the index of the element, and the element itself (this).</p>

<p>Awesome</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Arguing]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/functional-arguing/"/>
    <updated>2014-02-20T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/functional-arguing</id>
    <content type="html"><![CDATA[<p>The <code>arguments</code> variable is a hidden parameter in javascript functions that contains all the arguments for the invocation in a pseudo-array (ie: it does not have array functions other than length and indexing).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">instance</span><span class="p">.</span><span class="nx">headline</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">return</span> <span class="nx">headline</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">headline</span> <span class="o">=</span> <span class="nx">h</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">instance</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even though the function specifically calls for an argument (<code>h</code>), it can still be called without one. This construction has a ruby equivalent, <code>attr_accessor :headline</code>, which behaves as a getter and a setter, depending on the arguments provided (none, or <code>headline = new_value</code>).</p>

<p>This &ldquo;variable-parameter&rdquo; function design is what enables method chaining. When the function is called as a getter it returns a string, but when it is called as a setter it returns the invoking object, passing itself along to the next method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">widget</span> <span class="o">=</span> <span class="nx">SimpleWidget</span><span class="p">({</span> <span class="nx">color</span><span class="o">:</span> <span class="s2">&quot;#6439ed&quot;</span> <span class="p">})</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">headline</span><span class="p">(</span><span class="s2">&quot;SimpleWidget&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">description</span><span class="p">(</span><span class="s2">&quot;This is a simple widget&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Live on 24 Hours a Day]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/how-to-live-on-24-hours-a-day/"/>
    <updated>2014-02-17T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/how-to-live-on-24-hours-a-day</id>
    <content type="html"><![CDATA[<p><a href="http://www.gutenberg.org/files/2274/2274-h/2274-h.htm">How to Live on 24 Hours a Day</a>, by Arnold Bennett (published in 1910)</p>

<h3>Arnold Bennett&rsquo;s recommendations for leading a full and happy life:</h3>

<ol>
<li>Wake up earlier</li>
<li>Practice concentrating your mind on a single task.</li>
<li>Don&rsquo;t try to change too much too quickly.</li>
<li>Spend time each day reflecting on how closely your life aligns with your principles.</li>
<li>Study the performing arts.</li>
<li>Read poetry.</li>
<li>Failing that, read anything except novels, and think about what you read.</li>
<li>Don&rsquo;t be smug about it.</li>
</ol>


<!--more-->


<p>I was surprised to learn that much of the ennui of modern life turns out not to be particularly modern after all. In this often sarcastic essay, Bennett shares his recipe for maximizing &ldquo;the full use of one&rsquo;s time to the great end of living (as distinguished from vegetating).&rdquo;</p>

<h3>Wake up earlier</h3>

<p>In the preface he disposes of the most common excuse for not improving oneself &mdash; I just don&rsquo;t have enough time. The solution is simple:</p>

<blockquote><p>Employ your engines in something beyond [your routine] before, and not after, you employ them on the [routine] itself. Briefly, get up earlier in the morning&hellip; Most people sleep themselves stupid.</p></blockquote>

<p>This call to action comes before he even outlines his ideas for how you should spend your reclaimed time. Bennett asks the reader whether they have not ever said to themselves &ldquo;I would love to do such-and-such if only I had the time,&rdquo; or &ldquo;When such-and-such is over I will have time to address this-and-that?&rdquo; We all have the wish to accomplish something beyond our routine, and it will give us no peace (but an awful lot of guilt) until we have done some small thing towards the pursuit of that goal.</p>

<p>Time is unstealable, and is measured out to you a moment at a time without regard to whether you use it wisely, squander it, or deserve it. No amount of birthright, money or genius will increase your allotment. Why spend it sleeping?</p>

<h3>Practice concentrating your mind on a single task.</h3>

<blockquote><p>You practice physical exercises for a mere ten minutes morning and evening, and yet you are not astonished when your physical health and strength are beneficially affected every hour of the day, and your whole physical outlook changed. Why should you be astonished that an average of over an hour a day given to the mind should permanently and completely enliven the whole activity of the mind?&#8221;</p></blockquote>

<p>My mind wanders constantly, even though I have read so much about willpower and meditation. Disciplining the mind has to be the difficulty Bennett warned us of, but he claims that &ldquo;mind control is the first element of a full existence:</p>

<blockquote><p>Nothing whatever happens to us outside our own brain; since nothing hurts us or gives us pleasure except within the brain, the supreme importance of being able to control what goes on in that mysterious brain is patent.</p></blockquote>

<h3>Don&rsquo;t try to take on too much too quickly</h3>

<blockquote><p>Beware of undertaking too much at the start. Be content with quite a little. Allow for accidents. Allow for human nature, especially your own.</p></blockquote>

<p>At New Year&rsquo;s time we make resolutions to eat healthier and exercise more, to spend more time with our families and to watch less TV. These are all laudable goals, but they mostly go out the window before the last day of January. Bennett&rsquo;s advice &ndash; &ldquo;let the pace of the first lap be even absurdly slow, but let it be as regular as possible.&rdquo; Slow and steady wins the race.</p>

<h3>Spend time each day reflecting on how closely your life aligns with your principles.</h3>

<blockquote><p>All martyrs are happy, because their conduct and their principles agree. [Perform a] daily, candid, honest examination of what one has recently done, and what one is about to do — of a steady looking at one&rsquo;s self in the face (disconcerting though the sight may be).</p></blockquote>

<h3>Study the performing arts.</h3>

<blockquote><p>Reading literature is not the only pursuit that will expand your appreciation of the finer things in life. If you enjoy music, pick up a book on how to appreciate music. Then, the next time you found yourself at a concert &ldquo;you would live [there], whereas previously you had merely existed there in a state of beatific coma, like a baby gazing at a bright object.</p></blockquote>

<h3>Read poetry</h3>

<blockquote><p>A good novel rushes you forward like a skiff down a stream, and you arrive at the end, perhaps breathless, but unexhausted. The best novels involve the least strain. Now in the cultivation of the mind one of the most important factors is precisely the feeling of strain, of difficulty, of a task which one part of you is anxious to achieve and another part of you is anxious to shirk; and that feeling cannot be got in facing a novel. Imaginative poetry produces greater mental strain than a novel.</p></blockquote>

<p>Bennett has two suggestions beginning a study of any kind: the first is to define the direction and scope of your efforts, the second suggestion is to think as well as to read.</p>

<blockquote><p>Unless you give at least forty-five minutes to careful, fatiguing reflection (it is an awful bore at first) upon what you are reading, your ninety minutes of a night are chiefly wasted. This means that your pace will be slow.</p></blockquote>

<h3>Don&rsquo;t be smug about it</h3>

<ol>
<li>It is easy to begin judging people who don&rsquo;t follow the same program of rigorous mind expansion as you have:

<blockquote><p>Unconsciously to become a prig is an easy and a fatal thing.</p></blockquote></li>
<li>It is easy to go overboard:

<blockquote><p>A programme of daily employ is not a religion.</p></blockquote></li>
<li>Don&rsquo;t get carried away by the list of things to learn, of being gradually more and more obsessed by what one has to do next.</li>
<li>Don&rsquo;t try to do too much too quickly

<blockquote><p>Let the pace of the first lap be even absurdly slow, but let it be as regular as possible.</p></blockquote></li>
<li>Study what you are interested in

<blockquote><p>In choosing [what to study,] be guided by nothing whatever but your taste and natural inclination.</p></blockquote></li>
</ol>


<p>What an awesome find.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Asides]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/custom-asides/"/>
    <updated>2014-02-15T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/custom-asides</id>
    <content type="html"><![CDATA[<p>I was following a <a href="http://blog.jmac.org/blog/2013/03/30/putting-twitter-back-into-octopress/">tutorial</a> on how to include a twitter widget in the sidebar of my octopress site and couldn&rsquo;t figure out why my twitter content wouldn&rsquo;t render. It turns out that custom asides require an internal div. <!--more-->The process:</p>

<h3>1. Create a twitter timeline widget</h3>

<p>This was surprisingly easy. Just login to <a href="https://twitter.com/">twitter.com</a> and click the settings icon: <i class="fa fa-cog fa-2x"></i></p>

<p>Click &ldquo;Widgets&rdquo; on the bottom of the left nav and follow the instructions.</p>

<p>CAKE WALK.</p>

<h3>2. Create a custom aside</h3>

<p>Perhaps it is the tutorial showing its age, but I couldn&rsquo;t get the content to render as described. I grabbed the widget html and created a file in source/custom/asides:</p>

<figure class='code'><figcaption><span>twitter.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Twitter<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- paste twitter widget code here --&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I looked to the other asides for help, and realized that the content had to be anchored to a div of its own:</p>

<figure class='code'><figcaption><span>div: my saviour</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Twitter<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- paste twitter widget code here --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Add the aside to your _config.yml</h3>

<figure class='code'><figcaption><span>What my _config.yml looks like</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># list each of the sidebar modules you want to include, in the order you want them to appear.</span>
</span><span class='line'><span class="c1"># To add custom asides, create files in /source/_includes/custom/asides/ and add them to the list like &#39;custom/asides/custom_aside_name.html&#39;</span>
</span><span class='line'><span class="n">default_asides</span><span class="p">:</span> <span class="o">[</span><span class="n">custom</span><span class="o">/</span><span class="n">asides</span><span class="o">/</span><span class="n">contactme</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">asides</span><span class="o">/</span><span class="n">recent_posts</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">asides</span><span class="o">/</span><span class="n">github</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">custom</span><span class="o">/</span><span class="n">asides</span><span class="o">/</span><span class="n">aboutme</span><span class="o">.</span><span class="n">html</span><span class="p">,</span> <span class="n">custom</span><span class="o">/</span><span class="n">asides</span><span class="o">/</span><span class="n">twitter</span><span class="o">.</span><span class="n">html</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For Score]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/for-score/"/>
    <updated>2014-02-11T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/for-score</id>
    <content type="html"><![CDATA[<p>The <code>for in</code> statement can function as a quick and semantic iterator for looping over object properties.</p>

<figure class='code'><figcaption><span>In your console, try</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">first_name</span><span class="o">:</span> <span class="s2">&quot;Katie&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">last_name</span> <span class="o">:</span> <span class="s2">&quot;Leonard&quot;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="k">for</span><span class="p">(</span><span class="nx">name</span> <span class="k">in</span> <span class="nx">person</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; : &quot;</span> <span class="o">+</span> <span class="nx">person</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span>
</span><span class='line'>  <span class="p">)};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">first_name</span> <span class="o">:</span> <span class="nx">Katie</span>
</span><span class='line'><span class="nx">last_name</span> <span class="o">:</span> <span class="nx">Leonard</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>Awesome</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=bridgeforpoke-20">JavaScript: The Good Parts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Passionate Programmer]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/the-passionate-programmer/"/>
    <updated>2014-02-10T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/the-passionate-programmer</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/B00AYQNR5U/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00AYQNR5U&amp;linkCode=as2&amp;tag=bridgeforpoke-20">The Passionate Programmer: Creating a Remarkable Career in Software Development</a> (Pragmatic Life), by Chad Fowler
(affiliate link)</p>

<p>This book is aptly titled, and an awesome read. It consists of a series of tips &mdash; strategies Fowler has employed to build his own remarkable career. The most important tip is one that can&rsquo;t really be crossed off a list, and that is to build a successful career in software development one must be passionate about software development.</p>

<h2>Update:</h2>

<p>Unbeknownst to me when I was finishing this book, but knownst to me now is that there has been a vibrant conversation occurring on the interweb about passion and programming. Check out Avdi Grimm&rsquo;s latest, <a href="http://devblog.avdi.org/2014/02/10/the-passion-gospel/">The Passion Gospel</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Augmented Objects]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/augmented-objects/"/>
    <updated>2014-02-09T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/augmented-objects</id>
    <content type="html"><![CDATA[<p>Because it bears repeating: javascript and ruby have many features in common, including the ability to add functionality to existing objects.</p>

<!--more-->


<h2>Ruby singleton</h2>

<p>You can add methods to an instance of a class without affecting any other instances of that class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; x, <span class="nv">y</span> <span class="o">=</span> <span class="s2">&quot;stringA&quot;</span>, <span class="s2">&quot;stringB&quot;</span>
</span><span class='line'>&gt; def x.baz
</span><span class='line'>&gt;   puts <span class="s2">&quot;I can haz?&quot;</span>
</span><span class='line'>&gt; end
</span><span class='line'><span class="c"># =&gt; nil</span>
</span><span class='line'>&gt; x.baz
</span><span class='line'>I can haz?
</span><span class='line'><span class="c"># =&gt; nil</span>
</span><span class='line'>&gt; y.baz
</span><span class='line'>NoMethodError: undefined method <span class="sb">`</span>baz<span class="s1">&#39; for &quot;stringB&quot;:String</span>
</span><span class='line'><span class="s1">  from (irb):62</span>
</span><span class='line'><span class="s1">  from /home/katherine/.rvm/rubies/ruby-2.0.0-rc1/bin/irb:12:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Javascript augmenting</h2>

<p>You can add methods to an of an Array object without affecting any other array objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; var <span class="nv">data1</span> <span class="o">=</span> <span class="o">[</span>1, 2, 3, 4, 5, 6<span class="o">]</span>;
</span><span class='line'>undefined
</span><span class='line'>&gt; var <span class="nv">data2</span> <span class="o">=</span> <span class="o">[</span>2, 4, 6, 8, 10, 12<span class="o">]</span>;
</span><span class='line'>undefined
</span><span class='line'>&gt; data1.total <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span> <span class="k">return </span>21; <span class="o">}</span>;
</span><span class='line'><span class="k">function</span> <span class="o">()</span> <span class="o">{</span> <span class="k">return </span>21; <span class="o">}</span>
</span><span class='line'>&gt; data1.total<span class="o">()</span>;
</span><span class='line'>21
</span><span class='line'>&gt; data2.total<span class="o">()</span>
</span><span class='line'>TypeError: Object <span class="o">[</span>object Array<span class="o">]</span> has no method <span class="s1">&#39;total&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Augmented Types]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/augmented-types/"/>
    <updated>2014-02-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/augmented-types</id>
    <content type="html"><![CDATA[<p>Javascript and Ruby have many features in common, including the ability to add functionality to existing objects.</p>

<!--more-->


<h2>Ruby monkeypatching</h2>

<p>Ruby allows you to reopen classes to add new functionality. For example, I can reopen the String class to add a new method, &ldquo;foo()&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>irb &gt; class String
</span><span class='line'>irb &gt;   def foo
</span><span class='line'>irb &gt;     <span class="s2">&quot;I see you!&quot;</span>
</span><span class='line'>irb &gt;   end
</span><span class='line'>irb &gt; end
</span><span class='line'><span class="c"># =&gt; nil</span>
</span><span class='line'>irb &gt; <span class="s2">&quot;&quot;</span>.class
</span><span class='line'><span class="c"># =&gt; String</span>
</span><span class='line'>irb &gt; <span class="s2">&quot;&quot;</span>.foo
</span><span class='line'><span class="c"># =&gt; &quot;I see you!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Javascript augmenting</h2>

<p>Javascript allows you to augment existing objects with additional functionality.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;I see you!&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;I see you!&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;string&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">.</span><span class="nx">foo</span><span class="p">()</span>
</span><span class='line'><span class="s2">&quot;I see you!&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Abatement]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/global-abatement/"/>
    <updated>2014-02-07T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/global-abatement</id>
    <content type="html"><![CDATA[<h3>or, What the heck is global abatement?</h3>

<p><strong>tldr</strong>: Global variables are <a href="http://en.wikipedia.org/wiki/Code_smell">code smells</a>. Declaring variables inside an application-level function serves to namespace the variables and minimizes the use of global variables. <!--more--></p>

<p>Javascript has function-level scoping, which means that variables declared anywhere within a function are scoped to that function. Writing a javascript without an enclosing function leaves your declared variables vulnerable to name collisions, or reassignment by other javascripts.</p>

<p>A <strong>global abatement</strong> is a strategy used to reduce the vulnerability of your javascript variables by removing them from the global scope. Application namespacing is one such strategy:</p>

<figure class='code'><figcaption><span>BAD GLOBAL</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">first_name</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">last_name</span><span class="o">:</span> <span class="s1">&#39;Kitty&#39;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>GOOD LOCAL</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">first_name</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">last_name</span><span class="o">:</span> <span class="s1">&#39;Kitty&#39;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Declaring an application-level function ensures that the correct <code>person</code> is called when needed. It improves readability by essentially flagging the scope of the variable and reducing ambiguity.</p>

<p><a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=bridgeforpoke-20">JavaScript: The Good Parts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fanout]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/fanout/"/>
    <updated>2014-02-06T14:38:12-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/fanout</id>
    <content type="html"><![CDATA[<p>Continuing my exploration of message queues&hellip;</p>

<p>A common MQ modality is publish/subscribe. A simplistic queue model has producers publishing messages directly to a queue and consumers taking messages off a queue. In the publish/subscribe model, the producer sends messages to an <strong>exchange</strong>, who&rsquo;s only job is to publish messages to queues. In this scenario, the exchange knows to which queue(s) the message should be published according to established rules. The relationship between an exchange and a queue is called a <strong>binding</strong>.</p>

<!--more-->


<h3>Types of exchanges</h3>

<ol>
<li><strong>direct</strong></li>
<li><strong>topic</strong></li>
<li><strong>headers</strong></li>
<li><strong>fanout</strong> &ndash; broadcasts every message it receives to all the queues it knows</li>
</ol>


<h3>Create a fanout exchange:</h3>

<figure class='code'><figcaption><span>emit_log.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># create and start the connection</span>
</span><span class='line'><span class="n">connection</span> <span class="o">=</span> <span class="no">Bunny</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'><span class="n">connection</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'><span class="c1"># create and start the channel</span>
</span><span class='line'><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">create_channel</span>
</span><span class='line'><span class="c1"># create the exchange:</span>
</span><span class='line'><span class="n">exchange</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">fanout</span><span class="p">(</span><span class="s1">&#39;logs&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># publish to your named exchange:</span>
</span><span class='line'><span class="n">exchange</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'><span class="c1"># close the connection</span>
</span><span class='line'><span class="n">connection</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Create a fanout worker</h3>

<figure class='code'><figcaption><span>receive_log.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># create and start the connection</span>
</span><span class='line'><span class="n">connection</span> <span class="o">=</span> <span class="no">Bunny</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'><span class="n">conn</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'><span class="c1"># create and start the channel</span>
</span><span class='line'><span class="n">channel</span>  <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">create_channel</span>
</span><span class='line'><span class="c1"># name the exchange to listen to</span>
</span><span class='line'><span class="n">exchange</span> <span class="o">=</span> <span class="n">ch</span><span class="o">.</span><span class="n">fanout</span><span class="p">(</span><span class="s2">&quot;logs&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># name the queue</span>
</span><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="n">ch</span><span class="o">.</span><span class="n">queue</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:exclusive</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="c1"># bind the queue to the exchange</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="n">exchange</span><span class="p">)</span>
</span><span class='line'><span class="c1"># subscribe to the bound queue</span>
</span><span class='line'><span class="n">q</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="ss">:block</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">delivery_info</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">body</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot; [x] </span><span class="si">#{</span><span class="n">body</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>In action</h3>

<p>Start three terminals:</p>

<ol>
<li><code>$ ruby -rubygems receive_logs.rb &gt; logs_from_rabbit.log</code></li>
<li><code>$ ruby -rubygems receive_logs.rb</code></li>
<li><code>$ ruby -rubygems emit_log.rb</code></li>
</ol>


<p>In the last terminal, add a few more messages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -rubygems emit_log.rb this is a longer message
</span><span class='line'>$ ruby -rubygems emit_log.rb this message should be logged in a file AND appear in my terminal window</span></code></pre></td></tr></table></div></figure>


<p>The output in terminal 2:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -rubygems receive_logs.rb
</span><span class='line'> [*] Waiting for logs. To exit press CTRL+C
</span><span class='line'> [x] Hello World!
</span><span class='line'> [x] this is a longer message
</span><span class='line'> [x] this message should be logged in a file AND appear in my terminal</span></code></pre></td></tr></table></div></figure>


<p>The output from the log file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat logs_from_rabbit.log
</span><span class='line'> [*] Waiting for logs. To exit press CTRL+C
</span><span class='line'> [x] Hello World!
</span><span class='line'> [x] this is a longer message
</span><span class='line'> [x] this message should be logged in a file AND appear in my terminal</span></code></pre></td></tr></table></div></figure>


<h2>Resources</h2>

<ul>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-three-ruby.html">RabbitMQ.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First in, First Out]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/first-in-first-out/"/>
    <updated>2014-02-05T11:14:30-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/first-in-first-out</id>
    <content type="html"><![CDATA[<h3>Why use message queues?</h3>

<p>Message queues offer the benefits of high reliability at the cost of performance. This is particularly useful for web tasks that may take longer than the typical HTTP request. Requests are persisted, acknowledged, and confirmed asynchronously. They are not dropped or timed out, no matter how long they take to process.</p>

<!--more-->


<h3>Asynchronous request processing with RabbitMQ</h3>

<p>A program that sends messages is a <strong>producer</strong>. A producer drops a message onto a <strong>queue</strong> (like a mailbox). A <strong>consumer</strong> is a program that mostly waits to receive messages, and processes them when they arrive.</p>

<p>RabbitMQ provides message acknowledgments. An ack(nowledgement) is sent back from the consumer to tell the queue that a particular message has been received and processed, and that the queue is free to delete it</p>

<h3>Lets be fair</h3>

<p>By default, RabbitMQ will dispatch messages equitably to all workers, and will not check first to see if the worker is already busy. You can ask the queue to only send messages to a worker if it is available to process a message.</p>

<p>Use <code>channel.prefetch(1)</code> to prevent dispatching a new message to a worker until it has processed and acknowledged the previous one. Instead, RabbitMQ will dispatch it to the next worker that is not still busy. One possible ramification of prefetching is that the queue can become backed up if all workers are busy with long processes, so watch your queue length!</p>

<h3>Useful Commands</h3>

<ul>
<li>list active queues: <code>sudo rabbitmqctl list_queues</code></li>
<li>list queues along with unacknowledged messages: <code>sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</code></li>
</ul>


<h3>Resources</h3>

<ul>
<li><a href="http://www.amazon.com/gp/product/B00HNG8ZFQ/ref=kinw_myk_ro_title">Queue based system architecture</a></li>
<li><a href="http://manning.com/videla/">RabbitMQ in Action: Distributed messaging for everyone</a></li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-one-ruby.html">RabbitMQ.com</a></li>
<li><a href="http://www.rabbitmq.com/install-debian.html">Installation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Afraid of Commitment]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/afraid-of-commitment/"/>
    <updated>2014-02-04T08:04:27-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/afraid-of-commitment</id>
    <content type="html"><![CDATA[<h3>or, how to not fubar your git history</h3>

<p>As with all the git lessons I have learned, this one started with a huge mistake. I had merged a commit to master that was breaking pages I didn&rsquo;t know existed. The sage developer sitting on my right shoulder told me that since I was unsure of how to fix the problem I should revert the offending commit forthwith. <!--more--></p>

<p>I had two choices of commit to revert:</p>

<ol>
<li>remove the offending commit from the branch history</li>
<li>remove the merge commit, where the broken code had infiltrated master</li>
</ol>


<p>While the former is like a surgical excision of a moment in history (eternal sunshine of a spotless git history?), the latter will preserve your branch history, and the context surrounding the changes made. I like a lot of context, so I chose to revert the merge commit.</p>

<p>When you undo a merge, git doesn&rsquo;t know how to reassign the branches. Was the left one master? The right? Does git know left from right? Who is on first? Take the guesswork out of the equation</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout -b revert_branch_name
</span><span class='line'><span class="nv">$ </span>git revert -m 1 &lt;SHA of commit to be reverted&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Warning: If you don’t make the new branch first, you will mess up your merge history on master. Trust me. Just make the branch first. Now you can ensure that your test suite will pass with the commit reverted before you do something silly, like merge even more breakage into master. Crisis averted.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slack]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/slack/"/>
    <updated>2014-02-03T08:06:13-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/slack</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/0932633617/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0932633617&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Slack</a>: Getting Past Burnout, Busywork and the Myth of Total Efficiency, by Tom DeMarco</p>

<p>Trimming the slack from an organization in an effort to reduce overhead will leave a company with an increased profit margin at the cost of becoming inflexible. &ldquo;Slack is the natural enemy of efficiency, and efficiency is the natural enemy of slack.&rdquo; Knowledge work cannot be optimized in the same manner as manufacturing because it is creative by nature, and creative work is requires immersion, experimentation, and&hellip; well.. slack.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Number Is a Double Is a Float]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/a-number-is-a-double-is-a-float/"/>
    <updated>2014-02-02T19:56:17-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/a-number-is-a-double-is-a-float</id>
    <content type="html"><![CDATA[<p>JavaScript has a single number type &mdash; a 64-bit floating point number. Since there is no separate integer type, 1 and 1.0 are the same value.</p>

<!--more-->


<p>One of the consequences is that the <code>/</code> operator may return a floating point number even if both operands are integers. Goodbye casting!</p>

<p><a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=bridgeforpoke-20">JavaScript: The Good Parts</a></p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Add -p]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/git-add-p/"/>
    <updated>2014-02-01T20:51:09-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/git-add-p</id>
    <content type="html"><![CDATA[<p>I learned a new tool that has quickly become an essential part of my workflow. <code>git add -p</code><!--more--> lets you add small hunks of modified code to the index from your working tree in order to prepare your next commit.</p>

<p>The best refactors are small atomic changes, and while I may not always work incrementally, I still want my git history to reflect the ideal. I use <code>git add -p</code> before every commit to ensure that each code change is intentional.</p>

<figure class='code'><figcaption><span>An example from my latest test project.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add -p
</span><span class='line'>diff --git a/send.rb b/send.rb
</span><span class='line'>index 5e89eaf..a0f25b6 100644
</span><span class='line'>--- a/send.rb
</span><span class='line'>+++ b/send.rb
</span><span class='line'>@@ -17,5 +17,5 @@ <span class="nv">queue</span> <span class="o">=</span> channel.queue<span class="o">(</span><span class="s2">&quot;hello&quot;</span><span class="o">)</span>
</span><span class='line'> channel.default_exchange.publish<span class="o">(</span><span class="s2">&quot;Hello world!&quot;</span>, :routing_key <span class="o">=</span>&gt; q.name<span class="o">)</span>
</span><span class='line'> puts <span class="s2">&quot; [x] Sent &#39;Hello World!&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'>-# close the connection
</span><span class='line'>-conn.close
</span><span class='line'><span class="se">\ </span>No newline at end of file
</span><span class='line'>+#close the connection
</span><span class='line'>+connection.close
</span><span class='line'>Stage this hunk <span class="o">[</span>y,n,q,a,d,/,e,?<span class="o">]</span>?
</span></code></pre></td></tr></table></div></figure>


<p>Woah &mdash; that is a lot of information&hellip; lets go through by the numbers:</p>

<ol>
<li>the initial command</li>
<li>tells me that it is showing the changes made in the send.rb file. &lsquo;a&rsquo; is the version already in the commit history, and &lsquo;b&rsquo; is the copy in the working directory.</li>
<li>shows the commit SHA range for this branch</li>
<li>tells me that lines marked with a &lsquo;&ndash;&rsquo; are from the committed version of send.rb</li>
<li>tells me that lines marked with a &lsquo;+&rsquo; are from the working directory version of send.rb</li>
<li><code>@@ -17,5 +17,5 @@</code> indicates that the hunk under scrutiny begins at line 17 of the committed version (&lsquo;-17&rsquo;) and affects 5 lines. It corresponds to the working directory version starting at line 17 (&lsquo;+17&rsquo;), also affecting 5 lines.</li>
<li>the remaining lines contain the details of the changes in the hunk.</li>
</ol>


<h3>Know your options</h3>

<p>Now that you have a hunk, what can you do with it?</p>

<figure class='code'><figcaption><span>Type &#8216;?&#8217; to learn what you can do with your hunk</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>Stage this hunk <span class="o">[</span>y,n,q,a,d,/,e,?<span class="o">]</span> ?
</span><span class='line'>y - stage this hunk
</span><span class='line'>n - <span class="k">do </span>not stage this hunk
</span><span class='line'>q - quit, <span class="k">do </span>not stage this hunk nor any of the remaining ones
</span><span class='line'>a - stage this and all the remaining hunks in the file
</span><span class='line'>d - <span class="k">do </span>not stage this hunk nor any of the remaining hunks in the file
</span><span class='line'>g - <span class="k">select </span>a hunk to go to
</span><span class='line'>/ - search <span class="k">for </span>a hunk matching the given regex
</span><span class='line'>j - leave this hunk undecided, see next undecided hunk
</span><span class='line'>J - leave this hunk undecided, see next hunk
</span><span class='line'>k - leave this hunk undecided, see previous undecided hunk
</span><span class='line'>K - leave this hunk undecided, see previous hunk
</span><span class='line'>s - split the current hunk into smaller hunks
</span><span class='line'>e - manually edit the current hunk
</span><span class='line'>? - print <span class="nb">help</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first few options are obvious choices &mdash; <code>y</code> (&ldquo;Yes, please!&rdquo;), and <code>n</code> (&ldquo;What was I thinking there?&rdquo;), as well as <code>q</code> (&ldquo;Hey, Jane! Get me off this crazy thing!&rdquo;).</p>

<p>I haven&rsquo;t quite got a handle on the middle options, but I have skimmed down and used <code>s</code> to split the hunk into smaller pieces. Split will only divide a hunk if there is a logical place for separation, like a gap between changes. For real index-finesse and line-by-line control you have to&hellip; edit the hunk (gasp).</p>

<p>Seasoned veterans may blanch at the thought of editing a hunk without a GUI, but I have discovered the secret to command-line-hunk-editing-prowess. The secret is:</p>

<h2>Read the instructions</h2>

<p>Revisiting the earlier example, I choose <code>e</code> to edit my hunk. I think the original comment on line 10 is better than the new one on line 13 (spacy == better). Selecting <code>e</code> opens your editor of choice with the now familiar hunk, along with&hellip;</p>

<p>Lo, and behold! Instructions after the hunk!</p>

<p><img src="http://www.katieleonard.ca/images/addp-hunk-edit_diff-8.png"></p>

<p>Simple enough:</p>

<ul>
<li><code>-# close the connection</code> becomes <code># close the connection</code> &mdash; mind the space!</li>
<li>remove <code>+#close the connection</code> entirely</li>
<li>save and close.</li>
</ul>


<p>Success? If you have done everything right, the hunk will be staged and git will move on to the next hunk in your working directory. If you have made an error you will see the following message:</p>

<figure class='code'><figcaption><span>Type &#8216;?&#8217; to learn what you can do with your hunk</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Your edited hunk does not apply.
</span><span class='line'>Edit again <span class="o">(</span>saying <span class="s2">&quot;no&quot;</span> discards!<span class="o">)</span> <span class="o">[</span>y/n<span class="o">]</span>?
</span></code></pre></td></tr></table></div></figure>


<p>Aw nuts. <code>y</code> will let you amend your transgressions (did you remember to save? did you forget to leave a space in place of the &lsquo;&ndash;&rsquo;?), and <code>n</code> will abandon your changes and take you back to the drawing board, where you are free to transgress anew.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Retrieve: A Drama]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/git-retrieve/"/>
    <updated>2014-01-23T20:47:46-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/git-retrieve</id>
    <content type="html"><![CDATA[<p>Have you ever deleted a file on impulse, only to wake up with remorse later? It doesn&rsquo;t matter if later is the next morning or the next week, thanks to git you have the power to reanimate gone-but-not-forgotten files. Nothing is <del>ever</del> EVER lost with git. So how do you retrieve a file that has been deleted in a previous commit?</p>

<!--more-->


<p><a href="http://stackoverflow.com/a/953573">stackoverflow</a> has a few suggestions, and I like this one the best:</p>

<h3>Git Drama in Three Acts</h3>

<figure class='code'><figcaption><span>Act 1 Scene 1: foo.bar Folly</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/very_important_project/
</span><span class='line'><span class="nv">$ </span>touch readme.md index.html foo.bar
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s2">&quot;These changes are AWESOME.&quot;</span>
</span><span class='line'><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> 9155e0b<span class="o">]</span> These changes are AWESOME.
</span><span class='line'> 0 files changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'> create mode 100644 foo.bar
</span><span class='line'> create mode 100644 index.html
</span><span class='line'> create mode 100644 readme.md
</span></code></pre></td></tr></table></div></figure>


<p>but wait! <code>foo.bar</code>?! that is just crazy talk?</p>

<figure class='code'><figcaption><span>Act 1 Scene 2: Regret</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm foo.bar
</span><span class='line'>rm <span class="s1">&#39;foo.bar&#39;</span>
</span><span class='line'><span class="nv">$ </span>git add -u
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;I have made a huge mistake.&quot;</span>
</span><span class='line'><span class="o">[</span>master b045a52<span class="o">]</span> I have made a huge mistake.
</span><span class='line'> 0 files changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'> delete mode 100644 foo.bar
</span></code></pre></td></tr></table></div></figure>


<p>Everything seems back to normal!</p>

<figure class='code'><figcaption><span>Act 2 Scene 1: I have made good life-choices</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;#I rock and I am smug about it!&quot;</span> &gt; bar.rb
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s2">&quot;This work is the BOMB.&quot;</span>
</span><span class='line'><span class="o">[</span>master 3535f28<span class="o">]</span> This work is the BOMB.
</span><span class='line'> 0 files changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'> create mode 100644 bar.rb
</span><span class='line'><span class="nv">$ </span>cat foo.bar
</span><span class='line'>cat: foo.bar: No such file or directory you heartless creature!
</span></code></pre></td></tr></table></div></figure>


<p>but wait! there is no bar without a foo! where is my foo.bar? How can I find it? I have to find the commit where it was deleted, but how? What if I list out the commits that include a deleted file?</p>

<figure class='code'><figcaption><span>Act 2 Scene 2: Regret</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log --diff-filter<span class="o">=</span>D --summary
</span><span class='line'>commit b045a528b4a0824f63562cad867b264983b32c7c
</span><span class='line'>Author: keighty &lt;keighty.leonard@gmail.com&gt;
</span><span class='line'>Date:   Wed Jan 22 20:46:16 2014 -0800
</span><span class='line'>
</span><span class='line'>    I have made a huge mistake.
</span><span class='line'>
</span><span class='line'> delete mode 100644 foo.bar
</span></code></pre></td></tr></table></div></figure>


<p>There you are! in commit b045a528. The summary option shows the details, so you can see what files were deleted, when, and by whom. In some cases, there may be more than one change in a commit, so using <code>commitSHA~1 &lt;filename&gt;</code> will pluck the one precious deleted file from the commit and restore it to your working tree.</p>

<figure class='code'><figcaption><span>Act 3: foo.bar&#8217;s Return</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout b045a528~1 foo.bar
</span><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="c"># On branch master</span>
</span><span class='line'><span class="c"># Changes to be committed:</span>
</span><span class='line'><span class="c">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># new file:   foo.bar</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s2">&quot;Together at last, together forever.&quot;</span>
</span><span class='line'><span class="o">[</span>master 8492eac<span class="o">]</span> Together at last, together forever.
</span><span class='line'> 0 files changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'> create mode 100644 foo.bar
</span></code></pre></td></tr></table></div></figure>


<p>EXEUNT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongod Maintenance]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/maintaining-mongod/"/>
    <updated>2014-01-22T07:23:10-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/maintaining-mongod</id>
    <content type="html"><![CDATA[<p>My laptop&rsquo;s battery died, and I let it. Not a big deal, it is an old laptop and is used to being abused. Every time it does a hard shut down like that I wonder if it will recover. The laptop recovered just fine, but mongo did not. When my computer coughed back to life, I politely requested a meteor server, to which meteor replied that it could not start my server because it could not find a running mongodb. My first instinct, naturally, was to start it up again<!--more-->:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mongo start
</span><span class='line'>MongoDB shell version: 2.4.6
</span><span class='line'>connecting to: start
</span><span class='line'>Mon Jan 20 07:42:47.289 Error: couldn<span class="err">&#39;</span>t connect to server 127.0.0.1:27017 at src/mongo/shell/mongo.js:145
</span><span class='line'>exception: connect failed
</span></code></pre></td></tr></table></div></figure>


<p>Followed by a trip to the logs:</p>

<figure class='code'><figcaption><span>This error has been reformatted to fit your tv.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tail /var/log/mongodb/mongodb.log
</span><span class='line'>*************
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> exception in initAndListen: 10309 Unable to create/open lock file: /var/lib/mongodb/mongod.lock errno:13 Permission denied Is a mongod instance already running?, terminating
</span><span class='line'>dbexit:
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> shutdown: going to close listening sockets...
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> shutdown: going to flush diaglog...
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> shutdown: going to close sockets...
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> shutdown: waiting <span class="k">for </span>fs preallocator...
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> shutdown: closing all files...
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> closeAllFiles<span class="o">()</span> finished
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> shutdown: removing fs lock...
</span><span class='line'><span class="o">[</span>initandlisten<span class="o">]</span> couldn<span class="err">&#39;</span>t remove fs lock errno:9 Bad file descriptor
</span><span class='line'>dbexit: really exiting now
</span></code></pre></td></tr></table></div></figure>


<p>A lock file, you say? Well! I know what to do with those!</p>

<figure class='code'><figcaption><span>Are you sure you want to mess with this?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rm /var/lib/mongodb/mongod.lock
</span><span class='line'>rm: remove write-protected regular file <span class="sb">`</span>/var/lib/mongodb/mongod.lock<span class="err">&#39;</span>? n
</span></code></pre></td></tr></table></div></figure>


<p>No, I am not sure &mdash; thanks for asking! After a deep breath and a reminder that I should not be so hasty (rtfm, katie), I found this note on <a href="http://docs.mongodb.org/manual/reference/configuration-options/#repair">mongodb.org</a>:</p>

<blockquote><p>Note: Because mongod rewrites all of the database files during the repair routine, if you do not run repair under the same user account as mongod usually runs, you will need to run chown on your database files to correct the permissions before starting mongod again.</p></blockquote>

<p>A file rewrite will include a lock file, will it not?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo -u mongodb mongod --repair --dbpath /var/lib/mongodb/
</span><span class='line'><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for </span>keighty:
</span><span class='line'>...
</span><span class='line'>sudo service mongodb start
</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embrace HRT for Collabrative Nirvana]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/embrace-hrt-for-collabrative-nirvana/"/>
    <updated>2014-01-20T07:07:15-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/embrace-hrt-for-collabrative-nirvana</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/1449302440/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1449302440&amp;linkCode=as2&amp;tag=keighty-20">Team Geek: A Software Developer&rsquo;s Guide to Working Well with Others</a> by Brian W. Fitzpatrick and Ben Collins-Sussman.</p>

<p>With decades of collective experience, these two authors distill the essential philosophy required to be part of a healthy development team: HRT &mdash; humility, respect, and trust. These values are covered in the first chapter and the remainder of the book describes how to best use them as an engineer and as a manager. Some techniques particularly resonated with my world view.<!--more--></p>

<h3>Fail early. Fail fast. Fail often</h3>

<p>It is easy to pay lip-service to this philosophy, but it is impossible to adopt without a culture of HRT. From my own limited experience I can add &mdash; Communicate early. Communicate fast. Communicate often. &mdash; as another mantra of healthy team dynamics. Failure is always an option, but without HRT and open lines of communication it can take much more time to discover.</p>

<h3>Make time vs manager time</h3>

<p>Fitzpatrick and Collins-Sussman drew on a lot of great resources, and there is as much gold in the footnotes as there is in the text. They referenced Paul Graham&rsquo;s essay, <a href="http://www.paulgraham.com/makersschedule.html">Maker&rsquo;s Schedule</a>, in which he contrasts the different working styles of managers and makers (writers or programmers). The manager&rsquo;s schedule can be divided into hour-long chunks that may be apportioned to meetings, appointments, or tasks.: the essence of David Allen&rsquo;s <a href="http://www.davidco.com/about-gtd">GTD</a> (Getting Things Done). Makers, on the other hand, cannot be effective in one hour intervals. Graham writes that a single meeting in the afternoon can affect the productivity for a whole day. First it breaks up the afternoon into two pieces that are not long enough to really get into the zone, then it psychologically leaks into the morning where you are &ldquo;less likely to start something ambitious&rdquo;. I can definitely identify with this propensity. The cost of task switching around meetings often results in a lost day.</p>

<h3>Core values</h3>

<p>HRT is the heart of high-functioning teams of any ilk. When I was interviewing for my first job in software development (all those weeks ago) the most difficult question an interviewer could pose to me was &ldquo;where do you see yourself in 5 years&rdquo;? It was difficult because I had just spent the last five years dreaming about writing code for a living. I couldn&rsquo;t even verbalize what I was looking for in a company, only that I would know it when I met it. Now I can identify the traits I was looking for: teams that value writing code and shipping product, consensus based team decision making, asynchronous communication (I am not room-meat), and of course, they&rsquo;ve got to have HeaRT.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open-source Setup:]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/opensource-setup-git-checkout-the-ego/"/>
    <updated>2014-01-18T11:18:29-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/opensource-setup-git-checkout-the-ego</id>
    <content type="html"><![CDATA[<h2><code>git checkout</code> the Ego.</h2>

<p>In the interests of giving back to the software community, I have been looking for an active open-source project to contribute to. I am working to gain mastery of ruby on rails, so naturally I gravitate towards projects of that ilk. Unfortunately, I have gained just enough knowledge to be a little smug, so when I found a project I wanted to work on I scrolled immediately to the README and started scanning.<!--more--> The first block of text was headed by:</p>

<h3>Start here if this is your first ruby on rails project&hellip;</h3>

<p>&hellip;with a link to a blog post. I kept scanning for information that would be relevant to ME. This was not my first ruby on rails project. I have my elaborate dev environment set up just the way I like it, thank you very much, and I can reproduce your project with a flick of my config file, I am sure (chuckles condescendingly). This is a snippet of the proceeding workflow:</p>

<figure class='code'><figcaption><span>Workflow of the egotistical programmer.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone repo
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>repo/
</span><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'>Errors: need to update your rubygems
</span><span class='line'><span class="nv">$ </span>gem update --system
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:setup
</span><span class='line'>Errors: need postgres installed <span class="o">(</span>no inkling in the README<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>brew install postgres
</span><span class='line'>... follow half of the required instructions
</span><span class='line'>Errors
</span><span class='line'>Frustration because you don<span class="err">&#39;</span>t know how to follow instructions
</span><span class='line'><span class="nv">$ </span>brew info postgres
</span><span class='line'>...
</span><span class='line'><span class="s2">&quot;ooooohhhhhhhh... I missed a step&quot;</span>
</span><span class='line'><span class="nv">$ </span>follow instructions this <span class="nb">time</span>
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:setup
</span><span class='line'>Errors: need redis installed
</span><span class='line'><span class="nv">$ </span>brew install redis
</span><span class='line'><span class="nv">$ </span>follow instructions because I have learned my lesson
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:setup
</span><span class='line'>Errors: redis config file missing information
</span><span class='line'>Frustration because redis config file was removed 100 commits ago
</span><span class='line'>...
</span><span class='line'>Determine that first pull request
</span><span class='line'>will be an amendment to setup documentation
</span><span class='line'>Rebuild config file and add host name
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:setup
</span><span class='line'>Errors: required seeds file was removed 100 commits ago
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:migrate
</span><span class='line'><span class="nv">$ </span>SUCCESS!!!
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake spec
</span><span class='line'>Errors: run db:test:prepare
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake db:test:prepare
</span><span class='line'>Errors
</span><span class='line'>Frustration
</span><span class='line'><span class="nv">$ RAILS_ENV</span><span class="o">=</span><span class="nb">test </span>bundle <span class="nb">exec </span>rake db:migrate
</span><span class='line'><span class="nv">$ </span>SUCCESS!!
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake spec
</span><span class='line'>Errors... sigh.. more errors
</span><span class='line'><span class="nv">$ </span>limp away <span class="k">for </span>lunch, live to contribute another day
</span></code></pre></td></tr></table></div></figure>


<p>Getting a new project setup and functional is not an easy chore, and I was quite chastened when I swallowed my pride and checked out the blog post for first timers, which boiled down to:</p>

<ol>
<li>Install <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a></li>
<li>Install <a href="http://www.vagrantup.com/">Vagrant</a></li>
<li><code>git clone repo</code></li>
<li><code>cd repo</code></li>
<li><code>vagrant up</code></li>
<li><code>vagrant ssh</code></li>
<li><code>cd /vagrant</code></li>
<li><code>bundle install</code></li>
<li><code>bundle exec rake db:migrate</code></li>
<li><code>bundle exec rails s</code></li>
</ol>


<p>I could have been contributing hours ago, when I still had momentum! Perhaps my first pull request should still be to modify the README. I would rephrase the heading to read &ldquo;For all developers: get started right here&rdquo;, and then remove every other instruction that followed.</p>

<p>Perhaps I should go get started&hellip;</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor User]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/meteor-user/"/>
    <updated>2014-01-14T19:38:16-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/meteor-user</id>
    <content type="html"><![CDATA[<p><a href="http://www.packtpub.com/getting-started-with-meteor-javascript-framework/book">&ldquo;Getting Started with Meteor.js JavaScript Framework&rdquo;</a> by Isaac Strack is a great introduction to a powerful tool.</p>

<!--more-->


<h3>User accounts in three easy steps</h3>

<p>Meteor rolls its own user accounts system, and getting it running on your application is a three step process:</p>

<figure class='code'><figcaption><span>1) command line: Add the relevant packages</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>meteor add accounts-base
</span><span class='line'>accounts-base: A user account system
</span><span class='line'><span class="nv">$ </span>meteor add accounts-password
</span><span class='line'>accounts-password: Password support <span class="k">for </span>accounts
</span><span class='line'><span class="nv">$ </span>meteor add email
</span><span class='line'>email: Send email messages
</span><span class='line'><span class="nv">$ </span>meteor add accounts-ui
</span><span class='line'>accounts-ui: Simple templates to add login widgets to an app
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>2) html: Add a div to hold the login button</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;float:right; margin-right:20px;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {{loginButtons align=&quot;right&quot;}}
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>3) client javascript: Add an Accounts config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Accounts</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">passwordSignupFields</span><span class="o">:</span> <span class="s1">&#39;USERNAME_AND_OPTIONAL_EMAIL&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The catch</h2>

<p>While the server side and client side code looks similar they are definitely not interchangeable. Server code run on the client side will likely fail silently, but client code run on the server will crash the app. One place where I got tripped up was accessing the userId:</p>

<h3>Server side <code>this.userId</code></h3>

<p><span class='pullquote-right' data-pullquote='Use this.userId inside the server publish function'>
In Meteor server side javascript the context is clear: <code>this</code> is called in the context of a Meteor object, and you can therefore make inquiries about its properties. Use this.userId inside the server publish function to access the id of the current user (or null if no user is logged in &mdash; from the <a href="http://docs.meteor.com/#publish_userId">docs</a>).
</span></p>

<h3>Client side: <code>Meteor.userId()</code></h3>

<p><span class='pullquote-right' data-pullquote='Use Meteor.userId() anywhere BUT in the server publish function'>
In the Meteor client side, <code>this</code> has a different context: the <code>window</code> object. The window object has a userId property that can be set at Document.ready(), but in the case that a user logs out and another user logs in to that same window without a page refresh, <code>window.userId</code> will retain the id of the first user. Use Meteor.userId() anywhere BUT in the server publish function to get the current user id (or null if no user is logged in &mdash; from the <a href="http://docs.meteor.com/#accounts_api">docs</a>).
</span></p>

<p>Thanks to this <a href="http://stackoverflow.com/a/20781135">stackoverflow</a> response, the Meteor <a href="http://docs.meteor.com/">docs</a>, and packtpub&rsquo;s awesome <a href="http://www.packtpub.com/getting-started-with-meteor-javascript-framework/book">support page</a> for helping me get reacquainted with javascript contexts.</p>

<p>Awesome</p>
]]></content>
  </entry>
  
</feed>
