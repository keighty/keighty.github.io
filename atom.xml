<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[keighty]]></title>
  <link href="http://www.katieleonard.ca/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2018-04-01T15:14:42-07:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    <email><![CDATA[keighty.leonard@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Styled Components and Storybooks]]></title>
    <link href="http://www.katieleonard.ca/blog/2018/styled-components-and-storybooks/"/>
    <updated>2018-03-02T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2018/styled-components-and-storybooks</id>
    <content type="html"><![CDATA[<p>I recently discovered two new react development tools that have changed how I approach React component development: <a href="https://storybook.js.org/basics/introduction/">Storybook</a> and <a href="https://www.styled-components.com/docs/basics#getting-started">styled-components</a>. <!--more-->I can quickly prototype a component with its data requirements, styles, and behaviour in one file, and in isolation from the rest of my application. This rapid prototyping has greatly increased my development cycle time, as I spend more time in code and less time flipping between the browser window, the browser console, css files, jsx files, and my terminal.</p>

<p>Using these libraries has also had the pleasant side-effect of helping me design more pure components: instead of using whatever context is available in my giant application, I think about my component interface with real encapsulation in mind.</p>

<h3>Storybook</h3>

<p>Storybook creates a hot-reloading development sandbox outside of your running application, where you can create components free from global app dependencies. Building a component outside of your application context makes you think about what props are really needed to render a component. Is one component actually two components? What is the least amount of information your component needs to be a single atom.</p>

<p>Writing a story for storybook is like writing a spec: you describe the features of the component variant (&ldquo;with long title&rdquo;), and provide a callback that renders your component with props that you specify.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">storiesOf</span><span class="p">(</span><span class="s2">&quot;Playbill&quot;</span><span class="p">,</span> <span class="nx">module</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;basic&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Playbill</span>
</span><span class='line'>      <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">action</span><span class="p">(</span><span class="s2">&quot;navigate to playbill&quot;</span><span class="p">)}</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span>
</span><span class='line'>      <span class="nx">imageUrl</span><span class="o">=</span><span class="s2">&quot;https://virtualplaybill.s3.amazonaws.com/1517893742975_Magellanica&quot;</span>
</span><span class='line'>    <span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;with long title&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Playbill</span>
</span><span class='line'>      <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">action</span><span class="p">(</span><span class="s2">&quot;navigate to playbill&quot;</span><span class="p">)}</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">=</span><span class="s2">&quot;we are proud to present a presentation&quot;</span>
</span><span class='line'>      <span class="nx">imageUrl</span><span class="o">=</span><span class="s2">&quot;https://virtualplaybill.s3.amazonaws.com/1517893742975_Magellanica&quot;</span>
</span><span class='line'>    <span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can interact with your components and see the consequences of those interactions in the action pane below.</p>

<p><img src="http://www.katieleonard.ca/images/180303-styled-components/styled-components.png"></p>

<h3>Styled-components</h3>

<p>Styled-components remove the disconnect between styles and components (they are literally connected with a hyphen ðŸ˜„). Before styled-components, there were clear sides to the Great CSS debate: why do we even need CSS if we inline component styles? Is it just for performance? Why not use the React render cycle to handle dynamic styles?</p>

<p>I am coming pretty late to the party here, but as a solid supporter of CSS over inline styles, styled components have completely won me over. Instead of filling your markup with <code>style=</code> attributes, you create a new component that expresses the styles you specify.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">styled</span> <span class="nx">from</span> <span class="s2">&quot;styled-components&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">PlaybillContainer</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">height</span><span class="o">:</span> <span class="mi">415</span><span class="nx">px</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">width</span><span class="o">:</span> <span class="mi">250</span><span class="nx">px</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">border</span><span class="o">:</span> <span class="mi">1</span><span class="nx">px</span> <span class="nx">solid</span> <span class="nx">black</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">display</span><span class="o">:</span> <span class="nx">flex</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">flex</span><span class="o">-</span><span class="nx">direction</span><span class="o">:</span> <span class="nx">column</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">justify</span><span class="o">-</span><span class="nx">content</span><span class="o">:</span> <span class="nx">space</span><span class="o">-</span><span class="nx">between</span><span class="p">;</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Playbill</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">PlaybillContainer</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Under the hood, styled-components will generate a stylesheet and inject it into the head of your page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">data-styled-components=</span><span class="s">&quot;fAjaVQ cjXYkN ktobWA bNUGoX fSQmFU sPlKa jPyvbr cDsQtG ddUpJT buzCko llbHNh wUSUC eapGFo gcivQF llqivM cHJMlW&quot;</span> <span class="na">data-styled-components-is-local=</span><span class="s">&quot;true&quot;</span> <span class="na">nonce=</span><span class="s">&quot;undefined&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c">/* sc-component-id: sc-fjdhpX */</span>
</span><span class='line'><span class="nc">.sc-fjdhpX</span> <span class="p">{}</span><span class="nc">.cHJMlW</span><span class="p">{</span><span class="k">display</span><span class="o">:</span><span class="k">block</span><span class="p">;</span><span class="k">height</span><span class="o">:</span><span class="m">300px</span><span class="p">;</span><span class="k">width</span><span class="o">:</span><span class="m">250px</span><span class="p">;}</span><span class="nt">&lt;/style&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Styled-components have effectively put an end to the styles-in-Javascript debate. They are an expressive way to have the best of both worlds: inline styles and cascading style sheets.</p>

<h3>Quick start with both Storybook and styled-components</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># install create-react-app</span>
</span><span class='line'><span class="c"># for babel boilerplate</span>
</span><span class='line'>&gt; npm i -g create-react-app
</span><span class='line'>&gt; create-react-app storybook-test-app
</span><span class='line'>&gt; <span class="nb">cd </span>storybook-test-app
</span><span class='line'>&gt; npm i
</span><span class='line'>
</span><span class='line'><span class="c"># install storybook and styled-components</span>
</span><span class='line'>&gt; npm i -g @storybook/cli
</span><span class='line'>&gt; getstorybook
</span><span class='line'>&gt; npm i styled-components
</span><span class='line'>&gt; npm run storybook
</span><span class='line'>
</span><span class='line'><span class="c"># open your new storybook at</span>
</span><span class='line'><span class="c"># http://localhost:9009/</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your stories are saved in <code>src/stories</code>, and you can import them from an adjacent components folder for both quick development, and quick incorporation into your application.</p>

<h3>Example</h3>

<p>I am doing a React rebuild of my side project Virtual-Playbill, and storybook is the perfect place to play around with tweaks to the UI.</p>

<h4>My component</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s2">&quot;react&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">styled</span> <span class="nx">from</span> <span class="s2">&quot;styled-components&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">PlaybillContainer</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">height</span><span class="o">:</span> <span class="mi">415</span><span class="nx">px</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">width</span><span class="o">:</span> <span class="mi">250</span><span class="nx">px</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">border</span><span class="o">:</span> <span class="mi">1</span><span class="nx">px</span> <span class="nx">solid</span> <span class="nx">black</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">display</span><span class="o">:</span> <span class="nx">flex</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">flex</span><span class="o">-</span><span class="nx">direction</span><span class="o">:</span> <span class="nx">column</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">justify</span><span class="o">-</span><span class="nx">content</span><span class="o">:</span> <span class="nx">space</span><span class="o">-</span><span class="nx">between</span><span class="p">;</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">PlaybillHeader</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">padding</span><span class="o">:</span> <span class="mi">10</span><span class="nx">px</span> <span class="mi">0</span> <span class="mi">10</span><span class="nx">px</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="o">:</span> <span class="nx">x</span><span class="o">-</span><span class="nx">large</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">max</span><span class="o">-</span><span class="nx">height</span><span class="o">:</span> <span class="mi">2</span><span class="nx">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">-</span><span class="nx">align</span><span class="o">:</span> <span class="nx">center</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">width</span><span class="o">:</span> <span class="mi">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">:</span> <span class="nx">yellow</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">border</span><span class="o">-</span><span class="nx">bottom</span><span class="o">:</span> <span class="mf">1.5</span><span class="nx">px</span> <span class="nx">solid</span> <span class="nx">black</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">-</span><span class="nx">transform</span><span class="o">:</span> <span class="nx">uppercase</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">font</span><span class="o">-</span><span class="nx">weight</span><span class="o">:</span> <span class="nx">bold</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">letter</span><span class="o">-</span><span class="nx">spacing</span><span class="o">:</span> <span class="mf">2.5</span><span class="nx">px</span><span class="p">;</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">PlaybillTitle</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">-</span><span class="nx">align</span><span class="o">:</span> <span class="nx">center</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">font</span><span class="o">-</span><span class="nx">weight</span><span class="o">:</span> <span class="nx">bold</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="o">:</span> <span class="nx">large</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">max</span><span class="o">-</span><span class="nx">width</span><span class="o">:</span> <span class="mi">95</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">PlaybillImage</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">img</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">display</span><span class="o">:</span> <span class="nx">block</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">height</span><span class="o">:</span> <span class="mi">300</span><span class="nx">px</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">width</span><span class="o">:</span> <span class="mi">250</span><span class="nx">px</span><span class="p">;</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Playbill</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">imageUrl</span><span class="p">,</span> <span class="nx">onClick</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">PlaybillContainer</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onClick</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">PlaybillHeader</span><span class="o">&gt;</span><span class="nx">Virtual</span> <span class="nx">Playbill</span><span class="o">&lt;</span><span class="err">/PlaybillHeader&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">PlaybillTitle</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/PlaybillTitle&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">PlaybillImage</span> <span class="nx">src</span><span class="o">=</span><span class="p">{</span><span class="nx">imageUrl</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/PlaybillContainer&gt;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Playbill</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>My stories</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s2">&quot;react&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">storiesOf</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;@storybook/react&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">action</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;@storybook/addon-actions&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">Playbill</span> <span class="nx">from</span> <span class="s2">&quot;../components/playbill&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">storiesOf</span><span class="p">(</span><span class="s2">&quot;Playbill&quot;</span><span class="p">,</span> <span class="nx">module</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;basic&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Playbill</span>
</span><span class='line'>      <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">action</span><span class="p">(</span><span class="s2">&quot;navigate to playbill&quot;</span><span class="p">)}</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span>
</span><span class='line'>      <span class="nx">imageUrl</span><span class="o">=</span><span class="s2">&quot;https://virtualplaybill.s3.amazonaws.com/1517893742975_Magellanica&quot;</span>
</span><span class='line'>    <span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;with long title&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Playbill</span>
</span><span class='line'>      <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">action</span><span class="p">(</span><span class="s2">&quot;navigate to playbill&quot;</span><span class="p">)}</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">=</span><span class="s2">&quot;we are proud to present a presentation&quot;</span>
</span><span class='line'>      <span class="nx">imageUrl</span><span class="o">=</span><span class="s2">&quot;https://virtualplaybill.s3.amazonaws.com/1517893742975_Magellanica&quot;</span>
</span><span class='line'>    <span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Between styled-components and storybook, I don&rsquo;t need to leave my component file until the component is finished. Feedback cycles are tight, which means I can try out different variations quickly before dropping the component into my application.</p>

<p>Awesome! ðŸ˜Ž</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decorate Your Javascript]]></title>
    <link href="http://www.katieleonard.ca/blog/2018/decorate-your-javascript/"/>
    <updated>2018-02-28T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2018/decorate-your-javascript</id>
    <content type="html"><![CDATA[<p>Javascript decorators are a form of metaprogramming: they add functionality to classes and properties. Unlike the <a href="https://en.wikipedia.org/wiki/Decorator_pattern">GoF pattern</a>, where decorators modify instances of a class, Javascript decorators are run when the class, method, or property is installed, modifying all instances.</p>

<p>Decorators are useful for adding extra functionality to behaviours and properties that would otherwise look like boilerplate &mdash; such as cacheing, access control, logging, or instrumentation.<!--more--></p>

<h3>How does it work?</h3>

<p>A decorator function runs before the object it decorates is installed on the prototype. When you define an undecorated object like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">ExampleWithoutDecoration</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doWork</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;can\&#39;t you see I\&#39;m working here?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Javascript engine creates an object and installs the <code>doWork</code> method on its prototype:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">ExampleWithoutDecoration</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;doWork&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="nx">specifiedFunction</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you define a DECORATED method like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">ExampleWithDecoration</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="nx">DecoratingIsFun</span>
</span><span class='line'>  <span class="nx">doWork</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;can\&#39;t you see I\&#39;m working here?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Javascript engine saves some temporary state, runs the decorator function, and then installs the <code>doWork</code> method on the object&rsquo;s prototype.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">methodDescription</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;method&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">initializer</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">specifiedFunction</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">methodDescription</span> <span class="o">=</span> <span class="nx">DecoratingIsFun</span><span class="p">(</span><span class="nx">ExampleWithDecoration</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;doWork&#39;</span><span class="p">,</span> <span class="nx">methodDescription</span><span class="p">)</span> <span class="o">||</span> <span class="nx">methodDescription</span>
</span><span class='line'>
</span><span class='line'><span class="nx">defineDecoratedProperty</span><span class="p">(</span><span class="nx">ExampleWithDecoration</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;doWork&#39;</span><span class="p">,</span> <span class="nx">methodDescription</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">defineDecoratedProperty</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="p">{</span> <span class="nx">initializer</span><span class="p">,</span> <span class="nx">enumerable</span><span class="p">,</span> <span class="nx">configurable</span><span class="p">,</span> <span class="nx">writable</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">initializer</span><span class="p">(),</span> <span class="nx">enumerable</span><span class="p">,</span> <span class="nx">configurable</span><span class="p">,</span> <span class="nx">writable</span> <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the <code>DecoratingIsFun</code> method is run with <code>this</code> set to the object prototype, and it has the opportunity to modify/return a methodDescription, or use the previously specified methodDescription.</p>

<p>Consider <code>DecoratingMakesSense</code>, which makes the <code>doWork</code> method non-writeable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">DecoratingMakesSense</span> <span class="o">=</span> <span class="p">(</span><span class="nx">object</span><span class="p">,</span> <span class="nx">methodName</span><span class="p">,</span> <span class="nx">description</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Decorating makes sense&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">description</span><span class="p">.</span><span class="nx">writable</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">description</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">ExampleWithDetailedDecoration</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">@</span><span class="nx">DecoratingMakesSense</span>
</span><span class='line'>  <span class="nx">doWork</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;can\&#39;t you see I\&#39;m working here?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">makesSense</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExampleWithDetailedDecoration</span><span class="p">()</span>
</span><span class='line'><span class="nx">makesSense</span><span class="p">.</span><span class="nx">doWork</span><span class="p">()</span>
</span><span class='line'><span class="nx">makesSense</span><span class="p">.</span><span class="nx">doWork</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;some other function&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; node build/main.js
</span><span class='line'>Decorating makes sense
</span><span class='line'>can<span class="s1">&#39;t you see I&#39;</span>m working here?
</span><span class='line'>
</span><span class='line'>/decorator-example/build/main.js:164
</span><span class='line'>makesSense.doWork <span class="o">=</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                  ^
</span><span class='line'>
</span><span class='line'>TypeError: Cannot assign to <span class="nb">read </span>only property <span class="s1">&#39;doWork&#39;</span> of object <span class="s1">&#39;#&lt;ExampleWithDetailedDecoration&gt;&#39;</span>
</span><span class='line'>    at Object.defineProperty.value <span class="o">(</span>/decorator-example/build/main.js:164:19<span class="o">)</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h3>Getting started</h3>

<p>Since decorators are currently in the <a href="https://tc39.github.io/proposal-decorators/">proposal stage</a>, getting started requires a little tweaking of your standard babel/webpack/linter configs.</p>

<h4>Babel</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; npm install -g webpack
</span><span class='line'>&gt; npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-plugin-transform-decorators-legacy
</span></code></pre></td></tr></table></div></figure>


<p>In your .babelrc</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;presets&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;es2015&quot;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  <span class="s2">&quot;plugins&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;transform-decorators-legacy&quot;</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Webpack</h4>

<p>Here is a barebones webpack.config.js example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">path</span> <span class="o">=</span> require<span class="o">(</span><span class="s1">&#39;path&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>module.exports <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  entry: <span class="s1">&#39;./index.js&#39;</span>,
</span><span class='line'>  output: <span class="o">{</span>
</span><span class='line'>    path: path.resolve<span class="o">(</span>__dirname, <span class="s1">&#39;build&#39;</span><span class="o">)</span>,
</span><span class='line'>    filename: <span class="s1">&#39;main.js&#39;</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  module: <span class="o">{</span>
</span><span class='line'>      loaders: <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="nb">test</span>: /<span class="se">\.</span>js<span class="nv">$/</span>,
</span><span class='line'>      exclude: /node_modules/,
</span><span class='line'>      loader: <span class="s1">&#39;babel-loader&#39;</span>,
</span><span class='line'>      query: <span class="o">{</span>
</span><span class='line'>        cacheDirectory: <span class="nb">true</span>,
</span><span class='line'>        plugins: <span class="o">[</span>
</span><span class='line'>          <span class="s1">&#39;transform-decorators-legacy&#39;</span>,
</span><span class='line'>        <span class="o">]</span>,
</span><span class='line'>        presets: <span class="o">[</span><span class="s1">&#39;es2015&#39;</span><span class="o">]</span>,
</span><span class='line'>      <span class="o">}</span>,
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  stats: <span class="o">{</span>
</span><span class='line'>    colors: <span class="nb">true</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(The important bit is to add &lsquo;transform-decorators-legacy&rsquo; to the plugins array.)</p>

<h4>Linting error &mdash; or is it? ðŸ¤”</h4>

<p>If you use VSCode, you will probably run across a linter error that says</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>js<span class="o">]</span> Experimental support <span class="k">for </span>decorators is a feature that is subject to
</span><span class='line'>change in a future release. Set the <span class="s1">&#39;experimentalDecorators&#39;</span> option to
</span><span class='line'>remove this warning.
</span></code></pre></td></tr></table></div></figure>


<p>This is an error in the VSCode JS support, rather than a linter error.</p>

<p>Add a jsconfig.json file to your project root with the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;compilerOptions&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;experimentalDecorators&quot;</span>: <span class="nb">true</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Be sure to restart VSCode, and the problem should go away. If it doesn&rsquo;t, follow <a href="https://github.com/Microsoft/vscode/issues/28097">this thread</a> for further information.</p>

<h3>Build and run</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; webpack
</span><span class='line'>Hash: 63cf378bd6d165758ed8
</span><span class='line'>Version: webpack 3.8.1
</span><span class='line'>Time: 457ms
</span><span class='line'>  Asset     Size  Chunks             Chunk Names
</span><span class='line'>main.js  4.47 kB       0  <span class="o">[</span>emitted<span class="o">]</span>  main
</span><span class='line'>   <span class="o">[</span>0<span class="o">]</span> ./index.js 1.7 kB <span class="o">{</span>0<span class="o">}</span> <span class="o">[</span>built<span class="o">]</span>
</span><span class='line'>   <span class="o">[</span>1<span class="o">]</span> ./decorator.js 195 bytes <span class="o">{</span>0<span class="o">}</span> <span class="o">[</span>built<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>&gt; node build/main.js
</span><span class='line'>Decorating is fun
</span><span class='line'>can<span class="s1">&#39;t you see I&#39;</span>m working here?
</span></code></pre></td></tr></table></div></figure>


<p>For a detailed example checkout <a href="https://github.com/keighty/decorator--example">this repo</a>. For more examples and a deep dive, checkout <a href="https://github.com/wycats/javascript-decorators">wycats&rsquo;s decorator spec</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Least Recently Used (LRU) Cache]]></title>
    <link href="http://www.katieleonard.ca/blog/2018/least-recently-used/"/>
    <updated>2018-02-23T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2018/least-recently-used</id>
    <content type="html"><![CDATA[<p>I was recently challenged to implement a least recently used (LRU) cache in javascript, which taxed both my object-oriented javascripting chops as well as my hazy memory of how to implement a linked list.<!--more--> An LRU cache discards least recently used items first (<a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_(LRU">wikipedia</a>)). Not only do you have to limit the size of the list, but you have to track when an item has been accessed recently and ensure it is not removed before an item that has been accessed less recently.</p>

<p>Judging from the scores of implementations available from my first Google search, this appears to be a fairly common interview question. Here is the approach that I took:</p>

<ol>
<li>Maintain performance by storing items in a hash map</li>
<li>Use a queue-type linked list to keep track of access order: a new item is added to the end of the queue, while an existing item is removed from its place in the queue and re-added to the end of the queue.</li>
<li>Keep the cache at the specified size by lopping off the head of the list (and removing those items from the map).</li>
<li>Do it all using object oriented design principles.</li>
</ol>


<h3>The API/object design</h3>

<p>A simple cache should not have too many bells and whistles. It needs a <code>get</code> and a <code>set</code>, and possbily a <code>size</code> (useful for testing, probably not something most users desperately need). It should take a specific <code>cacheSize</code> as well, so we can set limits on the cache at startup.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">LRU</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cacheSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_maxSize</span> <span class="o">=</span> <span class="nx">cacheSize</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">get</span> <span class="o">=</span> <span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">set</span> <span class="o">=</span> <span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The data structures</h3>

<p>To access stored values in the cache in the most performant way, we store them with a key in a hash map:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">_map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">()</span>
</span><span class='line'><span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to keep track of order access, we need to keep references to the head and the tail of the list, as well as an object to store the cached value and its place in the queue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">_head</span> <span class="o">=</span> <span class="kc">null</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">_tail</span> <span class="o">=</span> <span class="kc">null</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Node</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">key</span> <span class="o">=</span> <span class="nx">key</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The implementaton</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">LRU</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cacheSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_maxSize</span> <span class="o">=</span> <span class="nx">cacheSize</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">();</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_head</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_tail</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_map</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">get</span> <span class="o">=</span> <span class="nx">key</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_map</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_dequeue</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_enqueue</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">set</span> <span class="o">=</span> <span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_map</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">existingNode</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_map</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_dequeue</span><span class="p">(</span><span class="nx">existingNode</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_enqueue</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_trimList</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_trimList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_map</span><span class="p">.</span><span class="nx">size</span> <span class="o">&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_maxSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_dequeue</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_head</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_enqueue</span> <span class="o">=</span> <span class="nx">node</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_map</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span> <span class="nx">node</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_head</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_head</span> <span class="o">=</span> <span class="nx">node</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_tail</span> <span class="o">=</span> <span class="nx">node</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_tail</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">node</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">node</span><span class="p">.</span><span class="nx">prev</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_tail</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">node</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_tail</span> <span class="o">=</span> <span class="nx">node</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">_dequeue</span> <span class="o">=</span> <span class="nx">node</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_head</span> <span class="o">===</span> <span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="p">{</span> <span class="nx">next</span><span class="p">,</span> <span class="nx">key</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_head</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_head</span> <span class="o">=</span> <span class="nx">next</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_head</span><span class="p">.</span><span class="nx">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_head</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_tail</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="p">{</span> <span class="nx">prev</span><span class="p">,</span> <span class="nx">next</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">node</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">prev</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">next</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">next</span><span class="p">.</span><span class="nx">prev</span> <span class="o">=</span> <span class="nx">prev</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_map</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">key</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">itr</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_map</span><span class="p">.</span><span class="nx">entries</span><span class="p">();</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">entries</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="nx">of</span> <span class="nx">itr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">node</span><span class="p">]</span> <span class="o">=</span> <span class="nx">item</span><span class="p">;</span>
</span><span class='line'>      <span class="kr">const</span> <span class="p">{</span> <span class="nx">value</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">node</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">entries</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">entries</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Node</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">key</span> <span class="o">=</span> <span class="nx">key</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">LRU</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Checkout <a href="https://github.com/keighty/lru-cache">this repo</a> for the full implementation and tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Test Cases in Java With Enums]]></title>
    <link href="http://www.katieleonard.ca/blog/2017/writing-test-cases-with-enums/"/>
    <updated>2017-03-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2017/writing-test-cases-with-enums</id>
    <content type="html"><![CDATA[<p>I recently discovered some new (to me) features of enums, and so naturally I am now using them for everything. One of these new-to-me features is using a constructor to give enum members properties and behaviour.<!--more--></p>

<p>For example, if I were making a list of colours, a simple enum would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">enum</span> <span class="n">Colors</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RED</span><span class="o">,</span>
</span><span class='line'>    <span class="n">BLUE</span><span class="o">,</span>
</span><span class='line'>    <span class="n">YELLOW</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everywhere in my code where I used to use the string <code>"red"</code>, I could replace with a less-spelling-error-prone-and-IDE-friendly <code>Colors.RED</code>. If I want to iterate over all the colors in my collection, I can use the <code>values</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">loopColorEnum</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Color</span> <span class="n">color</span> <span class="o">:</span> <span class="n">Color</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// console output:</span>
</span><span class='line'><span class="c1">// RED</span>
</span><span class='line'><span class="c1">// BLUE</span>
</span><span class='line'><span class="c1">// YELLOW</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I wanted to store the hex value for each colour, I can add a constructor and provide arguments for each member of the enum:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">enum</span> <span class="n">Color</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RED</span><span class="o">(</span><span class="s">&quot;#FF0000&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">BLUE</span><span class="o">(</span><span class="s">&quot;#0000FF&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">YELLOW</span><span class="o">(</span><span class="s">&quot;#FFFF00&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">String</span> <span class="n">hex</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Color</span><span class="o">(</span><span class="n">String</span> <span class="n">hexCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">hex</span> <span class="o">=</span> <span class="n">hexCode</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I can access the hex property on all of my colours:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">loopColorEnum</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Color</span> <span class="n">color</span> <span class="o">:</span> <span class="n">Color</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">color</span><span class="o">.</span><span class="na">hex</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// console output:</span>
</span><span class='line'><span class="c1">// #FF0000</span>
</span><span class='line'><span class="c1">// #0000FF</span>
</span><span class='line'><span class="c1">// #FFFF00</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, if I wanted to create a custom output for my enum that included the hex value, I can add a <code>toString()</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">enum</span> <span class="n">Color</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RED</span><span class="o">(</span><span class="s">&quot;#FF0000&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">BLUE</span><span class="o">(</span><span class="s">&quot;#0000FF&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">YELLOW</span><span class="o">(</span><span class="s">&quot;#FFFF00&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">hex</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Color</span><span class="o">(</span><span class="n">String</span> <span class="n">hexCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">hex</span> <span class="o">=</span> <span class="n">hexCode</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Color: %s (Hex: %s)&quot;</span><span class="o">,</span> <span class="kd">super</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">hex</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">loopColorEnum</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Color</span> <span class="n">color</span> <span class="o">:</span> <span class="n">Color</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// console output:</span>
</span><span class='line'><span class="c1">// Color: RED (Hex: #FF0000)</span>
</span><span class='line'><span class="c1">// Color: BLUE (Hex: #0000FF)</span>
</span><span class='line'><span class="c1">// Color: YELLOW (Hex: #FFFF00)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty cool! Pair a constructor with the <code>values()</code> iterable, and you have yourself a handy-dandy test framework for repetitive but important tests. For example, I was re-visiting an old exercise from a data structures class and wanted to write a bunch of test cases without the repetitive boilerplate code for each one &mdash; so I built an enum:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CalculatorTest</span> <span class="kd">extends</span> <span class="n">InfixCalculator</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">enum</span> <span class="n">Expression</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ADDITION</span><span class="o">(</span><span class="s">&quot;1+2+3&quot;</span><span class="o">,</span> <span class="mi">6</span><span class="o">),</span>
</span><span class='line'>        <span class="n">SUBTRACTION</span><span class="o">(</span><span class="s">&quot;9-4&quot;</span><span class="o">,</span> <span class="mi">5</span><span class="o">),</span>
</span><span class='line'>        <span class="n">MULTIPLICATION</span><span class="o">(</span><span class="s">&quot;5*4*2&quot;</span><span class="o">,</span> <span class="mi">40</span><span class="o">),</span>
</span><span class='line'>        <span class="n">DIVISION</span><span class="o">(</span><span class="s">&quot;9/3&quot;</span><span class="o">,</span> <span class="mi">3</span><span class="o">),</span>
</span><span class='line'>        <span class="n">ADDITION_WITH_SPACES</span><span class="o">(</span><span class="s">&quot;5 + 7&quot;</span><span class="o">,</span> <span class="mi">12</span><span class="o">),</span>
</span><span class='line'>        <span class="n">MULTI_DIGITS</span><span class="o">(</span><span class="s">&quot;12 + 3 - 5&quot;</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">expression</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Expression</span><span class="o">(</span><span class="n">String</span> <span class="n">expression</span><span class="o">,</span> <span class="kt">int</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">expression</span> <span class="o">=</span> <span class="n">expression</span><span class="o">;</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">result</span> <span class="o">=</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_solves_an_expression</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Calculator</span> <span class="n">calc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Calculator</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Expression</span> <span class="n">exp</span> <span class="o">:</span> <span class="n">Expression</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;for expression &quot;</span> <span class="o">+</span> <span class="n">exp</span><span class="o">.</span><span class="na">expression</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">exp</span><span class="o">.</span><span class="na">result</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">calc</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="n">exp</span><span class="o">.</span><span class="na">expression</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I create a new test case, I just add another member to the enum, and provide the string input and the expected result. Reducing the boilerplate made developing around edge cases far more wieldy, and I spent more time writing the actual code of the Calculator than I did creating tests.</p>

<p>Adding a constructor, methods and properties to an enum makes it looks suspiciously like a class. In fact, that is how enums are implemented under the hood: they are classes with <em>benefits</em>, such as:</p>

<ul>
<li>retrieve the constant value with <code>valueOf</code>,</li>
<li>guaranteed singletons,</li>
<li>clarity in switch statements, and</li>
<li>built in ordering of members &mdash; an enum can act like an array, and return the order of a member the <code>ordinal()</code> method</li>
</ul>


<p>Sure, you could accomplish most of these using a class with <code>public static final</code> constants and a few hand-rolled methods, but you will impress your neighbours more with a well crafted enum.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iptables: Middleware for Network Management]]></title>
    <link href="http://www.katieleonard.ca/blog/2017/iptables/"/>
    <updated>2017-02-25T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2017/iptables</id>
    <content type="html"><![CDATA[<p>Some companies don&rsquo;t allow their employees to use social media at work, and some countries don&rsquo;t allow their citizens to access news outside of controlled outlets. How do these institutions control access to information that seems so available in other contexts? Through iptables. <!-- more --></p>

<p>When you enter facebook.com in the address bar of your browser (or open the native app on your phone), the information exchanged between your device  and the servers at Facebook is broken up into tagged chunks of data called packets. Iptables contain chains of rules, and each rule contains a policy for how to handle the network packets sent to and from your computer.</p>

<p>For example, a company that wants to block incoming Facebook data can set up a custom rule that sends all packets from Facebook to the garbage instead of delivering them to the browser.</p>

<p><img src="http://www.katieleonard.ca/images/170225-iptables/iptables2.png"></p>

<p>If a packet fails to match any of the policy rules in the chain, it is usually dropped by default.</p>

<p>Iptables are useful in many scenarios:</p>

<ul>
<li>to build your own firewalls,</li>
<li>to restrict access to specific sites (like Facebook),</li>
<li>to load balance incoming web traffic,</li>
<li>to block a DoS attack, or</li>
<li>to simulate a network or service failure in order to test the resilience of your system (my team uses this strategy for some game-day activities)</li>
</ul>


<p>Administrator privileges are required, but you can use <code>iptables</code> on linux or <code>pfctl</code> on mac to in order to inspect or change any of your iptable rules.</p>

<p>While I am neither a system administrator, nor particularly interested in bespoke network management, I do occasionally install software that will help me focus by blocking my access to distracting sites &mdash; it is always good to know some of the magic going on under the hood.</p>

<h3>Resources</h3>

<ul>
<li>for Linux: <a href="https://www.linode.com/docs/security/firewalls/control-network-traffic-with-iptables">control your network traffic</a></li>
<li>for Mac: <a href="https://pleiades.ucsc.edu/hyades/PF_on_Mac_OS_X">how to use pfctl</a></li>
<li>an <a href="http://www.thegeekstuff.com/2011/06/iptables-rules-examples">interesting primer</a> on common iptable rules</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thread Safety]]></title>
    <link href="http://www.katieleonard.ca/blog/2017/thread-safety/"/>
    <updated>2017-02-04T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2017/thread-safety</id>
    <content type="html"><![CDATA[<p>While wading into the wide world of high throughput production Java, I have been enjoying guidance from &ldquo;Java Concurrency in Practice&rdquo; by Brian Goetz, as well as my friend and coworker, David Copeland. In a recent talk, David boiled down the range of concurrency problems to three main issues: atomicity, visibility, and ordering conflicts.<!--more--></p>

<h3>Atomicity</h3>

<p>An atomic operation is one that executes in a single operation. A variable assignment (<code>int x = 2;</code>) is an example of an atomic operation (mostly* &mdash; see footnote). Incrementing a variable, on the other hand, is NOT an atomic operation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NonAtomicCounter</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">count</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doWork</span><span class="o">()</span> <span class="o">{</span> <span class="n">count</span><span class="o">++;</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>While <code>count++</code> <em>appears</em> to be a single action it is actually three:</p>

<ul>
<li>read count,</li>
<li>modify count, and</li>
<li>write count.</li>
</ul>


<p>If ThreadA and ThreadB share a NonAtomicCounter and both call <code>doWork()</code>, ThreadA can read the value of count while ThreadB is modifying it, making <code>count</code> vulnerable to lost updates.</p>

<blockquote><p>Be suspicious of any shared state that is involved in <em>read-modify-write</em> or <em>test-then-act</em> sequences of actions.</p></blockquote>

<h3>Visibility</h3>

<p>Once a thread has read a value, there is no guarantee that it will ever check to see if another thread has modified that value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kt">boolean</span> <span class="n">stop</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(!</span> <span class="n">stop</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;still working&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">stop</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each thread can cache a local copy of <code>stop</code>, which means they will read the value once and then never check to see if it has been changed.</p>

<blockquote><p>Be suspicious of loops that are gated by a variable that is visible to other threads.</p></blockquote>

<h3>Ordering</h3>

<p>The JVM has a just-in-time compiler that optimizes execution at runtime. The memory model guarantees deterministic behaviour <em>within</em> a thread, but makes no promises about how instructions are ordered in the meantime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kt">int</span> <span class="n">A</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kt">int</span> <span class="n">B</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">localA</span> <span class="o">=</span> <span class="n">A</span><span class="o">;</span>
</span><span class='line'>            <span class="n">B</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;local A: &quot;</span> <span class="o">+</span> <span class="n">localA</span><span class="o">);</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">localB</span> <span class="o">=</span> <span class="n">B</span><span class="o">;</span>
</span><span class='line'>            <span class="n">A</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;local B: &quot;</span> <span class="o">+</span> <span class="n">localB</span><span class="o">);</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* POSSIBLE LOCAL VALUES</span>
</span><span class='line'><span class="cm">* localA: 0, localB: 0</span>
</span><span class='line'><span class="cm">* -------------</span>
</span><span class='line'><span class="cm">* localA: 0, localB: 1</span>
</span><span class='line'><span class="cm">* --------------</span>
</span><span class='line'><span class="cm">* localA: 2, localB: 1 =&gt; THIS SHOULD BE IMPOSSIBLE, RIGHT?</span>
</span><span class='line'><span class="cm">* --------------</span>
</span><span class='line'><span class="cm">* localA: 2, localB: 0 =&gt; WAT?</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>How is it possible that t1 sees that A = 2? From <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4">the docs</a>:</p>

<blockquote><p>&ldquo;The semantics of the Java programming language allow compilers and microprocessors to perform optimizations that can interact with incorrectly synchronized code in ways that can produce behaviors that seem paradoxical.&rdquo;&#8221;</p></blockquote>

<p>What this means, is that even though the instructions are written in such a way that localA should not be able to see the reassignment of A, the compiler can reorder instructions to optimize evaluation. As long as the result of the computation is deterministic <strong>within</strong> a thread, the compiler is free to change the execution order, inline assignments, simplify algebra, etc.</p>

<p>In the above example,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">localB</span> <span class="o">=</span> <span class="n">B</span><span class="o">;</span>
</span><span class='line'><span class="n">A</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>is the same as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">A</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">localB</span> <span class="o">=</span> <span class="n">B</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the instructions for thread1 and thread2 are interleaved, thread1 will occasionally see <code>A = 2</code>.</p>

<blockquote><p>Be suspicious of operations involving multiple variables and ordering requirements.</p></blockquote>

<h3>Thread Safety Analysis Guidelines</h3>

<p>If you are dealing with a thread safety issue, ask these three questions:</p>

<ol>
<li>Do your threads share mutable state? Look for public getters and setters, or methods that return references to state rather than copies or primitive values.</li>
<li>Do your threads share multi-variable states (invariants)? Can one component  change independently from others when they should always be treated as a single unit?</li>
<li>For any publicly mutable state, is it an atomicity, visibility, or ordering issue?</li>
</ol>


<h3>Solutions for thread safety issues</h3>

<p>The Java language has a few solutions to offer:</p>

<h4>The <code>volatile</code> keyword</h4>

<p>Adding the keyword <code>volatile</code> to a variable declaration tells the JVM not to use a cached value for any read operations. This keyword will ensure that writes to a variable are always visible to other threads, but will not fix atomicity or ordering issues.</p>

<h4>The <code>synchronized</code> keyword</h4>

<p>Using a <code>synchronized</code> lock around a variable will address all three issues, at the cost of concurrency. If only one thread at a time can access your data, your program is single threaded. Common lock-gotchas include locking writes but not reads!</p>

<h4>The <code>final</code> keyword</h4>

<p>Making variables <code>final</code> addresses all three issues, but requires your state to be immutable. This approach is most useful in composition with other techniques.</p>

<h4>Use guava libraries</h4>

<p>Google has published a library of thread-safe collections that handle concurrent access for you. ConcurrentHashMap is one of my favourites, and you can check out the <a href="https://github.com/google/guava/wiki">user guide</a> for more.</p>

<hr />


<h4>Note</h4>

<blockquote><ul>
<li>A variable&rsquo;s declaration and assignment are really two operations: the allocation of memory to hold the value, and the writing of that value into memory. If a variable is declared and assigned within an object constructor, the object will not be published without variable initialization. However, if it is declared and assigned anywhere else, there are no such guarantees. For the purpose of this example, I am completely ignoring these implications :D</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effectively Final]]></title>
    <link href="http://www.katieleonard.ca/blog/2017/effectively-final/"/>
    <updated>2017-01-11T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2017/effectively-final</id>
    <content type="html"><![CDATA[<p>I have been working on a Java concurrency bug at work for the last few weeks, and the intertwining concepts of immutability and publication have recurred several times. With the help of <a href="https://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601">&ldquo;Java Concurrency in Practice,&rdquo; by Brian Goetz</a>, I am starting to make sense of these concepts, and why these kinds of bugs can be difficult to reproduce.<!--more--></p>

<h3>What does it mean to publish an object?</h3>

<p>&ldquo;Publishing an object means making it available to code outside of its current scope, such as by storing a reference to it where other code can find it, returning it from a nonprivate method, or passing it to a method in another class.&rdquo; (Goetz et al.)</p>

<p>An object that is published is available for use outside of its declared context. Publication can be direct or indirect. Storing a reference to an object in a public static field, directly publishes that object to any client of the class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PublishedObject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">DirectlyPublishedObject</span><span class="o">.</span><span class="na">stringArray</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DirectlyPublishedObject</span><span class="o">.</span><span class="na">stringArray</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;changed&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">DirectlyPublishedObject</span><span class="o">.</span><span class="na">stringArray</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">DirectlyPublishedObject</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span><span class="o">[]</span> <span class="n">stringArray</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;gotcha&quot;</span><span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">* Console output:</span>
</span><span class='line'><span class="cm">* gotcha</span>
</span><span class='line'><span class="cm">* changed</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>DirectlyPublishedObject.stringArray</code> can be retrieved and modified by any client that has access to the class (in this case, <code>PublishedObject#main</code> is the client). An object can also be indirectly published if it is a visible member of another object that is published:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PublishedObject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">IndirectlyPublishedObject</span> <span class="n">ipo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IndirectlyPublishedObject</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">myPersonalStringArray</span> <span class="o">=</span> <span class="n">ipo</span><span class="o">.</span><span class="na">getStringArray</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myPersonalStringArray</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>        <span class="n">myPersonalStringArray</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;changed again&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myPersonalStringArray</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">IndirectlyPublishedObject</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span><span class="o">[]</span> <span class="n">stringArray</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;gotcha&quot;</span><span class="o">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">getStringArray</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">stringArray</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">* Console output:</span>
</span><span class='line'><span class="cm">* gotcha</span>
</span><span class='line'><span class="cm">* changed again</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>If ObjectA obtains a reference to ObjectB, it doesn&rsquo;t matter if ObjectB is declared private, it has now been publicly published.</p>

<p>Why does publication matter? Shared objects have different publication requirements depending on whether they are mutable. From Goetz:</p>

<ul>
<li>&ldquo;Immutable objects can be published through any mechanism;</li>
<li>Effectively immutable objects must be safely published;</li>
<li>Mutable objects must be safely published, and must be either thread safe or guarded by a lock.&#8221;</li>
</ul>


<h3>What does it mean to for an object to be immutable?</h3>

<p>An immutable object must satisfy these criteria:</p>

<ul>
<li>The class is not extensible (no methods can be overridden)</li>
<li>All fields are marked final</li>
<li>All fields are assigned in the constructor</li>
<li>No internal state is modifiable by the client of the class (ie: no setters)</li>
<li>No fields that reference mutable objects are made available to clients of the class</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ImmutableObject</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ImmutableObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">name</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Must supply a valid name.&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ImmutableObject</span> <span class="n">io</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImmutableObject</span><span class="o">(</span><span class="s">&quot;keighty&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;name = &quot;</span> <span class="o">+</span> <span class="n">io</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The ImmutableObject will not have any state other than a single field <code>name</code> that is initialized to the String value passed to its constructor. Because <code>name</code> is marked <code>final</code> and initialized in the constructor, there is no danger of encountering an instance of ImmutableObject in the wild whose name is not initialized.</p>

<p>If an object violates <em>some</em> of the requirements for immutability, but its state will never be modified after publication, it will still be treated as immutable by the compiler and JVM &mdash; it is <strong>effectively immutable</strong>.</p>

<h3>The String class is &ldquo;effectively immutable&rdquo;</h3>

<p>In Java, an instance of the String class is not technically immutable, even though Strings are constant and cannot be modified after creation. They have another property (a private hash) that is lazy loaded only as it is needed:</p>

<p><img src="http://www.katieleonard.ca/images/170111-effectively-final/string_constructor.png">
<img src="http://www.katieleonard.ca/images/170111-effectively-final/string_lazy_hash.png"></p>

<p>A String is considered effectively immutable because its internal state is completely encapsulated and its external state isn&rsquo;t changed after it has been published. Even though the hash field is not final, and is only assigned as it is required (a performance optimization), it is not modifiable by any client. The program can treat Strings as if they are immutable, even if they don&rsquo;t strictly fit all of the criteria.</p>

<h3>How can I make my objects effectively immutable?</h3>

<p>By ensuring that the internal state is completely encapsulated, and any mutable internal objects returned by a public method are copies, not references, you too can enjoy the benefits of at-will publication.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ImmutableObject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">EffectivelyImmutableObject</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span><span class="o">[]</span> <span class="n">stringArray</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;gotcha&quot;</span><span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">getStringArray</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// return a COPY of the mutable object, not a reference</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">stringArray</span><span class="o">,</span> <span class="n">stringArray</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">EffectivelyImmutableObject</span> <span class="n">eio</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EffectivelyImmutableObject</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span><span class="o">[]</span> <span class="n">myPersonalStringArray</span> <span class="o">=</span> <span class="n">eio</span><span class="o">.</span><span class="na">getStringArray</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">eio</span><span class="o">.</span><span class="na">getStringArray</span><span class="o">()[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">myPersonalStringArray</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;changed a copy only&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myPersonalStringArray</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">eio</span><span class="o">.</span><span class="na">getStringArray</span><span class="o">()[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">* Console output:</span>
</span><span class='line'><span class="cm">* gotcha</span>
</span><span class='line'><span class="cm">* changed a copy only</span>
</span><span class='line'><span class="cm">* gotcha</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h4>RESOURCES</h4>

<ul>
<li><p>Peierls, Tim; Goetz, Brian; Bloch, Joshua; Bowbeer, Joseph; Lea, Doug; Holmes, David (2006-05-09). Java Concurrency in Practice. Pearson Education. Kindle Edition.</p></li>
<li><p><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html">javadoc for String</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Annotating Java]]></title>
    <link href="http://www.katieleonard.ca/blog/2017/annotating-java/"/>
    <updated>2017-01-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2017/annotating-java</id>
    <content type="html"><![CDATA[<p>Annotations are a means of adding metadata to Java source code. They can be applied to declarations of classes, fields, methods, and types (as of Java8) in order to pass instructions to the compiler. Annotations can even be evaluated at Runtime.  <!--more-->For example, <code>@Inject</code> is an annotation from the Dagger dependency injection library used to indicate which constructor should be used to instantiate a class. <code>@Inject</code> also tells Dagger to create the dependencies identified in the constructor parameter list.</p>

<h4>Provided by <code>java.lang</code></h4>

<ul>
<li><code>@Deprecated</code>: don&rsquo;t use the marked object. This annotation should be accompanied by a comment explaining the reason and alternative.</li>
<li><code>@Override</code>: this method overrides a superclass method.</li>
<li><code>@SuppressWarnings</code>: the compiler will not report warnings generated by this method.</li>
</ul>


<h2>Create your own</h2>

<p>Annotations can be used to replace verbose code comment templates, and since they are ostensibly interfaces, they can be created the same way you would any other interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// src/CustomAnnotation.java</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.annotation.Documented</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Documented</span> <span class="c1">// Annotation of an Annotation -- so meta! [1]</span>
</span><span class='line'><span class="nd">@interface</span> <span class="n">CustomAnnotation</span> <span class="o">{</span> <span class="c1">// [2]</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">id</span><span class="o">();</span> <span class="c1">// [3]</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">description</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">author</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;[unknown]&quot;</span><span class="o">;</span> <span class="c1">// [4]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><code>CustomAnnotation</code> has an annotation of its own! The <code>@Documented</code> annotation ensures that CustomAnnotation and its properties will be included in the Javadoc when it is generated.</li>
<li>Declare a new annotation using <code>@interface</code> instead of <code>interface</code></li>
<li>Fields <code>id</code> and <code>description</code> are considered required because they are not given default values. Values for <code>id</code> and <code>description</code> must be provided when using <code>@CustomAnnotation</code>.</li>
<li><code>author</code> is an unrequired field because a default value will be used if one is not provided.</li>
</ol>


<h4>Annotations for Annotations</h4>

<p>When defining an annotation, you can indicate how it should be used:</p>

<ul>
<li><code>@RetentionPolicy</code>: How should the annotation be stored? Only in source, included in the generated Class, or passed all the way to the JVM for Runtime evaluation?</li>
<li><code>@Documented</code>: Include the annotation when generating Javadocs (default is false).</li>
<li><code>@Target</code>: A list of locations where the annotation can be used (constructor, field, method, etc).</li>
<li><code>@Inherited</code>: The annotation properties can be inherited from the superclass.</li>
<li><code>@Repeatable</code>: The annotation can be used more than once (declaring multiple authors, for example).</li>
</ul>


<h2>Using your CustomAnnotation</h2>

<p>Use <code>@CustomAnnotation</code> to decorate your code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// src/Main.java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@CustomAnnotation</span><span class="o">(</span><span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">&quot;Custom description&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printSlogan</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;This method uses a @CustomAnnotation&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@CustomAnnotation</span><span class="o">(</span><span class="n">id</span> <span class="o">=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">&quot;Custom banner&quot;</span><span class="o">,</span> <span class="n">author</span> <span class="o">=</span> <span class="s">&quot;keighty&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printBanner</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;This is a printed banner for: &quot;</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you generate the javadoc for Main.class, the annotations will be included in the method descriptions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$</span>  <span class="n">javadoc</span> <span class="n">src</span><span class="o">/</span><span class="n">com</span><span class="o">/</span><span class="n">keighty</span><span class="o">/</span><span class="n">Main</span><span class="o">.</span><span class="na">java</span> <span class="o">-</span><span class="n">d</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.katieleonard.ca/images/170108-annotations/javadoc_annotated.png"></p>

<h2>Annotating a field vs annotating a parameter</h2>

<p>There are no hard rules about whether one should annotate a field or a constructor parameter, but which ever you choose you should use that pattern consistently.</p>

<p><img src="http://www.katieleonard.ca/images/170108-annotations/nonnull_annotation.png"></p>

<p>If you use the <code>@Nonnull</code> annotation in the constructor, the compiler will warn if there is any use of the constructor where the parameter could be null. If you use the <code>@Nonnull</code> annotation on the field, you will have to do your own null checking when assigning the field.</p>

<h4>RESOURCES</h4>

<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/index.html">java tutorials</a></li>
<li><a href="http://crunchify.com/understanding-java-annotation-annotation-examples/">crunchify.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keighty's 2016 - by the Numbers]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/2016-year-in-review/"/>
    <updated>2016-12-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/2016-year-in-review</id>
    <content type="html"><![CDATA[<p>Many people would like a do-over of 2016, but this was a pretty epic year for me. I was traveling pretty constantly, reading voraciously, and enjoying each left-turn my career has taken me. I started the year helping to build instrumentation for single-page applications, bounced into some UI projects using React, and spent the last quarter ensconced in a crash-course in Java Concurrency. <!--more -->Other highlights include achieving US Residency (so long for now, Canada ðŸ‡¨ðŸ‡¦  ), seeing a more reasonable amount of theater, and shipping more diverse side-project code than ever. Check out my personal infographic (thanks <a href="https://www.canva.com/">canva.com</a>!):</p>

<p><img src="http://www.katieleonard.ca/images/161227-year-in-review/2016-year-in-review.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Browser-sync Is the Easiest Webserver EVER]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/browser-sync-webserver/"/>
    <updated>2016-10-23T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/browser-sync-webserver</id>
    <content type="html"><![CDATA[<p><a href="https://www.browsersync.io/">Browser-sync</a> is the fastest way to spin up a local web server. It will even open your default browser with the entry point you specify, and live-reload your changes as you make them. It couldn&rsquo;t possibly be any simpler to test out a site you&rsquo;re developing locally.</p>

<!--more-->


<h2>1. Install browser-sync</h2>

<p>To get started, install the browser-sync package from npm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g browser-sync
</span></code></pre></td></tr></table></div></figure>


<h2>2. Configure the server</h2>

<p>Setup a simple static project folder like this (<a href="https://gist.github.com/keighty/9e5eb136c27b6a4f98f7c4f49d749256">gist</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>â”œâ”€â”€ bs-config.js
</span><span class='line'>â”œâ”€â”€ foo
</span><span class='line'>â”‚   â””â”€â”€ index.html
</span><span class='line'>â””â”€â”€ index.html
</span></code></pre></td></tr></table></div></figure>


<p>In your bs-config.js file, list the configuration options for how browser-sync should serve your files, including which file extensions it should watch for changes (<code>"*html","*js","*css"</code>), and what resources should be served by a new route name (<code>"/foo": "foo"</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// bs-config.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;files&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;*html&quot;</span><span class="p">,</span><span class="s2">&quot;*js&quot;</span><span class="p">,</span><span class="s2">&quot;*css&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;server&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;port&quot;</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;routes&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;/foo&quot;</span><span class="o">:</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p> Checkout all the options available in the <a href="https://www.browsersync.io/docs/options"> docs</a>.</p>

<p> For this example, I have also included an entry point at index.html, and an additional html file to try a new route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- index.html --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>INDEX<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      This is the index
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- foo/index.html --&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>FOO<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      This is a foo
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that you have a sample project outlined, start the server.</p>

<h2>3. Start the web server</h2>

<p><code>$ browser-sync start --config bs-config.js</code></p>

<p>Browser-sync will open your default web browser and load the index.html file:</p>

<p><img src="http://www.katieleonard.ca/images/161023-browser-sync/https2.png"></p>

<p>Test out the router by navigating to <code>localhost:3000/foo</code>, and you should see the content of <code>foo/index.html</code></p>

<p><img src="http://www.katieleonard.ca/images/161023-browser-sync/routes.png"></p>

<p>Serving a local site is just that quick. If you don&rsquo;t know where to start with your bs-config.js file, you can have browser-sync generate one for you:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir testserver <span class="o">&amp;&amp;</span> <span class="nb">cd </span>testserver
</span><span class='line'><span class="nv">$ </span>browser-sync init
</span><span class='line'><span class="o">[</span>BS<span class="o">]</span> Config file created bs-config.js
</span><span class='line'><span class="o">[</span>BS<span class="o">]</span> To use it, in the same directory run: browser-sync start --config bs-config.js
</span></code></pre></td></tr></table></div></figure>


<p>In the generated config file, you find all the options that are used internally, but there are many more described on the <a href="http://www.browsersync.io/docs/options/">website</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;ui&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;port&quot;</span><span class="o">:</span> <span class="mi">3001</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;weinre&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;port&quot;</span><span class="o">:</span> <span class="mi">8080</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;files&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;watchOptions&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>    <span class="s2">&quot;server&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;proxy&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;port&quot;</span><span class="o">:</span> <span class="mi">3000</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;middleware&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;serveStatic&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="s2">&quot;ghostMode&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;clicks&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;scroll&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;forms&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;submit&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;inputs&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;toggles&quot;</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;logLevel&quot;</span><span class="o">:</span> <span class="s2">&quot;info&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;logPrefix&quot;</span><span class="o">:</span> <span class="s2">&quot;BS&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;logConnections&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;logFileChanges&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;logSnippet&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;rewriteRules&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="s2">&quot;open&quot;</span><span class="o">:</span> <span class="s2">&quot;local&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;browser&quot;</span><span class="o">:</span> <span class="s2">&quot;default&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;cors&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;xip&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;hostnameSuffix&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;reloadOnRestart&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;notify&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scrollProportionally&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scrollThrottle&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scrollRestoreTechnique&quot;</span><span class="o">:</span> <span class="s2">&quot;window.name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scrollElements&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="s2">&quot;scrollElementMapping&quot;</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example: to <a href="https://www.browsersync.io/docs/options#option-https">test your application over https</a>, set <code>"https": true</code> right beneath your server options. When browser-sync opens the browser with your entry point, the browser should warn you that the connection isn&rsquo;t safe:</p>

<p><img src="http://www.katieleonard.ca/images/161023-browser-sync/https.png"></p>

<p>Click on <code>Proceed to localhost (unsafe)</code> to load your content.</p>

<p>Easy peasy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service Workers]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/service-workers/"/>
    <updated>2016-10-15T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/service-workers</id>
    <content type="html"><![CDATA[<p>A service worker is a script that sits between a web page and the network, acting as a proxy for network requests: if the network is available, the request is passed on to the target url; if the network is not available, the service worker will handle the request itself by checking cached responses or or queuing the request for synchronization once the network is available. Service workers are bridging the gap between native mobile applications and traditional web applications that require a network connection to function. Sometimes called progressive web apps, these applications enable a seamless offline experience when the user is not connected to a network.</p>

<!--more-->


<p>Service workers can be used for data synchronization in the background, but data fetching and sync-ing are only one of the ways we can leverage this API. We can:</p>

<ul>
<li>use background resources to perform client-side compilation of assets  (useful for web development)</li>
<li>pre-fetch data that the user is likely going to need in the near future (think photo albums or playlists)</li>
<li>share large data sets between multiple pages</li>
<li>notify mobile users of updates via push notifications</li>
</ul>


<p>For example, <a href="https://www.washingtonpost.com/">The Washington Post</a> uses service workers to send push notifications of breaking news content to users of their web application on android.</p>

<h2>How do they work?</h2>

<p>Service workers rely on the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise API</a> &mdash; a Promise is a proxy for &ldquo;a value that may be  available now, or in the future, or never.&rdquo; They also use the event emitter pattern, where listeners are registered to handle specific events, such as <code>fetch</code> requests.</p>

<p>To employ a service worker you must first register a script with the service worker API: <code>navigator.serviceWorker.register('./sw.js')</code>. Checkout the following example (<a href="https://gist.github.com/keighty/ec1a37a0f6475d7cdf2db64b01eff445.js">get the gist</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- index.html references the javascript application --&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Service worker test app<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app.js</span>
</span><span class='line'><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s1">&#39;sw.js&#39;</span><span class="p">)</span> <span class="c1">// register a worker script with the service</span>
</span><span class='line'><span class="nx">navigator</span><span class="p">.</span><span class="nx">serviceWorker</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">reg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do the following if registration is successful</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">reg</span><span class="p">.</span><span class="nx">installing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// first visit or fresh reload of the worker</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Service worker installing on registration.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">reg</span><span class="p">.</span><span class="nx">waiting</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// a worker may be installed but waiting for another worker to stop</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Service worker already installed on registration.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">reg</span><span class="p">.</span><span class="nx">active</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// pages from the same origin may share a service worker</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Service worker already active on registration.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// if registration is unsuccessful, tell us why</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Registration failed with &#39;</span> <span class="o">+</span> <span class="nx">error</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// sw.js</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;inside registration script&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;install&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Service worker installed.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;activate&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Service worker activated.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Service workers can be registered with a specific origin and path to watch. Since they run in a background thread with a context separate from the application javascript, service workers have no DOM access. So don&rsquo;t try to perform synchronous work (like accessing LocalStorage) or update the DOM from a service worker.</p>

<p>Running this example code sends some output to the console:
<img src="http://www.katieleonard.ca/images/161015-service-workers/service-worker-demo1.png"></p>

<h4>NOTE: A single service worker can control many pages (so be careful with global variables).</h4>

<p><img src="http://www.katieleonard.ca/images/161015-service-workers/service-worker-demo2.png"></p>

<h2>Developing with service workers</h2>

<p>Service workers can only function in a secure context, which means that you can only register a service worker from a web application that is served over <code>https</code>. One option is to use <a href="https://pages.github.com/">GitHub pages</a> to deploy your application, as these pages are generally served over <code>https</code>. Another option is to use a local web server (<code>localhost</code> is considered semi-secure).</p>

<p>I use <a href="https://www.browsersync.io/">Browser-sync</a>, a super light-weight easy to start web server. In my project directory, I start the browser-sync server and set it to watch my javascript files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g browser-sync
</span><span class='line'><span class="nv">$ </span>browser-sync start --server --files *.js
</span><span class='line'><span class="o">[</span>BS<span class="o">]</span> Access URLs:
</span><span class='line'> ----------------------------------
</span><span class='line'>       Local: http://localhost:3000
</span><span class='line'>    External: http://10.0.0.8:3000
</span><span class='line'> ----------------------------------
</span><span class='line'>          UI: http://localhost:3001
</span><span class='line'> UI External: http://10.0.0.8:3001
</span><span class='line'> ----------------------------------
</span><span class='line'><span class="o">[</span>BS<span class="o">]</span> Serving files from: ./
</span><span class='line'><span class="o">[</span>BS<span class="o">]</span> Watching files...
</span></code></pre></td></tr></table></div></figure>


<p>Browser-sync is so helpful, it will even open a browser window for you. :awthanks:</p>

<p>Don&rsquo;t forget to checkout the Chrome developer tools, which can be super helpful in creating different states for your service worker</p>

<p><img src="http://www.katieleonard.ca/images/161015-service-workers/service-worker-dev-tools.png"></p>

<hr />

<h2>MOAR Resources</h2>

<p>For more about the service worker API, checkout these resources:</p>

<ul>
<li>the <a href="https://www.w3.org/TR/service-workers/">W3C spec</a></li>
<li>the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">MDN docs</a></li>
<li>and the <a href="https://github.com/mdn/sw-test/">example</a> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The EventEmitter Pattern and the Event Loop -- a Timeline]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/event-emitter-and-event-loop/"/>
    <updated>2016-10-14T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/event-emitter-and-event-loop</id>
    <content type="html"><![CDATA[<p>The EventEmitter pattern is a derivative of the Observer pattern: an object can notify a set of observers when a change in its state occurs.<!--more--> Consider the following example using the EventEmitter pattern:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">EventEmitter</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">findPattern</span> <span class="o">=</span> <span class="p">(</span><span class="nx">files</span><span class="p">,</span> <span class="nx">regex</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">emitter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventEmitter</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">files</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">file</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">content</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">emitter</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">emitter</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;fileread&#39;</span><span class="p">,</span> <span class="nx">file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">let</span> <span class="nx">match</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">match</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">regex</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">match</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">elem</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">emitter</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;found&#39;</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">elem</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">emitter</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fileA.txt contains the words &quot;hello blah blah blah&quot;</span>
</span><span class='line'><span class="c1">// fileB.json is empty</span>
</span><span class='line'><span class="c1">// fileC.md does not exist</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">files</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;fileA.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;fileB.json&#39;</span><span class="p">,</span> <span class="s1">&#39;fileC.md&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">findPattern</span><span class="p">(</span><span class="nx">files</span><span class="p">,</span> <span class="sr">/hello \w+/g</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;fileread&#39;</span><span class="p">,</span> <span class="nx">file</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">file</span><span class="p">}</span> <span class="nx">was</span> <span class="nx">read</span><span class="err">`</span><span class="p">)})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;found&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">match</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">Matched</span> <span class="nx">$</span><span class="p">{</span><span class="nx">match</span><span class="p">}</span> <span class="k">in</span> <span class="nx">file</span> <span class="nx">$</span><span class="p">{</span><span class="nx">file</span><span class="p">}</span><span class="err">`</span><span class="p">)})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nb">Error</span> <span class="nx">emitted</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="err">`</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some of the script is executed synchronously, but the real work is done asynchronously. The EventEmitter pattern takes advantage of the event loop to work efficiently.</p>

<p>Keep the following schematic in mind as you parse through the execution of this script:</p>

<p><img src="http://www.katieleonard.ca/images/161012-callbacks/event-loop.png"></p>

<p><em>image credit: Mario Casciaro and Luciano Mammino from Node.js Design Patterns. Colour notations are mine.</em></p>

<p>The first set of operations happen synchronously:</p>

<ul>
<li>call <code>findPattern</code> with the file list and regex pattern</li>
<li>create a new event emitter</li>
<li>submit <code>readFile</code> I/O request for fileA.txt to the event demultiplexer</li>
<li>submit <code>readFile</code> I/O request for fileB.json to the event demultiplexer</li>
<li>submit <code>readFile</code> I/O request for fileC.md to the event demultiplexer</li>
<li>return the event emitter</li>
<li>register <code>fileread</code> listener on the event emitter</li>
<li>register <code>found</code> listener on the event emitter</li>
<li>register <code>error</code> listener on the event emitter</li>
</ul>


<p><img src="http://www.katieleonard.ca/images/161014-event-emitter/event-emitter-1.png"></p>

<p>Once the I/O operations are submitted to the event demultiplexer, they will return in the order in which the requests are fulfilled. In this example, fileC.md does not exist, so the event demultiplexer submits the result along with the handler to the Event loop.</p>

<ul>
<li>The event loop runs the result through the callback for fileC.md, which <strong>emits an error event</strong> (line 9)! The EventEmitter adds the error handler to the event loop.</li>
</ul>


<p><img src="http://www.katieleonard.ca/images/161014-event-emitter/event-emitter-2.png"></p>

<p>In the meantime, the event demultiplexer has fulfilled the I/O request for fileB.json, and added the result and the callback to the event loop.</p>

<ul>
<li>The event loop runs the result through the callback for fileB, which emits a <code>fileread</code> event (line 11). The EventEmitter adds the <code>fileread</code> handler to the event loop.</li>
</ul>


<p>The event demultiplexer also fulfills the I/O request for fileA.txt and adds the result and the callback to the event loop.</p>

<ul>
<li>The event loop runs the result through the callback for fileA, which emits a <code>fileread</code> event (line 11) AND a <code>found</code> event (line 16). The EventEmitter adds the <code>fileread</code> and <code>found</code> handlers to the event loop.</li>
</ul>


<p>The event loop is busily processing all of these events in the order of arrival:</p>

<ul>
<li>run the listener callback for the <code>error</code> event (fileC)</li>
<li>run the listener callback for the <code>fileread</code> event (fileB)</li>
<li>run the listener callback for the <code>fileread</code> event (fileA)</li>
<li>FINALLY &mdash; run the listener callback for the <code>found</code> event (fileA)</li>
</ul>


<p>The result of running this script on the command line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ node --use_strict events.js
</span><span class='line'>Error emitted: ENOENT: no such file or directory, open &#39;fileC.md&#39;
</span><span class='line'>fileB.json was read
</span><span class='line'>fileA.txt was read
</span><span class='line'>Matched hello blah in file fileA.txt
</span></code></pre></td></tr></table></div></figure>


<p><em>Side note: set the flag <code>--use-strict</code> to run scripts using ES6 syntax</em></p>

<p>Why did the files process in what seems to be reverse order? The event demultiplexer adds work to the event loop as it fulfills I/O requests. When <code>readfile()</code> is given three files &mdash; a file with content (fileA), an empty file (fileB), and a non-existent file (fileC) &mdash; it is reasonable to assume that the I/O request for a non-existent file will return first, as there is no file to read. It is also reasonable that an empty file will  return next, as there is very little work to be done reading an empty file. Finally, the I/O request for the file with content returns &mdash; it requires more work to read a file with content than an empty file.</p>

<p>For more about the event emitter pattern in Node, check out <a href="https://www.amazon.com/Node-js-Design-Patterns-Mario-Casciaro/dp/1785885588/ref=sr_1_1/161-7210115-5247461?ie=UTF8&amp;qid=1476284148&amp;sr=8-1&amp;keywords=node.js+design+patterns">Node.js Design Patterns</a> by Mario Casciaro and Luciano Mammino.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Callbacks and the Event Loop]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/clarified-callbacks/"/>
    <updated>2016-10-12T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/clarified-callbacks</id>
    <content type="html"><![CDATA[<p>When I started writing javascript in earnest a couple of years ago, I was stuck in a very procedural way of thinking &mdash; all of my functions executed synchronously. If you replaced <code>function</code> with <code>def</code> and removed all <code>var</code> keywords, you would be reading Ruby (true story: yesterday I was debugging an issue with a React module and put in a <code>binding.pry</code> instead of <code>debugger</code> :facepalm: Old habits die hard).</p>

<p>Last year, I joined a team that writes javascript in the Node.js style, using callbacks for flow control. While I became familiar with the pattern pretty quickly, the whys and wherefores were missing from my understanding. Today I am filling in the gaps by reading <a href="https://www.amazon.com/Node-js-Design-Patterns-Mario-Casciaro/dp/1785885588/ref=sr_1_1/161-7210115-5247461?ie=UTF8&amp;qid=1476284148&amp;sr=8-1&amp;keywords=node.js+design+patterns">Node.js Design Patterns</a> by Mario Casciaro and Luciano Mammino.<!--more--></p>

<h3>The Event Loop</h3>

<p>The first step to understanding asynchronous javascript is to understand the event loop. It is a single thread that processes one message at a time, as they appear in the FIFO event queue.</p>

<p><img src="http://www.katieleonard.ca/images/161012-callbacks/event-loop.png">
<em>image credit: Mario Casciaro and Luciano Mammino from Node.js Design Patterns. Colour notations are mine.</em></p>

<ol>
<li>An I/O request is sent to the event demultiplexer.</li>
<li>The event demultiplexer queues the I/O instructions along with the context and a callback function that contains the instructions for what do to with the result once it is received.</li>
<li>When the I/O order is filled, the event demultiplexer pops an event on to the event queue, with the filled I/O request, and the callback handler.</li>
<li>The event loop pulls the event off of the event queue and applies the result to the callback function.</li>
<li>The event loop either sends the result of the callback operation to the application, or generates more I/O work for the event demultiplexer.</li>
</ol>


<p>When I check my email in the morning, I go through a similar process:</p>

<ul>
<li>My inbox is the event demultiplexer, where requests for resources are made.</li>
<li>I (as the event loop) process emails from in the queue from oldest to newest, and I only process one at at time.</li>
<li>For each message I read the context and perform one of two actions (callback):

<ul>
<li>Process the message and return to the queue to pick up another message.</li>
<li>Add a new action to my todo list event queue along with the a reminder to attach the result of the new action to the email when I respond (callback).</li>
</ul>
</li>
</ul>


<p>When I am finished with my email inbox I start on my todo list, performing the actions required and responding to the email. Sometimes the action will generate additional actions, which I append to the end of my todo list. While the idea of an infinite todo list is a little disheartening to a human, this is how the V8 javascript engine was designed: it performs the work with maximum efficiency, and can do so with only a single thread.</p>

<h3>The difference between synchronous and asynchronous javascript</h3>

<p>Synchronous javascript can be easily identified by the use of a <code>return</code> statement, which returns control back to the caller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">introduction</span> <span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;Hello, my name is &#39;</span> <span class="o">+</span> <span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">lastName</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">introduction</span><span class="p">(</span><span class="s1">&#39;Keighty&#39;</span><span class="p">,</span> <span class="s1">&#39;Leonard&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// &quot;hello! my name is Keighty Leonard&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Asynchronous javascript uses a &lsquo;continuous passing pattern&rsquo;, where the result of a function is passed to a handler for further processing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">createEmailAddress</span> <span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// create asynchronous call</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;before the async&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do some work</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">email</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;@example.com&#39;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;during the async&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// pass the result of the work to the callback</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span><span class="nx">email</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">2000</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;after the async&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">cb</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">createEmailAddress</span><span class="p">(</span><span class="s1">&#39;Keighty&#39;</span><span class="p">,</span> <span class="s1">&#39;Leonard&#39;</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &gt; before the async</span>
</span><span class='line'><span class="c1">// &gt; after the async</span>
</span><span class='line'><span class="c1">// &gt; during the async</span>
</span><span class='line'><span class="c1">// &gt; keighty.leonard@example.com</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>createEmailAddress</code> is called. When execution reaches the setTimeout function, and the 2000ms have elapsed, the callback passed to setTimeout is placed in the event queue, awaiting its turn for execution. The thread is release and does not have to wait for the setTimeout period to elapse before continuing execution &mdash; it continues with the second console statement (&lsquo;after the async&rsquo;). When the setTimeout callback is finally processed, the <code>firstName</code> and <code>lastName</code> variables are still accessible because they exist in the function closure.</p>

<p>Javascript has many features that make the continuous passing pattern easy:</p>

<ul>
<li>Closures allow you to access the environment on which a function was created, no matter when the callback is invoked.</li>
<li>Functions are first class data types, meaning they can be assigned to variables, passed as parameters, and stored in data structures.</li>
</ul>


<hr />

<p>More on the event loop and event-emitter observer pattern to come!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Squash to Speed Up Your Workflow]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/git-squash-to-speed-up-your-workflow/"/>
    <updated>2016-09-12T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/git-squash-to-speed-up-your-workflow</id>
    <content type="html"><![CDATA[<p>I am a big fan of work-in-progress (WIP) commits. When I am working through a prototype or a spike, and need to do some experimentation with the code, I use WIP commits like they are save points in a game. <!--more-->These points act like milestones, and allow me to keep working with the confidence that I can always go back to an earlier working state. I use these aliases for the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># in ~/.bashrc</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">wip</span><span class="o">=</span><span class="s2">&quot;git commit -am &#39;WIP&#39;&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">popwip</span><span class="o">=</span><span class="s2">&quot;git reset --soft head~1; git reset head .&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I get the work into a good state, I <code>wip</code> it (I may even sing ðŸŽ¶ <a href="https://www.youtube.com/watch?v=IIEVqFB4WUo"><em>When a problem comes along&hellip; you must whip it!</em></a> ðŸŽ¶). If I want to grab the last WIP commit from the branch, I <code>popwip</code> to pop the last commit off the stack and put the last bunch of changes back into my working directory.</p>

<p>However, when I have been prototyping for a while, making <code>wip</code> commits as I go, popping a bunch of commits off the stack gets a little unwieldy. Until now I used an interactive rebase to rewrite my branch&rsquo;s commit history. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log --pretty<span class="o">=</span>format:<span class="se">\&quot;</span>%h %ad | %s%d <span class="o">[</span>%an<span class="o">]</span><span class="se">\&quot;</span> --graph --date<span class="o">=</span>short
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.katieleonard.ca/images/160912-git-squash/githist.png"></p>

<p>For this git history, I would rebase on sha 83bfc47:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rebase -i 83bfc47
</span><span class='line'>
</span><span class='line'>pick 540c0fe WIP
</span><span class='line'>pick 8af4cfe WIP
</span><span class='line'>pick 50bd7db WIP
</span><span class='line'>pick f90410b WIP
</span><span class='line'>
</span><span class='line'><span class="c"># Rebase 83bfc47..f90410b onto 83bfc47</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># MOAR git-structions below...</span>
</span></code></pre></td></tr></table></div></figure>


<p>I would proceed to <code>reword</code> the first and <code>fixup</code> the rest, writing a thoughtful and all-encompassing commit message to convey the intention behind this chunk of work. Then I discovered <code>git merge --squash</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout master
</span><span class='line'>Switched to branch <span class="s1">&#39;master&#39;</span>
</span><span class='line'>Your branch is up-to-date with <span class="s1">&#39;origin/master&#39;</span>.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git merge --squash test_branch
</span><span class='line'>Updating 83bfc47..f90410b
</span><span class='line'>Fast-forward
</span><span class='line'>Squash commit -- not updating HEAD
</span><span class='line'> routes/performance.js                          | 3 +++
</span><span class='line'> routes/performer.js                            | 3 +++
</span><span class='line'> routes/user.js                                 | 2 ++
</span><span class='line'> src/app.js                                     | 3 +++
</span><span class='line'> src/components/performance-frame.jsx           | 3 +++
</span><span class='line'> src/containers/filterable-performance-grid.jsx | 3 +++
</span><span class='line'> 6 files changed, 17 insertions<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git status
</span><span class='line'>On branch master
</span><span class='line'>Your branch is up-to-date with <span class="s1">&#39;origin/master&#39;</span>.
</span><span class='line'>Changes to be committed:
</span><span class='line'>  <span class="o">(</span>use <span class="s2">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  modified:   routes/performance.js
</span><span class='line'>  modified:   routes/performer.js
</span><span class='line'>  modified:   routes/user.js
</span><span class='line'>  modified:   src/app.js
</span><span class='line'>  modified:   src/components/performance-frame.jsx
</span><span class='line'>  modified:   src/containers/filterable-performance-grid.jsx
</span></code></pre></td></tr></table></div></figure>


<p>All of the changes I have made on that branch since it diverged from master have been added to the index. I am free to either chunk up the changes into different commits (with commit messages that are more descriptive than WIP), or add them all to a single commit.</p>

<p>GOODBYE <code>rebase -i</code>! <code>Hello merge --squash</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Importing and Exporting: Modular React]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/importing-and-exporting-modular-react/"/>
    <updated>2016-08-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/importing-and-exporting-modular-react</id>
    <content type="html"><![CDATA[<p>While working on rewriting my side-project (VirtualPlaybill) in React, I got hung up on a very basic plumbing concept: named exports. <!--more--></p>

<p>With ES5 you can export in three ways and import in one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// EXPORT STYLE 1</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">crunchy</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CRUNCHY!&#39;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">bacon</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;BACON!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// EXPORT STYLE 2</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">crunchy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CRUNCHY!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">bacon</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;BACON!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// EXPORT STYLE 3 (and my personal favourite)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">breakfast</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">crunchy</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CRUNCHY!&#39;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">bacon</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;BACON!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">breakfast</span>
</span></code></pre></td></tr></table></div></figure>


<p>An export is a meaningful bundle of code. Importing takes a single form, providing a handle to the exported bundle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// IMPORT</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">breakfast</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;breakfast.js&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">breakfast</span><span class="p">.</span><span class="nx">crunchy</span><span class="p">()</span> <span class="c1">// CRUNCHY!</span>
</span><span class='line'><span class="nx">breakfast</span><span class="p">.</span><span class="nx">bacon</span><span class="p">()</span> <span class="c1">// BACON!</span>
</span></code></pre></td></tr></table></div></figure>


<p>In ES6 there is a lot more flexibility: exports can be named and imports can take many forms.</p>

<h4>Named exports</h4>

<p>Importing a named export allows you to grab only the functions you need from a module, leaving the rest behind. Use curly braces to import a named export:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//-----test.js-----//</span>
</span><span class='line'><span class="kr">export</span> <span class="nx">crunchy</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CRUNCHY!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="kr">export</span> <span class="nx">bacon</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;BACON!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// IMPORT BY NAME</span>
</span><span class='line'><span class="c1">//-----main.js-----//</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">crunchy</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./test&#39;</span>
</span><span class='line'><span class="nx">crunchy</span><span class="p">()</span> <span class="c1">// CRUNCHY!</span>
</span><span class='line'><span class="nx">bacon</span><span class="p">()</span> <span class="c1">// Uncaught ReferenceError: bacon is not defined(â€¦)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Default exports</h4>

<p>In addition to named exports, you can specify one <code>default</code> export per file. Simply importing that file provides a reference to the default export:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//-----test.js-----//</span>
</span><span class='line'><span class="kr">export</span> <span class="nx">crunchy</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CRUNCHY!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">default</span> <span class="kr">export</span> <span class="nx">bacon</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;BACON!&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// IMPORT BY DEFAULT</span>
</span><span class='line'><span class="c1">//-----main.js-----//</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">myFunc</span> <span class="nx">from</span> <span class="s1">&#39;./test&#39;</span>
</span><span class='line'><span class="nx">myFunc</span><span class="p">()</span> <span class="c1">// BACON!</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also import both default and named exports at the same time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">myFunc</span><span class="p">,</span> <span class="p">{</span> <span class="nx">crunchy</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./test&#39;</span>
</span><span class='line'><span class="nx">crunchy</span><span class="p">()</span> <span class="c1">// CRUNCHY!</span>
</span><span class='line'><span class="nx">myFunc</span><span class="p">()</span> <span class="c1">// BACON!</span>
</span></code></pre></td></tr></table></div></figure>


<p>For even more import options, checkout the section on imports from the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">MDN docs</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">defaultMember</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">name</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">member</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">member</span> <span class="nx">as</span> <span class="nx">alias</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">member1</span> <span class="p">,</span> <span class="nx">member2</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">member1</span> <span class="p">,</span> <span class="nx">member2</span> <span class="nx">as</span> <span class="nx">alias2</span> <span class="p">,</span> <span class="p">[...]</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">defaultMember</span><span class="p">,</span> <span class="p">{</span> <span class="nx">member</span> <span class="p">[</span> <span class="p">,</span> <span class="p">[...]</span> <span class="p">]</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">defaultMember</span><span class="p">,</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">name</span> <span class="nx">from</span> <span class="s2">&quot;module-name&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="s2">&quot;module-name&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>name</p>

<blockquote><p>Name of the object that will receive the imported values.</p></blockquote>

<p>member, memberN</p>

<blockquote><p>Name of the exported members to be imported.</p></blockquote>

<p>defaultMember</p>

<blockquote><p>Name of the exported default to be imported.</p></blockquote>

<p>alias, aliasN</p>

<blockquote><p>Name of the object that will receive the imported property</p></blockquote>

<p>module-name</p>

<blockquote><p>The name of the module to import. This is a file name.</p></blockquote>

<h4>What you CAN&rsquo;T do&hellip;</h4>

<p>&hellip; is use ES5 syntax and expect the import to know what you mean:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//------my-component.js-------//</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">MyComponent</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">this</span> <span class="nx">is</span> <span class="nx">an</span> <span class="nx">awesome</span> <span class="nx">react</span> <span class="nx">component</span> <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">MyComponent</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//------main.js-------//</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">MyComponent</span> <span class="nx">from</span> <span class="s1">&#39;./my-component&#39;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MyComponent</span><span class="p">)</span> <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was trying to write ES5 in ES6! Without an explicit <code>export</code> in front of the class declaration, my default had no idea what I intended to export, so it did nothing. Adding <code>export</code> to the class definition, or even moving the whole <code>export default</code> to the class declaration does the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//------my-component.js-------//</span>
</span><span class='line'><span class="k">default</span> <span class="kr">export</span> <span class="kr">class</span> <span class="nx">MyComponent</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">this</span> <span class="nx">is</span> <span class="nx">an</span> <span class="nx">awesome</span> <span class="nx">react</span> <span class="nx">component</span> <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//------main.js-------//</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">MyComponent</span> <span class="nx">from</span> <span class="s1">&#39;./my-component&#39;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MyComponent</span><span class="p">)</span> <span class="c1">// function MyComponent() {...}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to <a href="http://stackoverflow.com/a/31853887">this stackoverflow answer</a> for pointing me in the right direction, and <a href="http://exploringjs.com/es6/ch_modules.html">exploringjs</a> for even greater detail!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nested Routes With Expressjs]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/nested-routes-with-expressjs/"/>
    <updated>2016-04-12T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/nested-routes-with-expressjs</id>
    <content type="html"><![CDATA[<p>Whenever I need to build a quick web application I turn to <a href="http://expressjs.com/">ExpressJS</a>. It is a fast, minimal, easy to configure web server that puts the <strong>E</strong> in <a href="http://mean.io/#!/">MEAN</a>). I wanted to build a REST API for a hobby app and found that the docs for how to nest routes are relatively few (see <a href="http://codetunnel.io/an-intuitive-way-to-organize-your-expressjs-routes/">blog</a>, <a href="http://stackoverflow.com/a/25305272/1279340">stackoverflow answer</a>). Combining these two resources, I learned a simple method for keeping your routes separate while creating a nested routing structure. <!--more--></p>

<h2>The Plan</h2>

<p>I want to create routes that look like these:</p>

<ul>
<li><code>/foo</code></li>
<li><code>/foo/bar</code></li>
<li><code>/foo/42</code></li>
<li><code>/foo/42/baz</code></li>
<li><code>/foo/42/baz/123</code></li>
</ul>


<p>Using the <a href="http://expressjs.com/en/starter/generator.html">express-generator</a> and a few simple commands, you can get your server up and running fast:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install express-generator -g
</span><span class='line'>$ express myapp
</span><span class='line'>$ cd myapp
</span><span class='line'>$ npm install
</span><span class='line'>$ npm start</span></code></pre></td></tr></table></div></figure>


<p>You will end up with a working directory that looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>â”œâ”€â”€ app.js
</span><span class='line'>â”œâ”€â”€ bin
</span><span class='line'>â”‚Â Â  â””â”€â”€ www
</span><span class='line'>â”œâ”€â”€ node_modules
</span><span class='line'>â”‚Â Â  â”œâ”€â”€ ...
</span><span class='line'>â”œâ”€â”€ package.json
</span><span class='line'>â”œâ”€â”€ public
</span><span class='line'>â”‚Â Â  â”œâ”€â”€ images
</span><span class='line'>â”‚Â Â  â”œâ”€â”€ javascripts
</span><span class='line'>â”‚Â Â  â””â”€â”€ stylesheets
</span><span class='line'>â”‚Â Â      â””â”€â”€ style.css
</span><span class='line'>â”œâ”€â”€ routes
</span><span class='line'>â”‚Â Â  â”œâ”€â”€ index.js
</span><span class='line'>â”‚Â Â  â””â”€â”€ users.js
</span><span class='line'>â””â”€â”€ views
</span><span class='line'>    â”œâ”€â”€ error.jade
</span><span class='line'>    â”œâ”€â”€ index.jade
</span><span class='line'>    â””â”€â”€ layout.jade</span></code></pre></td></tr></table></div></figure>


<p>Go ahead and delete the <code>/routes/users.js</code> file and the following lines from <code>app.js</code></p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/users&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then create a new routes file named <code>/routes/foo.js</code> and and require it from your app server.</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/foo&#39;</span><span class="p">,</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/foo&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How to <code>GET /foo</code></h2>

<p>Inside <code>/routes/foo.js</code>, you need to require the router module from ExpressJS, define a route on it, and export it back out.</p>

<figure class='code'><figcaption><span>/routes/foo.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;this is the index for foo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everytime you change a route, you need to restart your server. Nevigating to <a href="http://localhost:3000/foo">localhost:3000/foo</a> should display the message:</p>

<p><img src="http://www.katieleonard.ca/images/160412-nested-routes/foo.png"></p>

<h2>How to <code>GET /foo/bar</code></h2>

<p>Create simple nested routes by requiring the child route file from the parent route file.</p>

<figure class='code'><figcaption><span>/routes/foo.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./bar&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;this is the index for foo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo/bar</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/bar&#39;</span><span class="p">,</span> <span class="nx">bar</span><span class="p">)</span> <span class="c1">// tell the router to use bar.js for child routes</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a new routes file named <code>/routes/bar.js</code> and define a root route the same way you did for <code>/routes/foo.js</code>:</p>

<figure class='code'><figcaption><span>/routes/bar.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo/bar</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;this is the index for bar&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bounce your server again and navigate to <a href="http://localhost:3000/foo/bar">localhost:3000/foo/bar</a></p>

<p><img src="http://www.katieleonard.ca/images/160412-nested-routes/foobar.png"></p>

<h2>How to <code>GET /foo/42</code></h2>

<p>Expecting a parameter? No problem! access URL params directly from the request object: <code>req.params.nameOfParam</code>:</p>

<figure class='code'><figcaption><span>/routes/foo.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// GET /foo/42</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/:number&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;this is foo #&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">number</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>Navigate to <a href="http://localhost:3000/foo/42">localhost:3000/foo/42</a> to see the result.</p>

<p><img src="http://www.katieleonard.ca/images/160412-nested-routes/fooNumber.png"></p>

<h2>How to <code>GET /foo/42/baz</code></h2>

<p>Getting a child route from a parameterized parent is where I was getting confused. It turns out that you need to configure the router a little differently when you are passing params through.</p>

<figure class='code'><figcaption><span>/routes/foo.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">baz</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./baz&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// GET /foo/42/baz</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/:number/baz&#39;</span><span class="p">,</span> <span class="nx">baz</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>You need to pass an options object to <code>express.Router</code> to merge the params from any parent route:</p>

<figure class='code'><figcaption><span>/routes/baz.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">({</span><span class="nx">mergeParams</span><span class="o">:</span> <span class="kc">true</span><span class="p">})</span> <span class="c1">// don&#39;t forget the parent params!</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo/42/baz</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// the param name is from the parent as well</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;this is the baz for foo#&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>Navigate to <a href="http://localhost:3000/foo/42/baz">localhost:3000/foo/42/baz</a> to enjoy your success.</p>

<p><img src="http://www.katieleonard.ca/images/160412-nested-routes/fooNumberBaz.png"></p>

<h2>How to <code>GET /foo/42/baz/123</code></h2>

<p>Parameterizing a child route is the same process as for the parent route:</p>

<figure class='code'><figcaption><span>/routes/baz.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">({</span><span class="nx">mergeParams</span><span class="o">:</span> <span class="kc">true</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo/42/baz</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;this is the baz for foo#&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET /foo/42/baz/123</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/:id&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;baz #&#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="err">â€˜</span> <span class="k">for</span> <span class="nx">foo</span> <span class="err">#â€™</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">number</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</span></code></pre></td></tr></table></div></figure>


<p>Navigate to <a href="http://localhost:3000/foo/42/baz/123">localhost:3000/foo/42/baz/123</a> to enjoy your success.</p>

<p><img src="http://www.katieleonard.ca/images/160412-nested-routes/fooNumberBazNumber.png"></p>

<p>TADA! a model of nested routes that you can apply to any application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preflight Check With CORS -- chainPreflight Option]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/preflight-check-with-cors-chainpreflight-option/"/>
    <updated>2016-04-09T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/preflight-check-with-cors-chainpreflight-option</id>
    <content type="html"><![CDATA[<p>I am working through setting up CORS on a web server, and <a href="http://katieleonard.ca/blog/2016/preflight-check-with-cors/">learning all about Cross-Origin Resource Sharing</a>. When I came across the <strong>chainPreflight</strong> option, I also learned that I didn&rsquo;t have a strong enough understanding of web server vocabulary.<!--more--> Here are the docs for the standard Jetty CrossOriginFilter object:</p>

<p><img src="http://www.katieleonard.ca/images/160329-preflight-cors/chainPreflight-docs.png"></p>

<p>Most references and docs for CORS filtering use the exact same language to describe <code>chainPreflight</code>, but what does it mean for requests to be &ldquo;chained to their target resource?&rdquo; Is this a good thing? If it defaults to true, it must be the expected behaviour&hellip; What about &ldquo;otherwise the filter will response to the preflight?&rdquo; Is that even proper grammar? I asked on <a href="http://stackoverflow.com/q/36414029/1279340">StackOverflow</a>, and five days later, still no answers.</p>

<p>Luckily, I have access to an army of experts at work, and this is what I learned about <strong>chainPreflight</strong>:</p>

<p><img src="http://www.katieleonard.ca/images/160329-preflight-cors/chainPreflight-seq.png"></p>

<p>The &lsquo;target resource&rsquo; is the server endpoint that the request is targeting. If the preflight request is chained to the target resource, it it will pass through the filter (which adds the necessary <code>Allows-*</code> headers) all the way to the endpoint, and the endpoint must have some business logic for handling and responding to the request.</p>

<p>If the preflight request is NOT chained to the target resource, then the filter will add the necessary <code>Allows-*</code> headers and send a response back directly.</p>

<p>Since I don&rsquo;t want to do anything with the OPTIONS preflight request, I can confidently set this option to false, saying &ldquo;whatever you&rsquo;ve got, send it over!&rdquo;</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preflight Check With CORS]]></title>
    <link href="http://www.katieleonard.ca/blog/2016/preflight-check-with-cors/"/>
    <updated>2016-03-29T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2016/preflight-check-with-cors</id>
    <content type="html"><![CDATA[<p>Modern web applications can draw resources from anywhere on the web. Fonts, JavaScript libraries, images, and other data can be fetched from CDNs, Amazon, IMDB, or anywhere else that provides a public API. Early browsers restricted web applications to same-origin requests, which prevented the sharing of resources between applications, but also ensured that data from one application could not be tampered with by another. The thinkers at the W3C came up with a means of communicating safe cross-origin requests that would allow even destructive remote actions to be performed, as long as the server consented to receive the request. Enter CORS, and preflighting.</p>

<!--more-->


<h3>What is CORS?</h3>

<p>Cross-Origin Resource Sharing occurs when JavaScript on a web page requests data from (or sends data to) a location on a different host. Any website that embeds a video from YouTube, uses a custom font, or posts to social media on your behalf, is making a CORS request. CORS is a <a href="https://www.w3.org/TR/cors/">set of web standards</a> developed to enable safe cross-domain communication.</p>

<h3>What is preflighting?</h3>

<p>CORS functions through the specification of new HTTP headers that allow servers to describe the origin and nature of the request. For each outgoing request to a different domain, the browser will look at the headers to determine if the request that looks like it will affect data on the receiving server. Any simple request that uses one of the common HTTP verbs and a basic Content-Type are allowed to pass without further comment. But if the request has different header values, the browser checks with the server first to make sure the request is expected. This is called a pre-flight check.</p>

<h3>What does a simple CORS request look like?</h3>

<p>For simple requests (no pre-flight check), the method must be one of:</p>

<pre><code>- GET
- HEAD
- POST
</code></pre>

<p>The only extra headers allowed are:</p>

<pre><code>- Accept
- Accept-Language
- Content-Language
- Content-Type
</code></pre>

<p>For the Content-Type header, the only allowed values are:</p>

<pre><code>- application/x-www-form-urlencoded
- multipart/form-data
- text/plain
</code></pre>

<p>XMLHttpRequests (aka XHRs or ajax) use CORS to mitigate the risks of pulling or pushing sensitive data across domains. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;very safe, ordinary text content&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://api.example.com&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">()</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">send</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.katieleonard.ca/images/160329-preflight-cors/cors-without-preflight.png"></p>

<p>The browser checks out the request, sees that it is unlikely to have any negative consequences, and passes it along to the requested endpoint. In the Network tab, simple CORS requests will appear by themselves:</p>

<p><img src="http://www.katieleonard.ca/images/160329-preflight-cors/one-request.png"></p>

<h3>What does a pre-flight CORS request look like?</h3>

<p>For non-simple requests, the method could be any of the HTTP verbs along with any other combination of headers. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;possibly unstable or malicious content&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://api.example.com&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">()</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;application/json&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">send</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this request I am trying to POST a JSON object to an API endpoint, which could potentially have destructive consequences for data on the other side of the endpoint. When the browser inspects the headers of this request it gets suspicious, and fires off a preliminary request to the endpoint with the meta data from the request:</p>

<p><img src="http://www.katieleonard.ca/images/160329-preflight-cors/cors-with-preflight.png"></p>

<p>The server at the endpoint responds to the pre-flight request with a list of authorized headers, including acceptable request origins, content, and actions.</p>

<p>Ignoring for a moment that the requests fail (because api.example.com does not exist), the non-simple CORS request produces two requests instead of one:
<img src="http://www.katieleonard.ca/images/160329-preflight-cors/two-requests.png"></p>

<p>The result of the pre-flight OPTIONS request will determine if the second is ever sent on to the endpoint. This is how browsers keep your application data secure from malicious or unintended changes.</p>

<h3>Why OPTIONS, and not POST?</h3>

<p>I found <a href="http://stackoverflow.com/a/16945321">this great answer</a> on stackoverflow that explains why the creators of CORS made a new request type, <code>OPTIONS</code>. Before the CORS standards were introduced, neither browsers nor servers knew how to handle cross-domain requests. Browsers would throw an error, but servers would process the request without concern. Inventing a new method type that CORS-enabled browsers AND CORS-aware servers could handshake with ensures that both sides are sensible to the meaning of the pre-flight request.</p>

<h4>RESOURCES</h4>

<ul>
<li>Learn more about the web standards at <a href="https://www.w3.org/TR/cors/">W3C</a></li>
<li>Find out more about how CORS is <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests:">implemented at Mozilla</a></li>
<li>Find out what web browsers support CORS at <a href="http://caniuse.com/#search=CORS">caniuse.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keighty's 2015 - by the Numbers]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/keightys-2015-by-the-numbers/"/>
    <updated>2015-12-26T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/keightys-2015-by-the-numbers</id>
    <content type="html"><![CDATA[<p>2015 has been a very eventful year. Not only did I write and launch an ebook about my code school experience, but I have also built and launched a book site, competed in a national <a href="acbl.com">Bridge</a> tournament in New Orleans, celebrated 10 years of wedded bliss with <a href="http://virtual-playbill.herokuapp.com/about">Krista Garver</a>, spent 3 weeks traveling in the Mediterranean, and joined a new team at work where I get to deep-dive into JavaScript and browsers. Checkout my <a href="http://katieleonard.ca/images/151226-year-in-review/2015-year-in-review-infographic.png">infographic</a> for more!<!--more--></p>

<p><img src="http://www.katieleonard.ca/images/151226-year-in-review/2015-year-in-review-infographic.png"></p>

<h4>RESOURCES</h4>

<p>Interested in making your own infographic? Try <a href="http://www.canva.com/">canva</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faster Asset Loading With Cache-Control]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/faster-asset-loading-with-cache-control/"/>
    <updated>2015-11-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/faster-asset-loading-with-cache-control</id>
    <content type="html"><![CDATA[<p>My side project (Virtual Playbill) is an image-heavy application, and I used YSlow to find a few quick performance wins. The first &lsquo;F&rsquo; I got was for No Expires Headers:</p>

<p><img src="http://www.katieleonard.ca/images/151127-cache-control/add-expires-headers.png"></p>

<h3>What is an Expires Header?</h3>

<p>Loading the page requires slow and expensive network calls to download all the JavaScript, CSS, and image files. If someone visits the page more than once, I can avoid using the network by storing a local copy of the files in their browser cache &mdash; temporary local storage that is designed for quick retrieval. I can tell the browser to cache a copy of files that don&rsquo;t change very often by setting Expires headers.</p>

<!--more-->


<p>When a web server receives a request it adds some metadata to the response in the form of HTTP headers. Headers are key-value pairs that tell the browser information about the file it has received, such as how big it is (<code>Content-Length</code>), what kind it is (<code>Content-Type</code>), and how long the browser should cache the response (<code>Cache-Control</code>).</p>

<p>In the case of Virtual Playbill, all the images are served from AWS Simple Storage Service (S3), and there are a couple of ways to add headers.</p>

<h3>1. Tedious Manual Addition</h3>

<p>You can add headers manually to a single asset stored in S3 using the metadata section:
<img src="http://www.katieleonard.ca/images/151127-cache-control/add-metadata-in-s3-0.png">
<img src="http://www.katieleonard.ca/images/151127-cache-control/add-metadata-in-s3-1.png">
<img src="http://www.katieleonard.ca/images/151127-cache-control/add-metadata-in-s3-2.png"></p>

<p>But I have more than a hundred files to change (yawn).</p>

<h3>2. Write a Nodejs Script using <code>aws-sdk</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">aws</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;aws-sdk&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aws</span><span class="p">.</span><span class="nx">S3</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;Your_bucket_name&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">s3</span><span class="p">.</span><span class="nx">listObjects</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Something went wrong when retrieving the list of objects: &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">Contents</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">image</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Key</span> <span class="p">}))</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">imageList</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">collectImageParams</span><span class="p">(</span><span class="nx">imageList</span><span class="p">)</span>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">imageChangeParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">imageChangeParams</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">s3</span><span class="p">.</span><span class="nx">copyObject</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Oops! Something went wrong with copy/replace for &quot;</span> <span class="o">+</span> <span class="nx">params</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Duplicating a file in S3 will change the metadata.</span>
</span><span class='line'><span class="c1">// You can make sure the new file has the same</span>
</span><span class='line'><span class="c1">// access control by passing through the right permissions</span>
</span><span class='line'><span class="c1">// and ContentType along with the new CacheControl header</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">collectImageParams</span><span class="p">(</span><span class="nx">imageList</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">imageList</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">imageName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">imageParams</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;Bucket&#39;</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">Bucket</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;ACL&#39;</span><span class="o">:</span> <span class="s1">&#39;public-read&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;MetadataDirective&#39;</span><span class="o">:</span> <span class="s1">&#39;REPLACE&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;CacheControl&#39;</span><span class="o">:</span> <span class="s1">&#39;max-age=2592000&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;ContentType&#39;</span><span class="o">:</span> <span class="s1">&#39;image/jpeg&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">imageParams</span><span class="p">.</span><span class="nx">Key</span> <span class="o">=</span> <span class="nx">imageName</span>
</span><span class='line'>    <span class="nx">imageParams</span><span class="p">.</span><span class="nx">CopySource</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">imageParams</span><span class="p">.</span><span class="nx">Bucket</span> <span class="o">+</span><span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">imageParams</span><span class="p">.</span><span class="nx">Key</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">imageParams</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Still.. I don&rsquo;t want to have to run this script every time I upload a new file (yawn)&hellip;</p>

<h3>3. Add Headers Every Time You Upload</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">S3Upload</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">uploadToS3</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">public_url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">this_s3upload</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">this_s3upload</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">xhr</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">createCORSRequest</span><span class="p">(</span><span class="s1">&#39;PUT&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="nx">file</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;x-amz-acl&#39;</span><span class="p">,</span> <span class="s1">&#39;public-read&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Set the Cache-Control header for every file upload</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;Cache-Control&#39;</span><span class="p">,</span> <span class="s1">&#39;max-age=2592000&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Great Results</h3>

<p>No matter how you add the Cache-Control header, the result is amazing:
<img src="http://www.katieleonard.ca/images/151127-cache-control/cache-control.png"></p>

<h3>Resources</h3>

<p>For more information about HTTP headers and the browser cache, check out these useful resources:</p>

<ul>
<li><a href="http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/">Beginners Guide to HTTP Cache Headers</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=en">Optimizing Content Efficiency Using HTTP Caching</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
