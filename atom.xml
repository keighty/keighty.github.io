<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[keighty]]></title>
  <link href="http://www.katieleonard.ca/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-01-27T08:27:16-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scopes and Single Table Inheritance]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/scopes-and-single-table-inheritance/"/>
    <updated>2015-01-22T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/scopes-and-single-table-inheritance</id>
    <content type="html"><![CDATA[<p>Single table inheritance (STI) is a way to emulate object-oriented inheritance in a relational database<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> by storing multiple object types in one table, distinguishable by a discriminator column such as <code>type</code>. Mixing levels of abstraction may make <code>join</code> operations easier, but it also makes other queries more complicated. In Rails 3.2, a query optimization was introduced that had some unintended consequences for STI.</p>

<!--more-->


<p>A scope represents a narrowing of a database query, and a named scope is syntactic sugar for defining a class method at runtime.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Shirt</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:in_style</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="s1">&#39;purchase_date &gt;= ?&#39;</span><span class="p">,</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">2</span><span class="o">.</span><span class="n">months</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PoloShirt</span> <span class="o">&lt;</span> <span class="no">Shirt</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:red</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">color</span><span class="p">:</span> <span class="s1">&#39;red&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:blue</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">color</span><span class="p">:</span> <span class="s1">&#39;blue&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SweatShirt</span> <span class="o">&lt;</span> <span class="no">Shirt</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:logo</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">logo</span><span class="p">:</span> <span class="s1">&#39;dragon&#39;</span> <span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">PoloShirt</span><span class="o">.</span><span class="n">red</span><span class="o">.</span><span class="n">in_style</span>
</span></code></pre></td></tr></table></div></figure>


<p>The scope <code>:in_style</code> is converted into a class method behind the scenes at runtime, and is defined on the singleton class where the scope was named, not on the caller. While this detail has no consequences for objects outside of an inheritance scheme, it means that when PoloShirt invokes the <code>:in_style</code> scope, the class method is declared on Shirt, not PoloShirt.</p>

<p>Here is where the history lesson begins. Scopes have evolved in Rails, and while they remain syntactic sugar for definition class methods, the details, method signature, and sql translation have differed dramatically.</p>

<p>In <a href="http://www.rubydoc.info/docs/rails/3.0.0/ActiveRecord/NamedScope/ClassMethods:scope">Rails 3.0</a>, the scope method accepts a name, scope_options, and optional block. Scopes are directly translated into class methods behind the scenes, and the consequences of chaining scopes are the same as chaining queries, just nicer looking.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PoloShirt.red.in_style.to_sql
</span><span class='line'>=&gt; SELECT * from shirts WHERE color = 'red' where type = 'PoloShirt' where purchase_date &gt;= 1417102745 where type IN ('PoloShirt', 'Sweatshirt')</span></code></pre></td></tr></table></div></figure>


<p>Notice the implicit <code>where</code> clause in STI. The <code>:red</code> scope, declared on PoloShirt has <code>where type = 'PoloShirt'</code>, and the <code>:in_style</code> scope, declared on Shirt, has <code>where type IN ('PoloShirt', 'Sweatshirt')</code>. The second <code>where</code> clause will have no impact on the query results, because they are already scoped to &lsquo;PoloShirt&rsquo;. It is this behaviour that evolves over time.</p>

<p>The first jump in <code>scope</code> evolution is in <a href="http://www.rubydoc.info/docs/rails/3.2.8/ActiveRecord/Scoping/Named/ClassMethods:scope">Rails 3.2</a>, where the scope_options can include lambdas. Passing a lambda is a big advantage in that it allows the scope to be re-evaluated each time it is called. Unfortunately the implementation also remixes the query parameters of all chained scopes before evaluation:</p>

<blockquote><p>In nested scopings, all previous parameters are overwritten by the innermost rule, with the exception of <code>where</code>, <code>includes</code>, and <code>joins</code> operations in Relation, which are merged.</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PoloShirt.red.in_style.to_sql
</span><span class='line'>=&gt; SELECT * from shirts where color = 'red' where purchase_date &gt;= 1417102745 where type IN ('PoloShirt', 'Sweatshirt')</span></code></pre></td></tr></table></div></figure>


<p>The first <code>where type =</code> clause is merged with the last <code>where type IN</code> clause. The results of this query will no longer be scoped to PoloShirts, but will return all <code>red.in_style</code> Shirts of any type. Bad news for STI.</p>

<p>The good news is that this behaviour is <a href="https://github.com/rails/rails/commit/cd26b6ae">fixed</a> in <a href="http://www.rubydoc.info/docs/rails/4.0.0/ActiveRecord/Scoping/Named/ClassMethods#scope-instance_method">Rails 4.0</a>. The latest evolution of scopes no longer allow you to pass a non-callable object (like a hash), and all scopes are merged using AND.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PoloShirt.red.in_style.to_sql
</span><span class='line'>=&gt; SELECT * from shirts where color = 'red' where purchase_date &gt;= 1417102745 where type = 'PoloShirt' AND type IN ('PoloShirt', 'Sweatshirt')</span></code></pre></td></tr></table></div></figure>


<p>Our <code>red.in_style</code> query is once again scoped to the right level of the inheritance heirarchy. Named scopes are chainable and lazy-evaluated, making them a powerful query-building tool that can be difficult to troubleshoot &mdash; especially when they are mixed with single-table inheritance.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://en.wikipedia.org/wiki/Single_Table_Inheritance<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our Healthcare System Is a Legacy Application]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/healthcare-is-a-legacy-application/"/>
    <updated>2015-01-20T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/healthcare-is-a-legacy-application</id>
    <content type="html"><![CDATA[<p>One of my favourite blogs is <a href="http://www.brainpickings.org">Brain Pickings</a>, written by Maria Popova, which is a collection of thoughts spanning art, science, psychology, and almost every other subject I read voraciously. Recently I stumbled upon <a href="http://www.brainpickings.org/2014/09/17/sherwin-nuland-how-we-die/">this gem</a>, Sherwin B. Nuland&rsquo;s <a href="http://www.amazon.com/How-We-Die-Sherwin-Nuland-ebook/dp/B004CJ8QCE"><em>How We Die</em></a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. It is a raw look at the biological processes that occur at the end of life, which resonated with me on many levels.</p>

<!--more-->


<p>The biologist within was fascinated by Nuland&rsquo;s ability to reduce the &ldquo;ten thousand several doors for men to take their exits&rdquo;<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> to the same basic process of poor oxygenation and nutrition of vital tissues resulting in organ failure. Whether the process is long or slow, instigated by heart disease, Alzheimer&rsquo;s disease, AIDS, accident, or old age, the end must come when the heart stops nourishing the brain.</p>

<p>As a Clinical Professor of Surgery at Yale University, Nuland became intimate with death and its increasingly dehumanizing circumstances. Life’s final chapter has become invisible to most of us. It is likely to be carried out in an intensive care unit, the person reduced to data on a screen, and the advancing disease perceived as a failure of management rather than a natural and inevitable process. He shares the lessons he learned about providing true patient care rather than solving a biological riddle (sometimes the best patient care is no care at all).</p>

<p>Most importantly, he calls attention to the deplorable state of healthcare today, where the &ldquo;provider&rdquo; has usurped the role of the physician:</p>

<blockquote><p>[Our] present system of in-hospital care&hellip; has simply accreted by the constant piling on or insinuation of patches of not necessarily compatible structure to an edifice already jerry-built of competing needs.</p></blockquote>

<p>Sounds remarkably like a long-lived legacy application that is impossibly complex and difficult to work in. The healthcare system is in need of a great refactoring, which isn&rsquo;t without precedent (read about Abraham Flexner&rsquo;s report <a href="https://books.google.com/books?id=lxgTAAAAYAAJ&amp;printsec=frontcover&amp;dq=inauthor:%22Abraham+Flexner%22&amp;hl=en&amp;sa=X&amp;ei=rmXAVIvHLYKYoQSM5YGgDQ&amp;ved=0CCwQ6AEwAg#v=onepage&amp;q&amp;f=false">Medical Education in the United States and Canada</a> that started the movement to raise &ldquo;American medical education&hellip; to the highest [status] in the civilized world&rdquo;<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>)</p>

<p><em>How We Die</em> won the National Book Award, was a finalist for the Pulitzer Prize, and perched atop the New York Times&#8217; bestseller list for more than thirty weeks. This book answers a question we have all asked at some point &mdash; what will it be like to die? A hope many of us share is to have a dignified death with little suffering for ourselves and our families, but reflecting on his many years and experiences with death, Nuland has found that</p>

<blockquote><p>the greatest dignity to be found in death is the dignity of the life that preceded it. This is a form of hope we can all achieve, and it is the most abiding of all. Hope resides in the meaning of what our lives have been.</p></blockquote>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Nuland, Sherwin B. (2014-06-25). <em>How We Die: Reflections on Life&rsquo;s Final Chapter</em>. Kindle Edition<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Webster, John. (1612) <em>The Duchess of Malfi</em><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Flenxer, Abraham. (1910). <em>Medical Education in the United States and Canada</em>.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objects vs Data Structures]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/objects-vs-data-structures/"/>
    <updated>2015-01-18T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/objects-vs-data-structures</id>
    <content type="html"><![CDATA[<p>&ldquo;It is impossible to create an abstraction unknowingly or by accident,&rdquo; says Sandi Metz in <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330/ref=sr_1_1?ie=UTF8&amp;qid=1421723392&amp;sr=8-1&amp;keywords=practical+object+oriented+design+in+ruby"><em>Practical Object Oriented Design in Ruby</em></a>. An abstraction is a common, stable quality, such that you would find in a java interface. An interface is an idea that cannot be made concrete, but contains behaviour <a href="http://en.wikipedia.org/wiki/Interface_%28Java%29">encoding similarities</a> which objects might share. Even the definition of abstraction is abstract, and it wasn&rsquo;t until I read Robert C. Martin&rsquo;s chapter on Objects and Data Structures in <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"><em>Clean Code</em></a> that I really started to understand them.</p>

<!--more-->


<h3>What is a data structure</h3>

<p>A data structure is a class that exposes its data to the public. It should have no meaningful behaviour, and can be characterized by a set of attributes along with getters and setters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Point1</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:z</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Point1</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">p</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, a Point is defined as an object at some location on a coordinate grid of some kind. That sounds abstract enough: you can create a point, <span class='pullquote-right' data-pullquote='Hiding implementation is not about putting a layer of functions between the variables. It is about abstractions.'>access all of the point&rsquo;s data, and set its location along each axis independently. You have an instance of a point, but it is not an abstraction of a point &mdash; it is a data structure. Hiding implementation is not about putting a layer of functions between the variables. It is about abstractions.
</span> Adding an initializer that sets each variable, or a <code>to_s</code> method for getting a pretty output, would not make the Point1 class any more an abstraction of a position in space. To make an abstraction you can&rsquo;t just use getters and setters &mdash; you have to think about how you are representing the data.</p>

<h3>What is an object</h3>

<p>An object hides its data behind abstractions. A Point is not defined by its <code>[@x, @y, @z]</code>, but by its location in space. If space is a coordinate system, it could be 2- or 3-dimensional.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Point2</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">set_location</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="s2">&quot;(</span><span class="si">#{</span><span class="o">[</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="p">,</span> <span class="vi">@z</span><span class="o">].</span><span class="n">compact</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:location</span><span class="p">,</span> <span class="ss">:to_s</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_location</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>    <span class="vi">@z</span> <span class="o">=</span> <span class="n">z</span>
</span><span class='line'>    <span class="n">location</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="kp">private</span> <span class="ss">:set_location</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:move_point</span><span class="p">,</span> <span class="ss">:set_location</span>
</span><span class='line'>  <span class="kp">public</span> <span class="ss">:move_point</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Point2</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">move_point</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">move_point</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>A point cannot exist separate from it&rsquo;s coordinates, and coordinates cannot exist or be altered without using the abstraction of moving in space.</p>

<blockquote><p>&ldquo;We do not want to expose the details of our data. Rather we want to express our data in abstract terms. This is not merely accomplished by using interfaces and/or getters and setters. Serious thought needs to be put into the best way to represent the data that an object contains.&rdquo;</p>

<p>&mdash; Martin</p></blockquote>

<p>This is why <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">fat models are an anti-pattern in Rails</a>. ActiveRecord makes an object out of a data structure, and adding behaviour beyond data validation makes the model a hybrid data object. <a href="http://railscasts.com/episodes/398-service-objects">Service Objects</a> are abstractions of model behaviour (pun intended).</p>

<p>Now I know what an abstraction is, and I understand that simply extracting methods into interfaces doesn&rsquo;t magically make an abstraction. As Metz says, &ldquo;good design naturally progresses toward small independent objects that rely on abstractions.&rdquo; An object is more than a data structure; it is an idea and it must be applied deliberately.</p>

<!-- resources
http://www.cgore.com/programming/ruby/public-aliases-of-private-methods.lisp
-->


<!-- resources
http://railscasts.com/episodes/398-service-objects
http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#dup vs #clone in Ruby and Rails]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/number-dup-vs-number-clone-in-ruby-and-rails/"/>
    <updated>2015-01-10T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/number-dup-vs-number-clone-in-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>I was recently fixing a failing test and discovered that Ruby and Rails implement <code>#clone</code> and <code>#dup</code> in confusing and occasionally opposite ways.</p>

<!--more-->


<h3>In Rails <code>#clone</code> is a less complete copy of an object than <code>#dup</code></h3>

<p>Rails versions have flip-flopped on how to implement <code>#clone</code> and <code>#dup</code>, and there is ambiguity in how Rails defines &ldquo;shallow&rdquo;. In Rails 4.0, <a href="https://github.com/rails/rails/blob/4-0-stable/activerecord/lib/active_record/core.rb#L217-L220"><code>#clone</code> is a shallow copy</a> of an ActiveRecord object. &ldquo;Shallow&rdquo; in this context means that the <code>clone</code> shares attributes with the <code>original</code>:</p>

<blockquote><p>Identical to Ruby&rsquo;s clone method.  This is a &ldquo;shallow&rdquo; copy.  Be warned that your attributes are not copied. That means that modifying attributes of the clone will modify the original, since they will both point to the same attributes hash. If you need a copy of your attributes hash, please use the #dup method.</p></blockquote>

<p>However, <a href="https://github.com/rails/rails/blob/4-0-stable/activerecord/lib/active_record/core.rb#L234-L240"><code>#dup</code> is also described as a shallow copy</a>. &ldquo;Shallow&rdquo; in this context means that while the dup does not share attributes with the original, it does share associations.</p>

<blockquote><p>Duped objects have no id assigned and are treated as new records. Note that this is a &ldquo;shallow&rdquo; copy as it copies the object&rsquo;s attributes only, not its associations. The extent of a &ldquo;deep&rdquo; copy is application specific and is therefore left to the application to implement according to its need.</p></blockquote>

<h4><code>clone</code> vs <code>dup</code> in Rails:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pry&gt; <span class="nv">original</span> <span class="o">=</span> User.find<span class="o">(</span>3<span class="o">)</span>
</span><span class='line'>  User Load <span class="o">(</span>0.7ms<span class="o">)</span>  SELECT  <span class="s2">&quot;users&quot;</span>.* FROM <span class="s2">&quot;users&quot;</span> WHERE <span class="s2">&quot;users&quot;</span>.<span class="s2">&quot;id&quot;</span> <span class="o">=</span> ? LIMIT 1  <span class="o">[[</span><span class="s2">&quot;id&quot;</span>, 3<span class="o">]]</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&lt;User id: 3, first_name: &quot;katie&quot;, last_name: &quot;leonard&quot;, email: nil, created_at: &quot;2015-01-10 17:37:00&quot;, updated_at: &quot;2015-01-10 17:37:00&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'>pry&gt; <span class="nv">clone_copy</span> <span class="o">=</span> original.clone
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&lt;User id: 3, first_name: &quot;katie&quot;, last_name: &quot;leonard&quot;, email: nil, created_at: &quot;2015-01-10 17:37:00&quot;, updated_at: &quot;2015-01-10 17:37:00&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'>pry&gt; <span class="nv">dup_copy</span> <span class="o">=</span> original.dup
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&lt;User id: nil, first_name: &quot;katie&quot;, last_name: &quot;leonard&quot;, email: nil, created_at: nil, updated_at: nil&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>clone_copy</code> is an exact copy of the original (same <code>user.id</code>) and the <code>dup_copy</code> is a new record (<code>user.id</code> = nil). Any changes made to the <code>clone_copy</code> will be changed in the <code>original</code>, but any changes to the <code>dup_copy</code> attributes will remain isolated.</p>

<h3>In Ruby <code>#clone</code> is a more complete copy of an object than <code>#dup</code></h3>

<p>With simple classes, <code>clone()</code> and <code>dup()</code> behave identically:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>irb&gt; class User
</span><span class='line'>irb&gt;   attr_accessor :first_name, :last_name, :email
</span><span class='line'>irb&gt;   def initialize<span class="o">(</span><span class="nv">options</span><span class="o">={})</span>
</span><span class='line'>irb&gt;     @first_name <span class="o">=</span> options<span class="o">[</span>:first_name<span class="o">]</span>
</span><span class='line'>irb&gt;     @last_name  <span class="o">=</span> options<span class="o">[</span>:last_name<span class="o">]</span>
</span><span class='line'>irb&gt;     @email      <span class="o">=</span> options<span class="o">[</span>:email<span class="o">]</span>
</span><span class='line'>irb&gt;   end
</span><span class='line'>irb&gt; <span class="nv">end</span>
</span><span class='line'><span class="o">=</span>&gt; :initialize
</span><span class='line'>
</span><span class='line'>irb&gt; <span class="nv">original</span> <span class="o">=</span> User.new<span class="o">(</span>first_name: <span class="s2">&quot;katie&quot;</span>, last_name: <span class="s2">&quot;leonard&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&lt;User:0x007fd7e98e0aa8 @first_name=&quot;katie&quot;, @last_name=&quot;leonard&quot;, @email=nil&gt;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; <span class="nv">cloned_copy</span> <span class="o">=</span> original.clone
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&lt;User:0x007fd7e98c87c8 @first_name=&quot;katie&quot;, @last_name=&quot;leonard&quot;, @email=nil&gt;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; <span class="nv">dup_copy</span> <span class="o">=</span> original.dup
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&lt;User:0x007fd7e98b24a0 @first_name=&quot;katie&quot;, @last_name=&quot;leonard&quot;, @email=nil&gt;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; cloned_copy.first_name <span class="o">=</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;foo&quot;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; original.first_name
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;katie&quot;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; dup_copy.first_name
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;katie&quot;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; dup_copy.first_name <span class="o">=</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;bar&quot;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; original.first_name
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;katie&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>clone()</code> and <code>dup()</code> function the same way!</p>

<p><code>clone()</code> from the <a href="http://ruby-doc.org/core-2.1.5/Object.html#method-i-clone">Ruby docs</a>:</p>

<blockquote><p>Produces a shallow copy of obj — the instance variables of obj are copied, but not the objects they reference. Copies the frozen and tainted state of obj. See also the discussion under Object#dup.</p></blockquote>

<p><code>dup()</code> from the <a href="http://ruby-doc.org/core-2.1.5/Object.html#method-i-dup">Ruby docs</a> looks suspiciously like the docs for <code>clone()</code>:</p>

<blockquote><p>Produces a shallow copy of obj — the instance variables of obj are copied, but not the objects they reference. dup copies the tainted state of obj. This method may have class-specific behavior. If so, that behavior will be documented under the #initialize_copy method of the class.</p></blockquote>

<p>This deserves further clarification:</p>

<blockquote><p>In general, clone and dup may have different semantics in descendant classes. While clone is used to duplicate an object, including its internal state, dup typically uses the class of the descendant object to create the new instance. When using dup any modules that the object has been extended with will not be copied.</p></blockquote>

<p>To paraphrase, <code>#dup</code> will act like <code>#clone</code>, but without the original&rsquo;s singleton class (ergo a &ldquo;shallower&rdquo; copy).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>irb&gt; class User
</span><span class='line'>irb&gt; attr_accessor :first_name, :last_name, :email
</span><span class='line'>irb&gt;   def initialize<span class="o">(</span><span class="nv">options</span><span class="o">={})</span>
</span><span class='line'>irb&gt;     @first_name <span class="o">=</span> options<span class="o">[</span>:first_name<span class="o">]</span>
</span><span class='line'>irb&gt;     @last_name  <span class="o">=</span> options<span class="o">[</span>:last_name<span class="o">]</span>
</span><span class='line'>irb&gt;     @email      <span class="o">=</span> options<span class="o">[</span>:email<span class="o">]</span>
</span><span class='line'>irb&gt;   end
</span><span class='line'>irb&gt; <span class="nv">end</span>
</span><span class='line'><span class="o">=</span>&gt; :initialize
</span><span class='line'>
</span><span class='line'>irb&gt; module Crunchy
</span><span class='line'>irb&gt;   def bacon
</span><span class='line'>irb&gt;     <span class="s2">&quot;bacon&quot;</span>
</span><span class='line'>irb&gt;   end
</span><span class='line'>irb&gt; <span class="nv">end</span>
</span><span class='line'><span class="o">=</span>&gt; :bacon
</span><span class='line'>
</span><span class='line'>irb&gt; <span class="nv">a</span> <span class="o">=</span> User.new<span class="o">(</span>first_name: <span class="s2">&quot;katie&quot;</span>, last_name: <span class="s2">&quot;leonard&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&lt;User:0x007fd7e8882490 @first_name=&quot;katie&quot;, @last_name=&quot;leonard&quot;, @email=nil&gt;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; a.extend<span class="o">(</span>Crunchy<span class="o">)</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&lt;User:0x007fd7e8882490 @first_name=&quot;katie&quot;, @last_name=&quot;leonard&quot;, @email=nil&gt;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; a.bacon
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;bacon&quot;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; <span class="nv">b</span> <span class="o">=</span> a.clone
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&lt;User:0x007fd7e8843060 @first_name=&quot;katie&quot;, @last_name=&quot;leonard&quot;, @email=nil&gt;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; b.bacon
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;bacon&quot;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; <span class="nv">c</span> <span class="o">=</span> a.dup
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&lt;User:0x007fd7e98f05c0 @first_name=&quot;katie&quot;, @last_name=&quot;leonard&quot;, @email=nil&gt;</span>
</span><span class='line'>
</span><span class='line'>irb&gt; c.bacon
</span><span class='line'>NoMethodError: undefined method <span class="sb">`</span>bacon<span class="s1">&#39; for #&lt;User:0x007fd7e98f05c0&gt;</span>
</span><span class='line'><span class="s1">        from (irb):101</span>
</span><span class='line'><span class="s1">        from /usr/local/var/rbenv/versions/2.1.5/bin/irb:11:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are subtle differences between <code>#clone</code> and <code>#dup</code> in Ruby, and less subtle differences in Rails (depending on your version). Take care that the object you want is the object you get.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cleaning the Campground]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/cleaning-the-campground/"/>
    <updated>2015-01-10T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/cleaning-the-campground</id>
    <content type="html"><![CDATA[<p>If you work in a code base with many other contributors, you may have learned the scouting philosophy to &ldquo;leave the campground cleaner than you found it.&rdquo; Sometimes the code you are working in can seem so entangled and complex that it is hard to know where to begin, but <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1420928385&amp;sr=8-1&amp;keywords=clean+code">Robert C. Martin&rsquo;s foundational book, *Clean Code</a>*, tells us that very small changes can improve the readability and maintainability of a piece of code.</p>

<blockquote><p>&ldquo;It is not enough to write the code well. The code has to be <em>kept clean</em> over time.&rdquo;</p></blockquote>

<!--more-->


<p><a href="http://en.wikipedia.org/wiki/Software_rot">Code rot</a> happens to every well-intentioned but long-lived code base, and it can happen either by neglect or by constant development. <span class='pullquote-right' data-pullquote='Add in more developers, each with different coding styles, and before long you will find your code to be impenetrably complex and impossible to modify.'>Neglected software will suffer a gradual deterioration in performance and responsiveness over time. Security vulnerabilities and incompatibilities aside, as new applications are built in newer and faster frameworks, your application will perform poorly in comparison. If your software is actively developed it will be modified, and as it is modified it&rsquo;s complexity will increase. Add in more developers, each with different coding styles, and before long you will find your code to be impenetrably complex and impossible to modify.
</span></p>

<p>There is hope for your legacy application, as long as you establish a culture of constant small improvements:</p>

<ol>
<li>Change one variable name for the better</li>
<li>Break one large function into two or more smaller ones.</li>
<li>Eliminate one small bit of duplication</li>
<li>Clean up one composite if statement.</li>
</ol>


<p>That last one is a bit like low-hanging fruit. Take this complex if statement in <a href="https://github.com/rack/rack/blob/rack-1.5/lib/rack/deflater.rb#L30-L33">Rack::Deflater#call</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def call
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>  # Skip compressing empty entity body responses and responses with
</span><span class='line'>  # no-transform set.
</span><span class='line'>  if Utils::STATUS_WITH_NO_ENTITY_BODY.include?(status) ||
</span><span class='line'>      headers['Cache-Control'].to_s =~ /\bno-transform\b/ ||
</span><span class='line'>     (headers['Content-Encoding'] && headers['Content-Encoding'] !~ /\bidentity\b/)
</span><span class='line'>    return [status, headers, body]
</span><span class='line'>  end
</span><span class='line'>  ...</span></code></pre></td></tr></table></div></figure>


<p>The comment attempts to explain what the code cannot: skip response compression under certain conditions. The intention could easily be described by extracting both the comment and the if statement to a method:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def call
</span><span class='line'>  ...
</span><span class='line'>  if skip_compression?
</span><span class='line'>    return [status, headers, body]
</span><span class='line'>  end
</span><span class='line'>  ...
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>private
</span><span class='line'>
</span><span class='line'># Skip compressing empty entity body responses and responses with
</span><span class='line'># no-transform set.
</span><span class='line'>def skip_compression?
</span><span class='line'>  Utils::STATUS_WITH_NO_ENTITY_BODY.include?(status) ||
</span><span class='line'>    headers['Cache-Control'].to_s =~ /\bno-transform\b/ ||
</span><span class='line'>   (headers['Content-Encoding'] && headers['Content-Encoding'] !~ /\bidentity\b/)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>While the <code>if</code> statement itself is not much better, at least <code>#call</code> is a little more readable. Fight against code rot while building new features in a legacy code base by making small improvements where you can.</p>

<!-- resources
http://en.wikipedia.org/wiki/Software_entropy
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD and the Senior Software Engineer]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/the-senior-software-engineer/"/>
    <updated>2015-01-04T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/the-senior-software-engineer</id>
    <content type="html"><![CDATA[<p>Many developers embrace test-driven development (TDD) as an ideal but rarely put it into practice. I often find myself writing code that works and then writing tests that exercise it to ensure that its behaviour doesn&rsquo;t break when changes are made. Writing tests first is a great way to organize your approach to solving a problem, and in <a href="http://www.amazon.com/Senior-Software-Engineer-Practices-Effective/dp/0990702804/ref=sr_1_1?ie=UTF8&amp;qid=1420403139&amp;sr=8-1&amp;keywords=on+being+a+senior+engineer"><strong>The Senior Software Engineer</strong></a>, David Copeland describes how TDD will help you grow your career as well.</p>

<!--more-->


<p>A senior software engineer is efficient, and delivers a quality product in a timely fashion. <span class='pullquote-left' data-pullquote='Effective problem solvers first spend time understanding the problem space and then design a plan'>Effective problem solvers first spend time understanding the problem space and then design a plan: documenting feature behaviour in a test suite allows you to plan your implementation. Code maintenance and modification are also more efficient when you have a good test suite. If the code has been built using TDD, its behaviour is already well tested. When someone needs to build on top of your feature, the tests will protect it and eliminate the worry of causing regressions (win-win).
</span></p>

<p>Explicitly describing your plan in a test suite has another benefit that I had not considered before, and that is making you resilient to interruption. If your plan is not layed out on paper, you are maintaining it all in your head, and you have to hold on to a lot of context in your working memory. <span class='pullquote-right' data-pullquote='TDD can help you structure your coding task so that it has natural breaking points. If you are interrupted while trying to fix a failing test, you know exactly where you can pick the task up again.'>Every time you are interrupted, you have to dump things out of your working memory, and reloading the problem space takes time and energy. You won&rsquo;t suffer interruptions well if reloading the context takes 15 minutes each time. You will become unresponsive as you block out the outside world, trying to maintain your context.</p>

<p>TDD can help you structure your coding task so that it has natural breaking points. If you are interrupted while trying to fix a failing test, you know exactly where you can pick the task up again. If you are interrupted after getting a test to pass you can easily read through your test suite to regain your context and pick up the next task.
</span></p>

<p>Time and context management are essential skills for becoming a senior software engineer, and I am going to try using test driven development to become more interruptable and more productive.</p>

<!-- RESOURCES
* http://act-r.psy.cmu.edu/wordpress/wp-content/uploads/2012/12/448preparing.to.resume.pdf
* http://interruptions.net/literature/Fogarty-CHI05-p331-fogarty.pdf
* http://contenthere.net/2012/10/what-it-takes-to-be-a-senior-engineer.html
* http://www.amazon.com/Senior-Software-Engineer-Practices-Effective/dp/0990702804/ref=sr_1_1?ie=UTF8&qid=1420403139&sr=8-1&keywords=on+being+a+senior+engineer
* [The Senior Software Engineer](http://www.amazon.com/Senior-Software-Engineer-Practices-Effective/dp/0990702804/ref=sr_1_1?ie=UTF8&qid=1420403139&sr=8-1&keywords=on+being+a+senior+engineer) by David Bryant Copeland

OUTLINE
Test-driven development can help you grow your career.
1. test-driven development is an ideal that many strive for and few embrace.
2. many developers embrace the ideas of test-driven development, but few practice it rigorously.
3. writing tests is important to delivering quality, robust code, and is essential for writing code that you ever hope to change.
4. did you know that test-driven development can help you grow your career as well?
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Reloaded]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/octopress-reloaded/"/>
    <updated>2015-01-03T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/octopress-reloaded</id>
    <content type="html"><![CDATA[<p>I recently upgraded my home hardware from an <a href="http://www.amazon.com/ASUS-1000HE-10-1-Inch-Black-Netbook/dp/B001QTXL82">Asus 10.1&#8221; netbook</a> to a <a href="https://www.apple.com/macbook-pro/">15&#8221; MacBook Pro</a>, and once I adjusted to being able to open more than one window at a time, I got down to the business of loading my files and projects on the new machine. Thanks to <a href="https://www.dropbox.com/">Dropbox</a> and <a href="https://github.com/">Github</a>, most of that work happens either behind the scenes or as needed. Recreating the right environment for each project is still ongoing, and the first challenge I encountered was reloading my blog &mdash; started about two years ago using <a href="http://octopress.org/">Octopress</a>.</p>

<!--more-->


<p>Octopress is an awesome framework built on <a href="http://jekyllrb.com/">jekyll</a>. The learning curve for getting started with jekyll was a little steep (liquid layouts, yaml, not to mention design and UX were all new to me then) , and Octopress delivers on its promise to make it easy: just clone, bundle, and blog. Part of what makes Octopress so awesome is the deploy strategy: static pages are generated from yaml and markdown sources (saved in the source branch), and the pages are checked in to your github or heroku repository (as the master branch).</p>

<p>When you clone the repo, you get both branches, but you have to do a little setup to ensure that master is pulling from and pushing to the right place. Borrowing some code from the <a href="https://github.com/imathis/octopress/blob/master/Rakefile#L351-L358">setup rake task</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:username/username.github.com.git my_blog
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>my_blog
</span><span class='line'><span class="nv">$ </span>git checkout <span class="nb">source</span>
</span><span class='line'><span class="nv">$ </span>mkdir _deploy
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>_deploy
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>git remote add origin git@github.com:username/username.github.com.git
</span><span class='line'><span class="nv">$ </span>git pull origin master
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ..
</span><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>Now I have no excuses to not blog more often&hellip; well, fewer excuses (thanks to <a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">Daniel Doubrovkine</a> for pointing me in the right direction).</p>

<p>I briefly considered switching to a hosted blogging platform (tumblr or wordpress), so I conducted an informal survey (sample size taken from <a href="https://www.digitalocean.com/company/blog/20-developers-to-follow-in-2014/">Digital Ocean&rsquo;s 20 developers to follow</a>) to see what choices leading developers were making, and it looks like a jekyll based blog is still the most popular. What is yours?</p>



<table class="tg">
  <tr>
    <th class="tg-031e">platform</th>
    <th class="tg-031e">users</th>
  </tr>
  <tr>
    <td class="tg-s6z2">jekyll</td>
    <td class="tg-031e">6</td>
  </tr>
  <tr>
    <td class="tg-031e">octopress</td>
    <td class="tg-031e">3</td>
  </tr>
  <tr>
    <td class="tg-031e">none</td>
    <td class="tg-031e">3</td>
  </tr>
  <tr>
    <td class="tg-031e">tumblr</td>
    <td class="tg-031e">1</td>
  </tr>
  <tr>
    <td class="tg-031e">hand-rolled</td>
    <td class="tg-031e">6</td>
  </tr>
  <tr>
    <td class="tg-031e">wordpress</td>
    <td class="tg-031e">1</td>
  </tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Happiness Hypothesis]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/the-happiness-hypothesis/"/>
    <updated>2015-01-01T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/the-happiness-hypothesis</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;Nothing is miserable unless you think it so; and on the other hand, nothing brings happiness unless you are content with it.&rdquo; &mdash;Buddha</p></blockquote>

<p>In <a href="http://www.amazon.com/Happiness-Hypothesis-Finding-Modern-Ancient/dp/0465028020/ref=sr_1_1?ie=UTF8&amp;qid=1420146441&amp;sr=8-1&amp;keywords=the+happiness+hypothesis">The Happiness Hypothesis</a>: Finding Modern Truth in Ancient Wisdom, Jonathan Haidt provides an extensive overview of the state of positive psychology today.</p>

<!--more-->


<p>He uses the analogy of a rider on an elephant to describe how the mind is divided into two parts: the conscious, reasoning part (the rider), and the unconscious mind that is actually driving our behaviour (the elephant). Stepping in to the New Year, the twitter-verse is alive with resolutions to eat less, exercise more, and spend less money &mdash; all laudable goals for the rider, but unless you can re-train the elephant to want those same things, you will find yourself in line for a 16oz hot chocolate with whipped cream by the end of the week.</p>

<h3>On the happiness equation: H = S + C + V</h3>

<blockquote><p>The level of happiness that you actually experience (H) is determined by your biological set point (S) plus the conditions of your life &copy; plus the voluntary activities (V) you do.</p></blockquote>

<p>This has certainly been true in my life. I tend towards a positive outlook (as Haidt describes it, a winner of the &lsquo;cortical lottery&rsquo;), but that doesn&rsquo;t mean I don&rsquo;t experience ups and downs brought on by circumstances and choices. Changing your level of happiness can come from changing your circumstances, or by participating in rewarding acitivites. (Out of ideas? Try <a href="http://www.bodyvox.com/classes/beginning-ballet-and-wine-tasting-0">beginning ballet and wine tasting</a>!)</p>

<h3>On training the elephant</h3>

<blockquote><p>&ldquo;The goal of meditation is to change automatic thought processes, thereby taming the elephant. And the proof of taming is the breaking of attachments&hellip; For Buddha, attachments are like a game of roulette in which someone else spins the wheel and the game is rigged: The more you play, the more you lose. The only way to win is to step away from the table. And the only way to step away, to make yourself not react to the ups and downs of life, is to meditate and tame the mind. Although you give up the pleasures of winning, you also give up the larger pains of losing.&rdquo;</p></blockquote>

<p>I like the idea of training the elephant through meditation, but disagree with the pursuit of non-attachment. Living life without any attachments means missing out on joy as well as pain. If life is an amuzement park, is it better to spend your time on the teacups or the rollercoaster? Isn&rsquo;t it better to have loved and lost than never to have loved at all?</p>

<h3>On your inner lawyer</h3>

<blockquote><p>[People] are skilled at finding reasons to support their gut feelings. The rider acts like a lawyer whom the elephant has hired to represent it in the court of public opinion&hellip; Studies of everyday reasoning show that&hellip; when people are given difficult questions to think about&hellip; they generally lean one way or the other right away, and then put a call in to reasoning to see whether support for that position is forthcoming.</p></blockquote>

<p>I love the idea of our conscious mind acting as a lawyer defending our actions and decisions. We only look for supporting evidence, and any data that undermines our world-view must be discredited or its importance downplayed.</p>

<h3>On reciprocation and gossip</h3>

<blockquote><p>A species equipped with vengeance and gratitude responses can support larger and more cooperative social groups because the payoff to cheaters is reduced by the costs they bear in making enemies&hellip; Tit for tat appears to be built into human nature as a set of moral emotions that make us want to return favor for favor, insult for insult&hellip;</p></blockquote>

<p>Social groups cannot be formed without cooperation and a set of norms. Norms can be enforced through gossip:</p>

<blockquote><p>Many species reciprocate, but only humans gossip, and much of what we gossip about is the value of other people as partners for reciprocal relationships&hellip; Gossip paired with reciprocity allow karma to work here on earth, not in the next life.</p></blockquote>

<h3>On writing your life story</h3>

<blockquote><p>The third level of personality is that of the &ldquo;life story.&rdquo; Human beings in every culture are fascinated by stories; we create them wherever we can.. It&rsquo;s no different with our own lives. We can&rsquo;t stop ourselves from creating what McAdams describes as an &ldquo;evolving story that integrates a reconstructed past, perceived present, and anticipated future into a coherent and vitalizing life myth.&rdquo; Although the lowest level of personality is mostly about the elephant, the life story is written primarily by the rider. You create your story in consciousness as you interpret your own behavior, and as you listen to other people&rsquo;s thoughts about you.</p></blockquote>

<p>Every time I relate a personal anecdote to a new listener I find that I am refining the narrative &mdash; using the same words and phrases, pausing at the same moments each time. My partner and I have developed a cadence when we tell people about our drive across Canada, or our trip to the Maritimes. We are building our life story through relatable moments.</p>

<h3>On growing through adversity</h3>

<blockquote><p>Be sure you have done your best to answer these two questions: Why did this happen? What good might I derive from it?</p></blockquote>

<p>Whatever doesn&rsquo;t kill you doesn&rsquo;t always make you stronger, but we can grow through adversity. Pain doesn&rsquo;t always equal gain, but a root cause analysis (why did this happen?), and reframing to find something positive in the experience (lessons learned), is a great approach.</p>

<h3>On the ideological differences in moral ethics:</h3>

<blockquote><p>The ethic of autonomy, the ethic of community, and the ethic of divinity.</p></blockquote>

<p>Policial and ideological differences arise from approaching life from different moral perspectives. In the ethic of autonomy, the goal is to protect individuals from harm and interference. In the ethic of community the goal is to protect the integrity of groups, families, companies, or nations, and its virtues are obedience, and loyalty. In the ethic of divinity, the goal is to protect the sacred from the profane. They value living in a pure and holy way, free from pollutants such as lust, greed, and hatred.</p>

<h3>Vital engagement (or flow)</h3>

<blockquote><p>Vital engagement does not reside in the person or in the environment; it exists in the relationship between the two.</p></blockquote>

<p>Memories that encorporate more than one sensation are the strongest. Similarly, finding meaning and flow in an activity requires more than just a connection through commitment. There must be connections through a community, a shared history, and a shared experience. I didn&rsquo;t come to love programming because it seemed like a rewarding career path. I built a script that was useful to a coworker, drew excitment from other programmers, and began peeling back the layers of abstraction, enjoying the &lsquo;A-ha!&rsquo; when understanding occurred.</p>

<h3>On happiness and the meaning of life</h3>

<blockquote><p>Happiness is not something that you can find, acquire, or achieve directly. You have to get the conidtions right and then wait.</p></blockquote>

<p>This is the first book I have read that really tried to approach the meaning of life, and my inner elephant has decided that Haidt is on the right track.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Method Lookup in Ruby]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/method-lookup-in-ruby/"/>
    <updated>2014-12-28T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/method-lookup-in-ruby</id>
    <content type="html"><![CDATA[<p>I have once more been working my way through Sandi Metz&#8217; <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">Practical Object-oriented Design in Ruby</a> (POODR) for a few weeks, and developed a mental block about method lookup.</p>

<p>In Chapter 6 (Acquiring behaviour through inheritance), she describes how to extract a superclass from a group of related classes that share some behaviour by pulling methods up the inheritance chain instead of driving specializations down. This approach ensures a clean abstraction, leaving no specialized behaviour in the superclass. Where I got stuck was in the call chain that enforces the common interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="n">baz</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">baz</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">NotImplementedError</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;You can&#39;t call #baz here!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="o">&lt;</span> <span class="no">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">baz</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hello, baz&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="no">Bar</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="s2">&quot;Hello, baz&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Bar:0x007fc4f903ab90&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I could not understand why, the <code>NotImplementedError</code> wasn&rsquo;t raised when a new <code>Bar</code> was created. This is how I imagined the call stack should work:</p>

<ol>
<li><code>Bar.new</code> calls <code>Bar#initialize</code></li>
<li><code>Bar</code> calls <code>super</code> (<code>Foo#initialize</code>)</li>
<li><code>Foo</code> calls <code>baz</code> (<code>Foo#baz</code>)</li>
<li>raises <code>NotImplementedError</code></li>
</ol>


<p>This is how the call stack actually works</p>

<ol>
<li><code>x = Bar.new</code> calls <code>Bar#initialize</code></li>
<li><code>x</code> receives a call to <code>super</code> (<code>Foo#initalize</code>)</li>
<li><code>x</code> receives a call to <code>baz</code> (<code>Bar#baz</code>)</li>
<li>says &ldquo;Hello, baz&rdquo;</li>
</ol>


<p>The call never comes from the context of <code>Foo</code> &mdash; the receiver is always <code>x</code>, the instance of <code>Bar</code>. Classical inheritance dictates that an object can only look to itself or further up the inheritance chain for valid method definitions, not down. <code>x</code> is reaching up to call <code>super</code> but checks itself for an answer to the question <code>#baz</code>. <code>Foo#baz</code> would only ever be called if we made a new <code>Foo</code> directly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="ss">NotImplementedError</span><span class="p">:</span> <span class="no">You</span> <span class="n">can</span><span class="s1">&#39;t call #baz here!</span>
</span><span class='line'><span class="s1">        from (irb):7:in `baz&#39;</span>
</span><span class='line'>        <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">3</span><span class="ss">:in</span> <span class="sb">`initialize&#39;</span>
</span><span class='line'><span class="sb">        from (irb):27:in `</span><span class="kp">new</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">        from (irb):27</span>
</span><span class='line'><span class="s1">        from /usr/local/var/rbenv/versions/2.1.5/bin/irb:11:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How ruby resolves a message (classical inheritance)</h3>

<p>The search for a method begins in the class of the receiving object &mdash; in the example above, Bar is always the receiving object. If the class does not implement the message, the search proceeds up the superclass chain. If none of the superclasses contain the method definition, ruby makes a second attempt to resolve the message by sending <code>method_missing(:method_name)</code> to the original object. The search restarts from the bottom, but this time for a <code>method_missing</code> handler rather than <code>:method_name</code>.</p>

<p>Occasionally refreshing the ruby basics is super-rewarding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compilers -- an Intro]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/compilers-an-intro/"/>
    <updated>2014-11-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/compilers-an-intro</id>
    <content type="html"><![CDATA[<p>Last year, I was wrapping up a stint at code school, and I picked up the challenge of <a href="http://katieleonard.ca/blog/2013/canadian-flair/">building a programming language</a>. It was a very large stretch-goal, and I didn&rsquo;t complete the project, but I learned a lot about how languages are designed and built. Recently, my mentor highlighted a <a href="http://online.stanford.edu/course/compilers-0">Compilers course offered through Stanford Online</a>, and suggested that it may be time to level-up my understanding of languages once again. Since I did not reach the compiler phase for <code>eh?</code>, perhaps this is an opportunity to do so.</p>

<h3>Review of compilers</h3>

<p>A compiler is different from an interpreter. An interpreter takes both the data and the program and produces output. A compiler takes only the program and produces an executable. Fun fact: I learned just recently that javascript is actually a &ldquo;compiled&rdquo; language &mdash; the javascript engine uses just-in-time compilation as it is executed.</p>

<p>The grandfather of all compiled languages was FORTRAN, which was developed to translate formulas into a machine-readable language. Like many software projects, the initial completion date was wildly optimistic &mdash; it took 7 years longer than their original estimate &mdash; but they developed a 5-stage pattern of processing that all later compilers would follow.</p>

<h3>1. Lexical analysis</h3>

<p>This first step is about word and symbol recognition: breaking a stream of characters into recognizable chunks. For example a method definition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Ruby
</span><span class='line'>def my_method; end
</span><span class='line'>
</span><span class='line'>// Java
</span><span class='line'>public static void main() { }
</span><span class='line'>
</span><span class='line'># eh
</span><span class='line'>can curl; eh?</span></code></pre></td></tr></table></div></figure>


<p>Recognizing white space, punctuation, and words is the first step in translating characters into actions that can be performed. The words that are recognized are usually converted into &ldquo;tokens&rdquo;, for passing in to the next stage of processing, which is why this step is occasionally called Tokenizing.</p>

<h3>2. Parsing</h3>

<p>After the character stream has been tokenized, doing pattern recognition on the sequence of tokens is called parsing. Returning briefly to the example of a method definition, <code>def my_method; end</code>, the lexer would recognize <code>def</code> as a key word and <code>my_method</code> as a variable, but they are grouped together by the parser as the beginning of a method block.</p>

<h3>3. Semantic analysis</h3>

<p>Compilers can only do a very limited amount of semantic analysis, usually limited to catching inconsistencies (such as redeclaring a variable) and ambiguities (such as type mismatches). &ldquo;A panda bear walks into a bar and eats, shoots and leaves&rdquo;, can be tokenized into component parts (verbs, nouns, articles), as well as into phrases (subject, predicate), but determining the exact meaning of the predicate requires deeper understanding of the subject. Machines do not perform well with ambiguous grammar, and developing an unambiguous language syntax is a difficult task.</p>

<h3>4. Optimization</h3>

<p>Optimization is where most modern language compilers spend the majority of their resources, modifying programs so that they reduce the demand for resources like memory allocation, or garbage collection. For example, the java compiler will &ldquo;unroll&rdquo; all the for loops so that they run more efficiently. Another strategy is <a href="http://en.wikipedia.org/wiki/Optimizing_compiler">peephole</a> optimization, where the compiler checks out adjacent code to see if any assignments could be reduced or replaced by simple math.</p>

<p><code>x = y * 2</code> might be reduced to <code>x = y + y</code>.</p>

<p><code>z = 0; x = y * z</code> might be reduced to <code>x = 0</code>, but there is a gotcha hidden there &mdash; <code>y * 0 = 0</code> is only true for integers. It results in <code>NaN</code> for floating point numbers.</p>

<h3>5. Code generation</h3>

<p>Code generation is the final translation of the program into an executable. The written language has been cut into tokens and parsed into phrases. It has been examined for ambiguities and inconsistencies, and optimized wherever possible. The instructions for the program are arranged neatly and must now be evaluated and scheduled. The final product is an executable program that can be run against any data of interest.</p>

<p>This 5 stage pattern is followed by almost all compilers. Where they vary is in their proportions. FORTRAN spent a balanced amount of time in each of the 5 phases, while modern compilers have a much longer optimization phase than lexing or parsing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor-managed Ids Won't Play Nicely With Others]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/make-meteor-minimongo-ids-play-nice/"/>
    <updated>2014-10-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/make-meteor-minimongo-ids-play-nice</id>
    <content type="html"><![CDATA[<p>I am working with a data dump from a meteor project, and while retrieving and displaying the existing collection was no problem at all, I was stuck on saving new documents to mongo.</p>

<p>My schema was pretty straightforward and taken directly from an existing document:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var postSchema = mongoose.Schema({
</span><span class='line'>  "title" : String,
</span><span class='line'>  "company" : String,
</span><span class='line'>  "author" : String,
</span><span class='line'>  "music" : String,
</span><span class='line'>  "choreographer" : String,
</span><span class='line'>  "showDate" : String,
</span><span class='line'>  "image": String,
</span><span class='line'>  "userId" : String,
</span><span class='line'>  "postAuthor" : String,
</span><span class='line'>  "submitted" : Number,
</span><span class='line'>  "commentsCount" : Number,
</span><span class='line'>  "_id":  String
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>The problem was that last field: <code>_id</code>. If I included it in the schema then I would have the objectId available on the front end but would get an error trying to insert a new document: <code>[Error: document must have an _id before saving]</code>. If I removed <code>_id</code> from the schema I could save documents just fine but could not pass through the objectIds of already existing documents. I have learned that mongo is very flexible when it comes to assigning ids before insertion into the database.</p>

<p>Mongo objects created through a meteor application are given meteor-friendly objectIds, the uniqueness of which is monitored and maintained by a meteor wrapper class. The design decision to go with ids as strings seems to be <a href="https://groups.google.com/forum/#!topic/meteor-talk/f-ljBdZOwPk">motivated by meteor&rsquo;s latency compensation feature</a> &mdash; creating documents on the client-side and then later syncing them with the server requires that they are assigned objectIds before they ever reach mongo. Mongo will accept a manually entered id, trusting that there is an entity somewhere that is managing uniqueness.</p>

<p>Here was my problem: the documents created by meteor had String ids assigned by meteor. If I included <code>_id</code> in my schema, mongo would assume that I was managing id assignment manually, and wouldn&rsquo;t save the object until I did. If I did not include <code>_id</code> in my schema, mongo would assume it was responsible, and would assign a unique id accordingly.</p>

<p>To make the documents created by meteor play nice with the new stack, I had to update each document&rsquo;s <code>_id</code> with one created by mongo. Unfortunately, mongo won&rsquo;t allow modification of <code>_id</code> directly, so the only choice was to recreate and insert each entry, then delete the original:</p>

<ol>
<li>Retrieve a document: <code>doc = db.posts.findOne()</code></li>
<li>Save the title: <code>title = doc.title</code></li>
<li>Save the document&rsquo;s string id: <code>id = doc._id</code></li>
<li>Reassign the document id: <code>doc._id = ObjectId()</code></li>
<li>Save the updated document: <code>db.posts.insert(doc)</code></li>
<li>Remove the original document: <code>db.posts.remove({_id: id})</code></li>
<li>Verify that the post exists with the new id: <code>db.posts.findOne({"title": title})</code></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; doc = db.posts.findOne()
</span><span class='line'>{
</span><span class='line'>  "title" : "La Cage aux Folles",
</span><span class='line'>  "company" : "Pixie Dust Productions",
</span><span class='line'>  "author" : "Harvey Fierstein",
</span><span class='line'>  "music" : "Jerry Herman",
</span><span class='line'>  "showDate" : ISODate("2014-09-21T07:00:00Z"),
</span><span class='line'>  "dateSubmitted" : 1411346259065,
</span><span class='line'>  "_id" : "EjzopWQa3mw5LB979"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>&gt; title = doc.title
</span><span class='line'>La Cage aux Folles
</span><span class='line'>
</span><span class='line'>&gt; id = doc._id
</span><span class='line'>EjzopWQa3mw5LB979
</span><span class='line'>
</span><span class='line'>&gt; doc._id = ObjectId()
</span><span class='line'>ObjectId("5442af27cc37fe6f03648fdd")
</span><span class='line'>
</span><span class='line'>&gt; db.posts.insert(doc)
</span><span class='line'>
</span><span class='line'>&gt; db.posts.remove({_id: id})
</span><span class='line'>
</span><span class='line'>&gt; db.posts.findOne({"title": title})
</span><span class='line'>{
</span><span class='line'>  "_id" : ObjectId("5442af27cc37fe6f03648fdd"),
</span><span class='line'>  "title" : "La Cage aux Folles",
</span><span class='line'>  "company" : "Pixie Dust Productions",
</span><span class='line'>  "author" : "Harvey Fierstein",
</span><span class='line'>  "music" : "Jerry Herman",
</span><span class='line'>  "showDate" : ISODate("2014-09-21T07:00:00Z"),
</span><span class='line'>  "dateSubmitted" : 1411346259065,
</span><span class='line'>  "commentsCount" : 1
</span><span class='line'>}
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Here is a handy script for changing the entire collection at once:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.posts.find().forEach(function(doc){ var doc = db.posts.findOne(); var title = doc.title; var id = doc._id; doc._id = ObjectId(); db.posts.insert(doc); db.posts.remove({_id: id}); })</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort All the Things With Mongo and node.js]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/sort_things_with_mongoose/"/>
    <updated>2014-10-09T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/sort_things_with_mongoose</id>
    <content type="html"><![CDATA[<p>Sorting shouldn&rsquo;t be difficult, but through my experience learning meteor I discovered that if mongo likes sort commands one way:</p>

<p><code>db.posts.find().sort({submitted: -1})</code></p>

<p>meteor would like them a different way:</p>

<p><code>Posts.find({}, {sort: {submitted : -1}}</code></p>

<p>I am adapting one of my meteor projects to use mongo and node.js, connected through mongoose, and fitting in the callback required for node sent me to the google. After a few stackoverflow searches I turned up a several options:</p>

<figure class='code'><figcaption><span>Option 1 (spoiler.. it didn&#8217;t work) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post.find({}, {sort:[['submitted',-1]]}, function(err, doc) {
</span><span class='line'>  response.send(doc);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>This option returned a object containing only the entry ids, not the full documents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0: {_id:2tcte4Srd8QMSqrKt}
</span><span class='line'>1: {_id:5c3FdWphiYiMQzukw}
</span><span class='line'>2: {_id:62vAt5ewucKm542DH}
</span><span class='line'>3: {_id:AWNYsxBgFnv9Z4NSA}
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Another option suggested that converting the result to an Array would complete the query:</p>

<figure class='code'><figcaption><span>Option2 (spoiler.. also didn&#8217;t work) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post.find({},{sort: [['submitted',-1]]}).toArray(function(e, results){
</span><span class='line'>  response.send(results);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>This option resulted in <code>TypeError: Object #&lt;Query&gt; has no method 'toArray'</code>.</p>

<p>Rather than continuing to search for a snippet to steal, I turned to the source, and it turns out that querying mongo from mongoose is simpler than either of these strategies.</p>

<figure class='code'><figcaption><span>Option3 &#8211; just right </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post.find()
</span><span class='line'>  .sort("-submitted")
</span><span class='line'>  .exec(function(err, doc) {
</span><span class='line'>    response.send(doc);
</span><span class='line'>  });</span></code></pre></td></tr></table></div></figure>


<p>Success! Why? Because while mongo itself returns a cursor object which can be transformed into documents using <code>toArray()</code>, or <code>fetch()</code> in the case of meteor, mongoose returns a <a href="http://mongoosejs.com/docs/queries.html">Query</a> object, which will return the full documents once it is passed a callback.</p>

<p>A Query object can be built using <a href="https://github.com/LearnBoost/mongoose/blob/master/lib/query.js#L211-L216">method chaining</a> &mdash;
 each method (find | where | limit | select | sort) returns a new Query object, which allows you to build in stages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post
</span><span class='line'>.find({ title: /the/ }) // query
</span><span class='line'>.where('cost').gt(17).lt(66)  // query
</span><span class='line'>.where('location').in(['Schnitz', 'Armory'])  // query
</span><span class='line'>.limit(10)  // query
</span><span class='line'>.sort('-ticketDate')  // query
</span><span class='line'>.select('title company')  // query
</span><span class='line'>.exec(callback);  // EXECUTE THE QUERY</span></code></pre></td></tr></table></div></figure>


<p>Another fun bit of javascript/mongoose magic, is that you can indicate <a href="https://github.com/LearnBoost/mongoose/blob/master/lib/query.js#L1295-L1297">sorting in descending order</a> by prefacing the sort string with a &ldquo;&ndash;&rdquo; :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post
</span><span class='line'>.find({ title: /the/ }) // query
</span><span class='line'>.sort('-ticketDate')  // DESC!
</span><span class='line'>.exec(callback);  // EXECUTE THE QUERY</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="http://docs.mongodb.org/manual/reference/operator/meta/orderby/">mongo docs</a></p>

<p><a href="http://stackoverflow.com/a/20859457">stackoverflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Giving the Cold Shoulder With Git]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/giving-the-cold-shoulder-with-git/"/>
    <updated>2014-09-08T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/giving-the-cold-shoulder-with-git</id>
    <content type="html"><![CDATA[<p>Some files become unnecessary to track using version control, but still belong in the repository. Compiled assets, for example may require a placeholder for a functional deploy, but don&rsquo;t need to be checked in every time a change is made.</p>

<p>Adding the file to your gitignore is not enough to stop tracking file changes. You must also clear the file from your git cache:</p>

<figure class='code'><figcaption><span>gitignore, this time with spite </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm --cached <span class="o">[</span>filename<span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;I really mean to ignore this file.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To untrack everything that has been added to the .gitignore:</p>

<figure class='code'><figcaption><span>For realz </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm -r --cached .
</span><span class='line'><span class="nv">$ </span>git commit -a -m <span class="s2">&quot;I mean it!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Resources</h3>

<p><a href="http://stackoverflow.com/a/1139797">Here&rsquo;s where I found this gem</a>,
 <a href="http://git-scm.com/docs/gitignore">and here are the docs where I verified it</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gaining Closure Through Modules]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/managing-modules/"/>
    <updated>2014-09-06T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/managing-modules</id>
    <content type="html"><![CDATA[<p>If you have more than one javascript running on a page, you have likely experienced the hell of trying to debug a problem caused by naming collisions. Developing the scripts in isolation, it makes sense to assign widgetA.name dynamically using jQuery, but then why does the title of widgetGraphB disappear? Avoid the pain of unintended consequences by namespacing your scripts. <!--more--></p>

<p>Closures occur when you pass functions to variables to call at a later date. The javascript engine does all the work of compiling the script and loading the contents into the memory stack, but until the function is called the stack just sits there, sealed like a time capsule.</p>

<figure class='code'><figcaption><span>Closure in the wild </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">timeCapsule</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">year</span> <span class="o">=</span> <span class="mi">1999</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">party</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;We&#39;re gonna party like it&#39;s &quot;</span> <span class="o">+</span> <span class="nx">year</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">party</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">year</span> <span class="o">=</span> <span class="mi">2099</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tonight</span> <span class="o">=</span> <span class="nx">timeCapsule</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">tonight</span><span class="p">();</span> <span class="c1">// We&#39;re gonna party like it&#39;s 1999</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>party()</code> function has a closure over <code>timeCapsule()</code>, which means all the variables and functions within timeCapsule remain unmolested by any assignments made outside of their scope.</p>

<h3>Modules use closure to encapsulate scope.</h3>

<p>Breaking your monolithic javascript into modules is a great way to separate concerns and create closures.</p>

<figure class='code'><figcaption><span>myModule.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">myModuleFunction</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* Do work1 */</span> <span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">mySecondModuleFuntion</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* Do work2 */</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">myModuleFunction</span> <span class="o">=</span> <span class="nx">myModuleFunction</span><span class="p">;</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">mySecondModuleFunction</span> <span class="o">=</span> <span class="nx">mySecondModuleFunction</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Using the module </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myModule</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;myModule&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">myModuleFunction</span><span class="p">();</span> <span class="c1">// performs work1</span>
</span><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">mySecondModuleFunction</span><span class="p">();</span> <span class="c1">// performs work2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using modules will prevent naming conflicts on functions and variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">module1</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;myModuleName&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myModuleFunction</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;All work and no play makes module1 a dull script;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module1</span><span class="p">.</span><span class="nx">myModuleFunction</span><span class="p">();</span> <span class="c1">// performs work1</span>
</span><span class='line'><span class="nx">myModuleFunction</span><span class="p">();</span> <span class="c1">// outputs snarky phrase</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voila &mdash; no conflicts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup Meteor? Yes We Can]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/backup-meteor-yes-we-can/"/>
    <updated>2014-08-24T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/backup-meteor-yes-we-can</id>
    <content type="html"><![CDATA[<p>Retrieving a data dump from your meteor production database and copying it to local development is a three-step, time sensitive process.</p>

<h3>1. Retrieve your production url</h3>

<p>Passing a <code>-url</code> flag to the <code>meteor mongo</code> command will return a long string of goodies:</p>

<figure class='code'><figcaption><span>Dude, where&#8217;s my data? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ meteor mongo --url my_app.meteor.com
</span><span class='line'>
</span><span class='line'>mongodb://client-12345678:9abcdef1-234-5678-9abc-def123456789@singularsensation-db-a3.meteor.io:12345/my_app_meteor_net</span></code></pre></td></tr></table></div></figure>


<p>This string contains all the information you require to access your production data:</p>

<ul>
<li>your client id (from // to :)</li>
<li>a server password (from : to @)</li>
<li>a server name and port number (from @ to /)</li>
<li>the datastore identification (from / to the end)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongodb://&lt;CLIENT_ID&gt;:&lt;PASSWORD_HASH&gt;@&lt;SERVER_NAME:PORT&gt;/&lt;YOUR_DATA_STORE&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Retrieving your data is time-sensitive because the password hash will expire after 60 seconds.</p>

<h3>2. Retrieve your data using mongodump</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mongodump -u CLIENT_ID -h SERVER_NAME:PORT -d YOUR_DATA_STORE -p PASSWORD_HASH
</span><span class='line'>
</span><span class='line'>connected to: &lt;SERVER_NAME:PORT&gt;
</span><span class='line'>Sun Aug 24 10:50:32.342 DATABASE: YOUR_DATA_STORE  to   dump/YOUR_DATA_STORE
</span><span class='line'>Sun Aug 24 10:50:32.989   YOUR_DATA_STORE.system.indexes to dump/YOUR_DATA_STORE/system.indexes.bson
</span><span class='line'>Sun Aug 24 10:50:34.368      14 objects
</span><span class='line'>Sun Aug 24 10:50:34.369   YOUR_DATA_STORE.system.users to dump/YOUR_DATA_STORE/system.users.bson
</span><span class='line'>Sun Aug 24 10:50:34.559      2 objects
</span><span class='line'>... and on and on
</span></code></pre></td></tr></table></div></figure>


<p>Mongodb copies your data from production into a new folder called &ldquo;dump&rdquo; in your present working directory.</p>

<h3>3. Use mongorestore to copy the data from the dump into your local datastore</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongorestore --host 127.0.0.1 --port 3001 --db meteor --drop dump/YOUR_DATA_STORE/
</span><span class='line'>
</span><span class='line'>connected to: 127.0.0.1:3001
</span><span class='line'>Sun Aug 24 11:36:54.693 dump/YOUR_DATA_STORE/users.bson
</span><span class='line'>Sun Aug 24 11:36:54.693   going into namespace [meteor.users]
</span><span class='line'>Sun Aug 24 11:36:54.693    dropping
</span><span class='line'>2 objects found
</span><span class='line'>Sun Aug 24 11:36:55.834   Creating index: { name: "_id_", key: { _id: 1 }, ns: "meteor.users" }
</span><span class='line'>Sun Aug 24 11:36:55.993   Creating index: { name: "username_1", key: { username: 1 }, unique: true, ns: "meteor.users", sparse: 1 }
</span><span class='line'>... and on and on</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>

<p>Resources:
<a href="http://stackoverflow.com/a/12447710">stackoverflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Formatting Numbers the Easy Way]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/formatting-numbers-the-easy-way/"/>
    <updated>2014-08-23T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/formatting-numbers-the-easy-way</id>
    <content type="html"><![CDATA[<p>D3 has an awesome number formatting function that I discovered only after hacking my own. My first approach was to use string and array manipulation to convert 1234567890 to 1,234,567,890:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">numberSmoothing</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// split the number into a character array and reverse it</span>
</span><span class='line'>  <span class="nx">reversedNumber</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// [&quot;0&quot;, &quot;9&quot;, &quot;8&quot;, &quot;7&quot;, &quot;6&quot;, &quot;5&quot;, &quot;4&quot;, &quot;3&quot;, &quot;2&quot;, &quot;1&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// push the numbers onto another array in groups of 3 and add a comma</span>
</span><span class='line'>  <span class="nx">chunkedNumber</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="nx">reversedNumber</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">numberChunk</span> <span class="o">=</span> <span class="nx">reversedNumber</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">chunkedNumber</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">reversedNumber</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;,&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">reversedNumber</span> <span class="o">=</span> <span class="nx">numberChunk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// push the remaining digits onto the array</span>
</span><span class='line'>  <span class="nx">chunkedNumber</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">reversedNumber</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// [&quot;098,&quot;, &quot;765,&quot;, &quot;432,&quot;, &quot;1&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// reverse each of the strings in the array and rejoin them</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">chunkedNumber</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">chunkedNumber</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">chunkedNumber</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// [&quot;,890&quot;, &quot;,567&quot;, &quot;,234&quot;, &quot;1&quot;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">chunkedNumber</span><span class="p">.</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">numberSmoothing</span><span class="p">(</span><span class="mi">1234567890</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;1,234,567,890&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>While it was a fun mental exercise to implement number formatting, I stumbled across this handy d3 function after I was already done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">format</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">format</span><span class="p">(</span><span class="mi">1234567890</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;1,234,567,890&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As it turns out, any way one might want to format a number has <a href="https://github.com/mbostock/d3/wiki/Formatting#d3_format">already been implemented in d3</a>. It is similar to the mini-formatting language from python:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[​[fill]align][sign][symbol][0][width][,][.precision][type]</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// add commas for the thousands separator</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">format</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">format</span><span class="p">(</span><span class="mi">1234567890</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;1,234,567,890&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// add a sign for positive and negative numbers</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">format</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;+,&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">format</span><span class="p">(</span><span class="mi">1234567890</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;+1,234,567,890&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">format</span><span class="p">(</span><span class="o">-</span><span class="mi">1234567890</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;-1,234,567,890&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// add a currency sign</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">format</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;+$,&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">format</span><span class="p">(</span><span class="mi">1234567890</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;+$1,234,567,890&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// as a percentage</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">format</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">format</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;16.666666666666664%&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// as a rounded percentage</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">format</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;%&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">format</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;17%&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// as a percent rounded to a single sig fig</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">format</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;.1%&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">format</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;16.7%&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// as a rounded value</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">format</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;.2r&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">format</span><span class="p">(</span><span class="mf">123.456</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;120&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="nx">format</span><span class="p">(</span><span class="mf">123456789.66</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;120000000&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// as a rounded, comma separated value</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">format</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;,.2r&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">format</span><span class="p">(</span><span class="mf">123456789.66</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;120,000,000&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Getters and Setters]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/javascript-getters-and-setters/"/>
    <updated>2014-08-09T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/javascript-getters-and-setters</id>
    <content type="html"><![CDATA[<p>Getters and setters make sense in java, and I just learned that there is an equivalent pattern in javascript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">favouriteBook</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_title</span><span class="o">:</span> <span class="s2">&quot;Catch-22&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">get</span> <span class="nx">title</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Getting title&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_title</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">set</span> <span class="nx">title</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_title</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Setting title&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_title</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">favouriteBook</span><span class="p">.</span><span class="nx">title</span>
</span><span class='line'> <span class="nx">Getting</span> <span class="nx">title</span> <span class="nx">Catch</span><span class="o">-</span><span class="mi">22</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">favouriteBook</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="s2">&quot;Slaughterhouse 5&quot;</span>
</span><span class='line'> <span class="nx">Setting</span> <span class="nx">title</span> <span class="nx">Slaughterhouse</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">favouriteBook</span><span class="p">.</span><span class="nx">title</span>
</span><span class='line'> <span class="nx">Getting</span> <span class="nx">title</span> <span class="nx">Slaughterhouse</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>get</code> and <code>set</code> key words are reserved for accessing or mutating a data property (instance variable). Of course, one can get and set data properties directly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">favouriteBook</span><span class="p">.</span><span class="nx">title</span>
</span><span class='line'><span class="s2">&quot;Catch-22&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">favouriteBook</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="s2">&quot;Slaughterhouse 5&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">favouriteBook</span><span class="p">.</span><span class="nx">title</span>
</span><span class='line'><span class="s2">&quot;Slaughterhouse 5&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The advantage of using a getter and setter is that if a setter is defined without a getter, one can change the value of the data property, but can never read it. If a getter is defined without a setter, then the variable can be read but not be changed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">favouriteBook</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_title</span><span class="o">:</span> <span class="s2">&quot;Catch-22&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">get</span> <span class="nx">title</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Getting title&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_title</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">favouriteBook</span><span class="p">.</span><span class="nx">title</span>
</span><span class='line'><span class="nx">Getting</span> <span class="nx">title</span> <span class="nx">Catch</span><span class="o">-</span><span class="mi">22</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">favouriteBook</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="s2">&quot;Slaughterhouse 5&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">favouriteBook</span><span class="p">.</span><span class="nx">title</span>
</span><span class='line'><span class="nx">Getting</span> <span class="nx">title</span> <span class="nx">Catch</span><span class="o">-</span><span class="mi">22</span>
</span></code></pre></td></tr></table></div></figure>


<p>The setter function will fail silently, which makes troubleshooting difficult but ensures that the property remains undisturbed.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/Principles-Object-Oriented-JavaScript-Nicholas-Zakas/dp/1593275404/ref=sr_1_1?ie=UTF8&amp;qid=1407339036&amp;sr=8-1&amp;keywords=principles+of+object+oriented+javascript">The principles of object-oriented javascript</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Constructors and Prototypes]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/constructors-and-prototypes/"/>
    <updated>2014-08-07T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/constructors-and-prototypes</id>
    <content type="html"><![CDATA[<p>Object-oriented programming (OOP) can be thought of as describing the properties and behaviour of a noun in a blueprint, which is used to create instances of an object. The blueprint is defined as a Constructor &mdash; a function that identifies a class of objects and begins with a capital letter. New objects are created by calling a Constructor with the keyword <code>new</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="kd">function</span> <span class="nx">Book</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">author</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">title</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">author</span> <span class="o">=</span> <span class="nx">author</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">listing</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([</span><span class="k">this</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="s2">&quot;by&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">author</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">book1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="s2">&quot;Catch-22&quot;</span><span class="p">,</span> <span class="s2">&quot;Joseph Heller&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">book1</span><span class="p">.</span><span class="nx">title</span>
</span><span class='line'><span class="s2">&quot;Catch-22&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">book1</span><span class="p">.</span><span class="nx">author</span>
</span><span class='line'><span class="s2">&quot;Joseph Heller&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">book1</span><span class="p">.</span><span class="nx">listing</span><span class="p">()</span>
</span><span class='line'><span class="nx">Catch</span><span class="o">-</span><span class="mi">22</span> <span class="nx">by</span> <span class="nx">Joseph</span> <span class="nx">Heller</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Book constructor specifies two properties, <code>title</code> and <code>author</code>, and one method, <code>listing</code>. Defining a method in a constructor ensures that all instances of the Object have the same method, but it also results in duplication of the method in the memory stack for every instance of the Object. If I made 1000 instances of Book, there would be 1000 instances of the listing method, even though it is only defined once, and is the same for every object.</p>

<h4>Memory stack of objects with instance methods:</h4>

<p><img src="http://www.katieleonard.ca/images/post_constructor_memory_stack.png"></p>


<p>Enter Prototypes.</p>

<p>A Prototype is a property that is shared by all instances of an object. When the constructor for an object is called for the first time, all the object&rsquo;s properties are loaded onto the memory stack as well as the object&rsquo;s Prototype. All subsequent instances of that object include a pointer to the same Prototype, and they pass in a pointer to themselves as <code>this</code> whenever they call a method from the Prototype.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Book</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">author</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">title</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">author</span> <span class="o">=</span> <span class="nx">author</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Book</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">listing</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([</span><span class="k">this</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="s2">&quot;by&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">author</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">book1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="s2">&quot;Catch-22&quot;</span><span class="p">,</span> <span class="s2">&quot;Joseph Heller&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">book2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="s2">&quot;Slaughterhouse 5&quot;</span><span class="p">,</span> <span class="s2">&quot;Kurt Vonnegut&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">book1</span><span class="p">.</span><span class="nx">listing</span><span class="p">()</span>
</span><span class='line'><span class="nx">Catch</span><span class="o">-</span><span class="mi">22</span> <span class="nx">by</span> <span class="nx">Joseph</span> <span class="nx">Heller</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">book2</span><span class="p">.</span><span class="nx">listing</span><span class="p">()</span>
</span><span class='line'><span class="nx">Slaughterhouse</span> <span class="mi">5</span> <span class="nx">by</span> <span class="nx">Kurt</span> <span class="nx">Vonnegut</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">book1</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;listing&quot;</span><span class="p">)</span>
</span><span class='line'><span class="kc">false</span>
</span><span class='line'><span class="o">&gt;</span> <span class="s1">&#39;listing&#39;</span> <span class="k">in</span> <span class="nx">book1</span>
</span><span class='line'><span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Memory stack of object with prototypes:</h4>

<p><img src="http://www.katieleonard.ca/images/post_prototype_memory_stack.png"></p>


<p>Reduced memory consumption is one advantage of keeping a reference to a prototype instead of a complete copy. Another advantage is that if additions are made to the Prototype, the changes will be extended to all instances.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['In' Operator Avoids False Falsies]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/in-operator-avoid-false-falsies/"/>
    <updated>2014-08-05T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/in-operator-avoid-false-falsies</id>
    <content type="html"><![CDATA[<p>I have encountered more than my share of javascript errors because I have made assumptions about the object I am working with, such as assuming that an object contains a property, and that I can call methods on that property:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">myObject</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Cannot</span> <span class="nx">read</span> <span class="nx">property</span> <span class="s1">&#39;0&#39;</span> <span class="nx">of</span> <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>This line contains four assumptions, and therefore four places it can fail:</p>

<ol>
<li><code>myObject</code> exists</li>
<li><code>myObject</code> contains a property called <code>data</code></li>
<li><code>data</code> is an array</li>
<li><code>data</code> is non-empty</li>
</ol>


<p>Presuming that if <code>myObject</code> does not exist means you have bigger problems, it is easy to fall into the trap of checking for the existence of a property by gating a conditional with it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">myObject</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//do something important with the data</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This technique will work in development, but the voice of experience tells us that it will not work in production. The reason it will not work is that javascript has more falsy values than most languages. Falsy values include the number zero, empty strings, null, undefined, NaN, and of course, the boolean false. So, if it is possible <code>myObject.data</code> to contain derived information, you have signed up to troubleshoot some unexpected behaviour.</p>

<p>Fortunately, javascript has provided a failsafe way to check the existence of a property, regardless of the data it contains. The <code>in</code> operator checks if the key exists in the object&rsquo;s hash table, and doesn&rsquo;t care if it is a prototype or singleton property.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="kc">undefined</span>
</span><span class='line'><span class="o">&gt;</span> <span class="s1">&#39;data&#39;</span> <span class="k">in</span> <span class="nx">myObject</span>
</span><span class='line'><span class="kc">false</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">myObject</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="s1">&#39;data&#39;</span> <span class="k">in</span> <span class="nx">myObject</span>
</span><span class='line'><span class="kc">true</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">myObject</span><span class="p">.</span><span class="nx">data</span> <span class="o">==</span> <span class="kc">true</span>
</span><span class='line'><span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>('data' in myObject)</code> returns false if the property is undefined. If the property is defined, it returns true even if data contains a falsy value.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/Principles-Object-Oriented-JavaScript-Nicholas-Zakas/dp/1593275404/ref=sr_1_1?ie=UTF8&amp;qid=1407339036&amp;sr=8-1&amp;keywords=principles+of+object+oriented+javascript">The principles of object-oriented javascript</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stringify Cyclic Structures With Censors]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/stringify-cyclic-structures-with-censors/"/>
    <updated>2014-07-23T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/stringify-cyclic-structures-with-censors</id>
    <content type="html"><![CDATA[<p>Troubleshooting a d3 data visualization sometimes requires visual inspection of the underlying JSON data structure. You can convert linear data structures to a JSON string using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"><code>JSON.stringify</code></a><!--more-->:</p>

<figure class='code'><figcaption><span>JSON.stringify</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;{}&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span> <span class="s2">&quot;3&quot;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;{&quot;</span><span class="nx">y</span><span class="s2">&quot;:[&quot;</span><span class="mi">1</span><span class="s2">&quot;,&quot;</span><span class="mi">2</span><span class="s2">&quot;,&quot;</span><span class="mi">3</span><span class="s2">&quot;]}&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">z</span> <span class="o">=</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="p">]}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;{&quot;</span><span class="nx">y</span><span class="s2">&quot;:[&quot;</span><span class="mi">1</span><span class="s2">&quot;,&quot;</span><span class="mi">2</span><span class="s2">&quot;,&quot;</span><span class="mi">3</span><span class="s2">&quot;],&quot;</span><span class="nx">z</span><span class="s2">&quot;:{&quot;</span><span class="nx">a</span><span class="s2">&quot;:[&quot;</span><span class="nx">b</span><span class="s2">&quot;,&quot;</span><span class="nx">c</span><span class="s2">&quot;]}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Data structures that contain both upstream and downstream links between objects are cyclic structures. From the docs:</p>

<blockquote><p>JSON does not support cyclic structures.  Attempting to convert such an object into JSON format will result in a TypeError exception.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="nx">y</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="nx">x</span><span class="p">.</span><span class="nx">children</span> <span class="o">=</span> <span class="p">[</span><span class="nx">y</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">y</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="nx">x</span>
</span><span class='line'><span class="nb">Object</span> <span class="p">{</span><span class="nx">children</span><span class="o">:</span> <span class="p">[</span><span class="nb">Object</span><span class="p">]}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Converting</span> <span class="nx">circular</span> <span class="nx">structure</span> <span class="nx">to</span> <span class="nx">JSON</span>
</span></code></pre></td></tr></table></div></figure>


<p>How can I look at a tree, or double-linked list data structure that is rife with circular links? JSON.stringify() takes a second argument called a censor in the docs. The censor is the programmatic court of appeal for whenever a cyclic structure is encountered:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">censor</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s2">&quot;object&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, this approach will eliminate most of the tree structure by removing all objects from the JSON. Certainly we can return something more creative than <code>undefined</code>&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">censor</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s2">&quot;object&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">value</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this censor, we replace the parent object with the parent&rsquo;s name, and JSON.stringify has no complaints:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="kd">function</span> <span class="nx">censor</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s2">&quot;object&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">value</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Theodore&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">Object</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Theodore&quot;</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">y</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Alvin&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">Object</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Alvin&quot;</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">children</span> <span class="o">=</span> <span class="p">[</span><span class="nx">y</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="nb">Object</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">y</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="nx">x</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">Object</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Theodore&quot;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span> <span class="nb">Array</span><span class="p">[</span><span class="mi">1</span><span class="p">]}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="nx">TypeError</span><span class="o">:</span> <span class="nx">Converting</span> <span class="nx">circular</span> <span class="nx">structure</span> <span class="nx">to</span> <span class="nx">JSON</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">censor</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;{&quot;</span><span class="nx">name</span><span class="s2">&quot;:&quot;</span><span class="nx">Theodore</span><span class="s2">&quot;,&quot;</span><span class="nx">children</span><span class="s2">&quot;:[{&quot;</span><span class="nx">name</span><span class="s2">&quot;:&quot;</span><span class="nx">Alvin</span><span class="s2">&quot;,&quot;</span><span class="nx">parent</span><span class="s2">&quot;:&quot;</span><span class="nx">Theodore</span><span class="s2">&quot;}]}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
</feed>
