<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[keighty]]></title>
  <link href="http://www.katieleonard.ca/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2014-06-16T08:25:54-07:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery-UI and Meteor]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/jquery-ui-and-meteor/"/>
    <updated>2014-06-16T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/jquery-ui-and-meteor</id>
    <content type="html"><![CDATA[<p>I have been working on <a href="virtualplaybill.net">Virtual Playbill</a> for the last few weeks using meteor, bootstrap, and a number of other UI packages. I wanted to use a datepicker as a form field, but getting jQuery-ui working was not a straightforward package download as many other features are. There are currently 5 packages available for installation on <a href="https://atmospherejs.com/package/jquery-ui?q=jquery-ui">Atmosphere</a> (the meteor package manager), and I attempted several of them before finding the combination that worked<!--more-->:</p>

<h3>1. Install the jQuery-ui package from <a href="https://atmospherejs.com/package/jquery-ui">Atmosphere</a></h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mrt add jquery-ui</span></code></pre></td></tr></table></div></figure>


<h3>2. Download jQuery-ui</h3>

<p>For me, the meteorite package did not properly install the css or images I needed to get the datepicker working, so I downloaded <a href="http://jqueryui.com/">jquery-ui</a>, swiped the css file (un-minified), and added it to my <code>client/stylesheets</code> folder.</p>

<h3>3. Add jQuery-ui images</h3>

<p>The css styled the datepicker calendar perfectly, except for the previous month and next month buttons. jQuery-ui comes with a few standard icons, so I placed the jQuery-ui images folder in <code>/public</code>, since static files must be kept in a public folder for meteor to acknowledge them.</p>

<h3>4. Relocate the images</h3>

<p>The jQuery-ui css file tries to locate the images in its parent folder, but as I mentioned, static assets = public folder. The advantage of the public folder is that all assets can be referenced with a leading slash: <code>/images</code>. I scanned the un-minified version of the css and changed the image url locations from <code>images/...</code> to <code>/images/...</code></p>

<p>Voila! A beautiful, functional datepicker!</p>

<p><img src="http://www.katieleonard.ca/images/post_datepicker.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helpers Calling Helpers]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/helpers-calling-helpers/"/>
    <updated>2014-06-03T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/helpers-calling-helpers</id>
    <content type="html"><![CDATA[<p>Whittling away at the Discover Meteor tutorial for creating a social news sharing site, I was implementing a Comments collection and related accoutrements (templates, helpers, forms, etc.) when I uncovered a need to call one helper method from another<!--more-->.</p>

<p>I was using this handy method to return the number of comments made on a particular post:</p>

<figure class='code'><figcaption><span>Helpful helpers </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">commentsCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Template helper magic sauce </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">submitted</span> <span class="nx">by</span> <span class="p">{{</span><span class="nx">postAuthor</span><span class="p">}},</span> <span class="kd">with</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;{{pathFor &#39;postPage&#39;}}&quot;</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">commentsCount</span><span class="p">}}</span> <span class="nx">comments</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which returned a very ordinary:</p>

<blockquote><p>submitted by meImAnAwesomeUser, with 1 comments</p></blockquote>

<p>1 <strong>comments</strong>?! That makes no sense.. I didn&rsquo;t minor in English so I could let that travesty fly. I made a new helper method:</p>

<figure class='code'><figcaption><span>This WORKS! </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">commentsCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">commentsNote</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">()</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="s2">&quot;comment&quot;</span> <span class="o">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>UGH! What is that on line 6? Possibly the ugliest ternary statement I have written today (probably). Is that code duplication I smell? Won&rsquo;t reusing <code>commentsCount</code> remove the redundancy?</p>

<figure class='code'><figcaption><span>Starting to DRY the meteor </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">commentsCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">commentsNote</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">commentsCount</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="s2">&quot;comment&quot;</span> <span class="o">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Only.. that doesn&rsquo;t work:</p>

<pre><code>Exception from Deps recompute function: ReferenceError: commentsCount is not defined
at Object.Template.postPageItem.helpers.commentsNote (http://localhost:3000/client/views/posts/post_page_item.js?160ec9a926881c795377a47c15affc4f553c4d88:9:12)
</code></pre>

<p>But it is RIGHT ABOVE! I can see it! It is in the same file! I tried all permutations of <code>commentsCount()</code>, <code>this.commentsCount</code>, <code>self.commentsCount</code>, <code>this.self.commentsCount()</code>, and they all threw either similar errors or <code>undefined</code>. Calling the prototype method directly turns out to work just fine:</p>

<figure class='code'><figcaption><span>THIS is not THAT and also doesn&#8217;t work </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">commentsCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">commentsNote</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">commentsCount</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">count</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="s2">&quot;comment&quot;</span> <span class="o">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Except that when <code>commentsCount</code> is called on line 6, <code>this</code> is no longer the lovely Post item provided by the template. No, <code>this</code> becomes the context of the <code>commentsNote</code> function, and therefore calling <code>this._id</code> will return <code>undefined</code>. The closure issue can be worked around with a little argument passing:</p>

<figure class='code'><figcaption><span>Is DRY so much better? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">commentsCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">count_id</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">id</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">?</span> <span class="nx">id</span> <span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="nx">count_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">commentsNote</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">commentsCount</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">count</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="s2">&quot;comment&quot;</span> <span class="o">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow. Passing in the id works, but now I have to check the context to determine the appropriate id. That is the most unreadable-but-reused code I have written today (probably), and I learned some valuable lessons on this frantic search for DRY:</p>

<ul>
<li><code>self</code>, whether called from a helper or the console, will always be <code>window</code></li>
<li><code>this</code> called from a Template helper refers to the item of the collection that is passed in to the template</li>
<li>because helper methods are closures, <code>this</code> in the calling method is different from <code>this</code> in the called method</li>
<li>don&rsquo;t dry out your code to the point of unreadability</li>
</ul>


<p>In the end, cleaning up the ugly ternary makes the code reuse more reasonable.</p>

<figure class='code'><figcaption><span>This is just fine </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">postPageItem</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">commentsCount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">commentsNote</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">Comments</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">postId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">count</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">?</span> <span class="s2">&quot;comment&quot;</span> <span class="o">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flash Your Local Collection]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/flash-your-local-collection/"/>
    <updated>2014-05-26T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/flash-your-local-collection</id>
    <content type="html"><![CDATA[<p>Rails allows you to pass messages to the user between actions (&ldquo;This <a href="http://api.rubyonrails.org/classes/ActionDispatch/Flash.html">ActionDispatch::Flash</a> will self-destruct&rdquo;), and because Rails, all the message generation happens server side:</p>

<figure class='code'><figcaption><span>flashy_controller.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;You dropped your packet.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Meteor is mostly a client-side application framework, and you can implement a similar message system, which will never touch the server, by defining a collection that is local to the browser.<!--more--></p>

<h3>1. Create a local collection</h3>

<figure class='code'><figcaption><span>/client/errors.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Errors</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Meteor</span><span class="p">.</span><span class="nx">Collection</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Passing <code>null</code> into the Collection declaration tells Meteor that the collection should not be extended to the server &mdash; it creates an &ldquo;unmanaged (unsynchronized) local collection&rdquo; (<a href="http://docs.meteor.com/#meteor_collection">docs</a>)</p>

<h3>2. Throw an error whenever you need to</h3>

<figure class='code'><figcaption><span>/missionCritical.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>if(error){
</span><span class='line'>  Errors.insert({message: error.reason});
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>3. Create a template for displaying the error</h3>

<figure class='code'><figcaption><span>/client/errors.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">template</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;errors&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;errors&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{{</span><span class="err">#</span><span class="nx">each</span> <span class="nx">errors</span><span class="p">}}</span>
</span><span class='line'>      <span class="p">{{</span><span class="o">&gt;</span> <span class="nx">error</span><span class="p">}}</span>
</span><span class='line'>    <span class="p">{{</span><span class="err">/each}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/template&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">template</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;error&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;alert alert-error&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;close&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">dismiss</span><span class="o">=</span><span class="s2">&quot;alert&quot;</span><span class="o">&gt;&amp;</span><span class="nx">times</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>    <span class="p">{{</span><span class="nx">message</span><span class="p">}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/template&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. Create a helper method for serving the errors to the template</h3>

<figure class='code'><figcaption><span>/client/errors.js continued again </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">Template</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">helpers</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">errors</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Errors</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Every template that contains the handlebars <code>{{&gt; errors}}</code> will now display whatever errors have been saved to the session collection.</p>

<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="https://www.discovermeteor.com/">discovermeteor.com</a>
<a href="http://docs.meteor.com">Meteor docs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongo Trouble? Reset!]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/mongo-trouble-reset/"/>
    <updated>2014-05-03T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/mongo-trouble-reset</id>
    <content type="html"><![CDATA[<p>Back in March I wrote about letting my computer&rsquo;s battery die in the middle of a meteor project, with the consequence being that I could not connect to the underlying mongo database:</p>

<figure class='code'><figcaption><span>What&#8217;s wrong, meteor? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>meteor
</span><span class='line'><span class="o">[[[[[</span> ~/project/in/progress <span class="o">]]]]]</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span>&gt; Started proxy.
</span><span class='line'>Unexpected mongo <span class="nb">exit </span>code 100. Restarting.
</span><span class='line'>Unexpected mongo <span class="nb">exit </span>code 100. Restarting.
</span><span class='line'>Unexpected mongo <span class="nb">exit </span>code 100. Restarting.
</span><span class='line'>Can<span class="err">&#39;</span>t start Mongo server.
</span><span class='line'>MongoDB had an unspecified uncaught exception.
</span><span class='line'>This can be caused by MongoDB being unable to write to a <span class="nb">local </span>database.
</span><span class='line'>Check that you have permissions to write to .meteor/local. MongoDB does
</span><span class='line'>not support filesystems like NFS that <span class="k">do </span>not allow file locking.
</span></code></pre></td></tr></table></div></figure>


<p>After much spelunking in stackoverflow and documentation, I discovered the magic of this command:</p>

<figure class='code'><figcaption><span>Magic mongo reset spell %</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo -u mongodb mongdo --repair --dbpath /var/lib/mongodb
</span><span class='line'><span class="nv">$ </span>sudo service mongodb start
</span></code></pre></td></tr></table></div></figure>


<p>Repairing and restarting the mongo service seemed to do the trick, and I continued on my merry meteor way. Well, I did it again &mdash; I let my battery die in the middle of a meteor project, and with feelings of smug satisfaction, I plumbed my blog archive for the answer. Only this time the magic antidote didn&rsquo;t work<!--more-->:</p>

<figure class='code'><figcaption><span>This log has been redacted to protect the ignorant </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo -u mongodb mongod --repair --dbpath /var/lib/mongodb/
</span><span class='line'>[sudo] password for keighty:
</span><span class='line'>Sat May  3 09:52:04.793 [initandlisten] finished checking dbs
</span><span class='line'>Sat May  3 09:52:04.793 dbexit:
</span><span class='line'>Sat May  3 09:52:04.793 [initandlisten] shutdown: going to close listening sockets...
</span><span class='line'>Sat May  3 09:52:04.793 [initandlisten] shutdown: going to flush diaglog...
</span><span class='line'>Sat May  3 09:52:04.793 [initandlisten] shutdown: going to close sockets...
</span><span class='line'>Sat May  3 09:52:04.793 [initandlisten] shutdown: waiting for fs preallocator...
</span><span class='line'>Sat May  3 09:52:04.793 [initandlisten] shutdown: closing all files...
</span><span class='line'>Sat May  3 09:52:04.793 [initandlisten] closeAllFiles() finished
</span><span class='line'>Sat May  3 09:52:04.793 [initandlisten] shutdown: removing fs lock...
</span><span class='line'>Sat May  3 09:52:04.794 dbexit: really exiting now
</span><span class='line'>
</span><span class='line'>$ sudo service mongodb start
</span><span class='line'>mongodb start/running, process 2415
</span><span class='line'>$ meteor
</span><span class='line'>[[[[[ ~/project/in/progress ]]]]]
</span><span class='line'>
</span><span class='line'>=> Started proxy.
</span><span class='line'>Unexpected mongo exit code 100. Restarting.
</span><span class='line'>Unexpected mongo exit code 100. Restarting.
</span><span class='line'>Unexpected mongo exit code 100. Restarting.
</span><span class='line'>Can't start Mongo server.
</span><span class='line'>MongoDB had an unspecified uncaught exception.
</span><span class='line'>This can be caused by MongoDB being unable to write to a local database.
</span><span class='line'>Check that you have permissions to write to .meteor/local. MongoDB does
</span><span class='line'>not support filesystems like NFS that do not allow file locking.</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;mon &mdash; It worked the last time! I tried it again with the same result. I tried <code>chown</code>-ing the local db. I tried <code>chown</code>-ing the database in <code>/var/lib/mongodb</code>. After each attempted solution the mongobd service would start, but meteor hiccuped on writing to the database. So I tried something radical. Something that wasn&rsquo;t in any of the manuals, or any of the <a href="http://stackoverflow.com/questions/5798549/why-cant-i-start-the-mongodb">responses to similar questions</a> on stackoverflow:</p>

<figure class='code'><figcaption><span>Really? That was all? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>meteor reset
</span><span class='line'>Project reset.
</span><span class='line'><span class="nv">$ </span>meteor
</span><span class='line'><span class="o">[[[[[</span> ~/project/in/progress <span class="o">]]]]]</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span>&gt; Started proxy.
</span><span class='line'><span class="o">=</span>&gt; Started MongoDB.
</span><span class='line'><span class="o">=</span>&gt; Started your app.
</span><span class='line'>
</span><span class='line'><span class="o">=</span>&gt; App running at: http://localhost:3000/
</span></code></pre></td></tr></table></div></figure>


<p>Turns out that if you hard shut-down your computer while your meteor project&rsquo;s mongo instance is running, it remains in a locked mode. Since it was only a development database I took a chance that dropping it would cure my ills. Voila! Meteor and mongodb are friends again.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor, Fetch!]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/meteor-fetch/"/>
    <updated>2014-03-31T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/meteor-fetch</id>
    <content type="html"><![CDATA[<p>From <a href="http://book.discovermeteor.com/">Discover Meteor</a>: find() returns a cursor, which is a reactive data source.</p>

<p>Data from reactive sources will be updated automatically to track changes in the data used to generate it. <!--more-->Cursors are derived from specific sources:</p>

<ul>
<li>Session variables</li>
<li>Database queries on Collections</li>
<li>Meteor.status</li>
<li>The ready() method on a subscription handle</li>
<li>Meteor.user</li>
<li>Meteor.userId</li>
<li>Meteor.loggingIn</li>
</ul>


<figure class='code'><figcaption><span>For example, find() using a database query </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">Posts</span><span class="p">.</span><span class="nx">find</span><span class="p">()</span>
</span><span class='line'><span class="nx">LocalCollection</span><span class="p">.</span><span class="nx">Cursor</span> <span class="p">{</span><span class="nx">collection</span><span class="o">:</span> <span class="nx">LocalCollection</span><span class="p">,</span> <span class="nx">sorter</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">_selectorId</span><span class="o">:</span> <span class="kc">undefined</span><span class="p">,</span> <span class="nx">matcher</span><span class="o">:</span> <span class="nx">Minimongo</span><span class="p">.</span><span class="nx">Matcher</span><span class="p">,</span> <span class="nx">skip</span><span class="o">:</span> <span class="kc">undefined</span><span class="err">…</span><span class="p">}</span>
</span><span class='line'>      <span class="nx">_selectorId</span><span class="o">:</span> <span class="kc">undefined</span>
</span><span class='line'>      <span class="nx">_transform</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>      <span class="nx">collection</span><span class="o">:</span> <span class="nx">LocalCollection</span>
</span><span class='line'>      <span class="nx">cursor_pos</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nx">db_objects</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>      <span class="nx">fields</span><span class="o">:</span> <span class="kc">undefined</span>
</span><span class='line'>      <span class="nx">limit</span><span class="o">:</span> <span class="kc">undefined</span>
</span><span class='line'>      <span class="nx">matcher</span><span class="o">:</span> <span class="nx">Minimongo</span><span class="p">.</span><span class="nx">Matcher</span>
</span><span class='line'>      <span class="nx">reactive</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>      <span class="nx">skip</span><span class="o">:</span> <span class="kc">undefined</span>
</span><span class='line'>      <span class="nx">sorter</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>      <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cursors are not query snapshots. They are query snapshot containers &mdash; the contents of which are updated by changes to the underlying data. To interact with the data contained in a cursor, we can use fetch() to transform the cursor into an array.</p>

<figure class='code'><figcaption><span>A cursor becomes an array with find().fetch() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">Posts</span><span class="p">.</span><span class="nx">find</span><span class="p">().</span><span class="nx">fetch</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="nb">Object</span>
</span><span class='line'>    <span class="nx">_id</span><span class="o">:</span> <span class="s2">&quot;z4z36DFCaGr8Ptuqd&quot;</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;The Way We Live Now&quot;</span>
</span><span class='line'>    <span class="nx">author</span><span class="o">:</span> <span class="s2">&quot;Anthony Trollope&quot;</span>
</span><span class='line'>    <span class="nx">__proto__</span><span class="o">:</span> <span class="nb">Object</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Meteor can iterate over a cursor without first converting it to an array, but in order to interact with the data directly, you must first use fetch(), map(), or forEach(). For more cursor fun, checkout the <a href="http://docs.meteor.com/#reactivity">Meteor docs</a>.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Situations Matter]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/situations-matter/"/>
    <updated>2014-03-28T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/situations-matter</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/Situations-Matter-Understanding-Context-Transforms-ebook/dp/B005ERIS5S/ref=sr_1_1?ie=UTF8&amp;qid=1396016834&amp;sr=8-1&amp;keywords=situations+matter">Situations Matter</a> by Sam Sommers is an eye-opening study of the influence of context on human interactions. Social psychologists call it &ldquo;fundamental attribution error&rdquo;, which is a tendency to interpret someone else&rsquo;s behavior as stemming from their core characteristics, rather than to external circumstances. A simplistic example of attribution error is assuming that the person driving the speeding car is a reckless speed-freak rather than someone rushing a woman in labor to the hospital. Sommers has studied the power of situations over human interactions and how the attribution error interferes with our ability to empathize with the unfamiliar. I have read similar studies of how bias infiltrates our relationships, but what surprised me the most is how it also influences our perception of the self. <!--more--></p>

<h3>You&rsquo;re not the person you thought you were</h3>

<p>A provocative but aptly named chapter, Sommers overturns the concept of an &ldquo;authentic self&rdquo; with a simple fill-in-the-blanks exercise:</p>

<ol>
<li>I am _________________</li>
<li>I am _________________</li>
<li>I am _________________</li>
<li>I am _________________</li>
<li>I am _________________</li>
</ol>


<p>His study subjects were required to fill in 20 of these blanks, but 5 is enough to illustrate his point to the reader. The open-endedness of this exercise allows for a fantastic range of responses: &ldquo;I am 36 years old, I am hungry, I am tall, I am a lifelong learner&rdquo;. Taking the 20 questions test in different contexts will yield different definitions of yourself. Sommers has discovered that &ldquo;we tend to think of ourselves in terms of that which makes us distinctive&rdquo;, so your answers will have more to do with the people around you than with a fixed set of characteristics. A woman is more likely to include gender on her list if she is in a room full of men than if she is in a room full of women. So it seems that &ldquo;identity is malleable and personal preferences are constructed on the spot.&rdquo; Introspection will gain us little but a hazy snap-shot of our identity at any given moment.</p>

<blockquote><p>&ldquo;It&rsquo;s refreshing to realize that you&rsquo;re not a finished product &mdash; that who you are in the here and now may not be the same person you&rsquo;ll be in the then and there. In fact, it&rsquo;s the opposite view of the self as a fixed entity that causes problems. When you assume that there&rsquo;s a true core self waiting to be discovered, that&rsquo;s when your potential seems limited and the world around you is full of threats to be rationalized away.&rdquo;</p></blockquote>

<p>One quality that is typically presumed to be fixed is intelligence. Challenging this truism, another study was conducted where students were grouped according to their belief that either intelligence is a stable attribute, or that their intellect can be changed. The researchers asked the students to predict the likelihood that they will attend a remedial language course, and then tracked their performance. It was found that among the students who fared poorly in the language course, those who viewed intelligence as a permanent, unchangeable trait were less likely to enroll in the remedial course &mdash; that is, to take steps in order to improve their performance. For students who believe that intelligence is fixed, a poor exam grade is a mark of their limitations rather than an opportunity for improvement. Students who believe that intelligence is malleable are more likely to show the stick-to-itiveness necessary for self-improvement.</p>

<p>Viewing the self less like a rigid Rubik&rsquo;s Cube to be solved, and more like Silly Putty that conforms to the shape of its container, will likely free up a lot of my time. Instead of trying to solve the puzzle. I can spend energy on finding the container that makes me happy&hellip; for the moment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ambition Gap - Leaning In]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/the-ambition-gap-lean-in/"/>
    <updated>2014-03-23T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/the-ambition-gap-lean-in</id>
    <content type="html"><![CDATA[<p>I may be a little late to the game, but I am finally reading Sheryl Sandberg&rsquo;s &ldquo;Lean In&rdquo;, and right from the introduction I can understand why it caused such a stir when it came out in 2012. Sandberg addresses the issue of why there are relatively few women in leadership roles, and ways that women have held themselves back.<!--more--> Women earn more than 57% of undergraduate degrees and 60% of masters degrees, and yet hold less than 14% of C level positions. I always assumed that as women disproportionately fill the ranks of entry level positions, there would be a proportional increase of women filling senior level positions as well. Apparently this is not the case. &ldquo;The exodus of highly educated women is a major contributor to the leadership gap.&rdquo;</p>

<p><span class='pullquote-right' data-pullquote='36% of men want to reach the C-suite and only 18% of women.'>
Sandberg shares a story about a kindergarten class where the students were asked &ldquo;What do you want to be when you grow up?&rdquo;. Several of the boys wanted to be president, but none of the girls did. This disparity continues into middle school, where more boys than girls aspire to leadership roles in future careers. 36% of men want to reach the C-suite and only 18% of women. Why so few? If the question were ever posed to me I would honestly say that rising to the C-levels has never been of any interest, and I think Sandberg is right to ask why.
</span></p>

<h3>Too much Barbie or not enough Hillary?</h3>

<p>Sandberg is quick to link the relative derth of women in leadership roles on the messages of obedience and passivity we instill in girls and the general indulgence of opposite traits in boys (&ldquo;boys will be boys&rdquo;). &ldquo;Gender stereotypes introduced in childhood are reinforced throughout our lives and become self-fulfilling prophesies.&rdquo; While gender stereotypes have held women back in the past, today the difference is in their perceived options, not in perceived abilities. When the kindergarten-ers in Sandberg&rsquo;s story were asked what they wanted to be when they grew up they looked to the immediate role models around them. Call it a lack of imagination about one&rsquo;s future career, rather than a lack of ambition.</p>

<p>She has recently begun a campaign to <a href="http://banbossy.com/">ban the word &ldquo;bossy&rdquo;</a>, and while words have the power to shape our values, it is a passive approach to solving the problem. Boys don&rsquo;t show a propensity towards leadership in middle-school any more than girls show a propensity towards secretarial work. Sandberg&rsquo;s <a href="http://leanin.org/">&ldquo;Lean In&rdquo;</a> project comes closer to directly addressing the issue. She realizes that you can&rsquo;t be what you can&rsquo;t see&#8221;, and works to raise the profiles of powerful women. When it becomes normal to have female leaders, I am sure we will find more girls expressing ambition. Likewise, when it becomes normal for men to share equally in care-giving, boys will begin making different choices.</p>

<p><a href="http://www.amazon.com/Lean-In-Women-Work-Will/dp/0385349947/ref=sr_1_1?ie=UTF8&amp;qid=1395756488&amp;sr=8-1&amp;keywords=lean+in">Lean In: Women, Work, and the Will to Lead</a> by Sheryl Sandberg</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Line, Spline]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/line-spline/"/>
    <updated>2014-03-20T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/line-spline</id>
    <content type="html"><![CDATA[<p>D3 lines are rendered using linear interpolation by default. This means that the line connecting a series of points will trace a direct path from one node to another:</p>

<div id="graph-here">
  <script src="http://mbostock.github.com/d3/d3.v2.min.js"></script>
  <script>
var width = 400,
    height = 400,
    margin = 5,
    scalex = d3.scale.linear().domain([0, 7]).range([margin, width - margin]),
    scaley = d3.scale.linear().domain([0, 7]).range([height - margin, margin]);

var data = [
  [
      {x: 0, y: 5},{x: 1, y: 7},{x: 2, y: 5},
      {x: 3, y: 5},{x: 4, y: 3},{x: 6, y: 4},
      {x: 7, y: 2}
  ],
  [
      {x: 0, y: 3},{x: 1, y: 5},{x: 2, y: 3},
      {x: 3, y: 3},{x: 4, y: 1},{x: 6, y: 2},
      {x: 7, y: 1}
  ]
];

var straightLine = d3.svg.line()
        .interpolate("linear")
        .x(function(d){return scalex(d.x);})
        .y(function(d){return scaley(d.y);});
var smoothLine = d3.svg.line()
        .interpolate("cardinal")
        .x(function(d){return scalex(d.x);})
        .y(function(d){return scaley(d.y);});

var svg = d3.select("#graph-here").append("svg");

  svg.attr("height", height)
      .attr("width", width);

   svg.selectAll("path")
        .data(data)
      .enter()
        .append("path")
        .attr("class", "line")
        .attr("fill", "none")
        .attr("stroke", "blue")
        .attr("stroke-width", 2)
        .attr("d", function(d, i){
          if(i % 2 === 0) return straightLine(d);
          return smoothLine(d)
        });

    svg.selectAll("textPath").data(data)
      .enter()
        .append("text")
        .attr("x", function(d) { return scalex(d[d.length-2].x); })
        .attr("y", function(d) { return scaley(d[d.length-2].y); })
        .attr("text-anchor", "end")
        .text(function(d, i) {
          if(i % 2 === 0) return "Straight Lines";
          return "Smooth Lines";
        });

  </script>
</div>


<p>The curved line is rendered with the cardinal interpolator, one of several options D3 provides. The curvature of the line is called a <strong>spline</strong>. Splines are tools used by architects to draw curved lines, and the term was adopted by mathematicians to describe smooth, piecewise polynomial approximation:</p>

<blockquote><p>Splines are curves, which are usually required to be continuous and smooth&hellip; [The] join points are called knots. Splines with few knots are generally smoother than splines with many knots; however, increasing the number of knots usually increases the fit of the spline function to the data. Knots give the curve freedom to bend to more closely follow the data. &mdash;<a href="http://en.wikipedia.org/wiki/Spline_(mathematics">Wikipedia</a>)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Remotes]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/multiple-remotes/"/>
    <updated>2014-03-19T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/multiple-remotes</id>
    <content type="html"><![CDATA[<p>Somehow I had worked out in my head that there could be only one remote. Origin. Turns out you can set and push to a (presumably) infinite number of remote repositories <!--more-->:</p>

<figure class='code'><figcaption><span>Checkout your git config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --list
</span><span class='line'>push.default=nothing
</span><span class='line'>alias.hist=log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
</span><span class='line'>user.name=Katie Leonard
</span><span class='line'>…
</span><span class='line'>remote.origin.url=git@github.com:keighty/thorfiles.git
</span><span class='line'>remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
</span><span class='line'>branch.master.remote=origin
</span><span class='line'>branch.master.merge=refs/heads/master</span></code></pre></td></tr></table></div></figure>


<p>(On a side note, I am not sure I remember putting <code>alias.hist</code> in my git config, but I find it to be wickedly useful.)</p>

<p>Setting a new remote is as easy as:</p>

<figure class='code'><figcaption><span>1 2 3 a b c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote add new_destination git@github.com:otheruser/thorfiles.git</span></code></pre></td></tr></table></div></figure>


<p>Standing back to admire the results:</p>

<figure class='code'><figcaption><span>Simple, but does it work? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --list
</span><span class='line'>push.default=nothing
</span><span class='line'>alias.hist=log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
</span><span class='line'>user.name=Katie Leonard
</span><span class='line'>…
</span><span class='line'>remote.origin.url=git@github.com:keighty/thorfiles.git
</span><span class='line'>remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
</span><span class='line'>branch.master.remote=origin
</span><span class='line'>branch.master.merge=refs/heads/master
</span><span class='line'>remote.new_destination.url=git@github.com:otheruser/thorfiles.git
</span><span class='line'>remote.new_destination.fetch=+refs/heads/*:refs/remotes/new_destination/*</span></code></pre></td></tr></table></div></figure>


<p>Fast-forward through some excellent and brilliant feature work on <code>my_branch</code>, and I naturally want to save it for posterity:</p>

<figure class='code'><figcaption><span>Chizeled in metal on GitHub servers </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin my_branch
</span><span class='line'>Counting objects: 611, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (263/263), done.
</span><span class='line'>Writing objects: 100% (375/375), 63.40 KiB | 0 bytes/s, done.
</span><span class='line'>Total 375 (delta 280), reused 189 (delta 105)
</span><span class='line'>To git@github.com:keighty/thorfiles.git
</span><span class='line'> * [new branch]      my_branch -> my_branch</span></code></pre></td></tr></table></div></figure>


<p>I can also share it with my friend&rsquo;s repo, presuming I have write access, and knowing full well he will want to use my new feature:</p>

<figure class='code'><figcaption><span>Update your friends! </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push new_destination my_branch
</span><span class='line'>Counting objects: 611, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (263/263), done.
</span><span class='line'>Writing objects: 100% (375/375), 63.40 KiB | 0 bytes/s, done.
</span><span class='line'>Total 375 (delta 280), reused 189 (delta 105)
</span><span class='line'>To git@github.com:otheruser/thorfiles.git
</span><span class='line'> * [new branch]      my_branch -> my_branch</span></code></pre></td></tr></table></div></figure>


<p>Git is so awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delay Chained Transitions]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/delay-chained-transitions/"/>
    <updated>2014-03-15T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/delay-chained-transitions</id>
    <content type="html"><![CDATA[<p>Changing an element using multiple, chained transitions requires a little troubleshooting. You would think that just chaining them one after another would suffice:</p>

<figure class='code'><figcaption><span>Chained Transitions </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">selection</span><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">doubleR</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>But D3 does not wait for one transition to be complete before it begins the next one. Adding a delay will accomplish the desired transition chaining:</p>

<figure class='code'><figcaption><span>ACTUAL Chained Transitions</span><a href='https://gist.github.com/keighty/9508948'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">selection</span><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">delay</span><span class="p">(</span><span class="mi">1700</span><span class="p">).</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">doubleR</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<div id="showme">
<style>
.axis path,
.axis line {
    fill: none;
    stroke: black;
    shape-rendering: crispEdges;
}

.axis text {
    font-family: sans-serif;
    font-size: 11px;
}
</style>
<script src="http://mbostock.github.com/d3/d3.v2.min.js"></script>
<script>

var width = 500,
    height = 500,
    margin = 50,
    data,
    dataFromCsv;

var scaleX=d3.scale.linear().domain([0,10]).range([margin,width-margin]);
var scaleY=d3.scale.linear().domain([0,10]).range([height-margin,margin]);

var svg=d3.select("#showme").append("svg")
      .attr("width",width)
      .attr("height",height);

function drawAxes() {
  var xAxis = d3.svg.axis()
    .scale(scaleX)
    .orient("bottom")
    .ticks(5)
    .tickSubdivide(1)
    .tickPadding(10)
    .tickFormat(function(d) { return d + " ticks"});

  var yAxis = d3.svg.axis()
    .scale(scaleY)
    .orient("left");

  svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0," + (height - margin) + ")")
    .call(xAxis);
  svg.append("text")
    .attr("class", "x label")
    .attr("text-anchor", "middle")
    .attr("x", width/2)
    .attr("y", height)
    .text("X-value");

  svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(" + margin + ",0)")
    .call(yAxis);
  svg.append("text")
    .attr("class", "y label")
    .attr("text-anchor", "middle")
    .attr("x", -height/2)
    .attr("y", 6)
    .attr("dy", ".75em")
    .attr("transform", "rotate(-90)")
    .text("Y-value");
}

dataFromCsv = [{ "Color": "#9467bd", "X": 1, "Y": 8, "Quantity": 91 },
{ "Color": "#1f77b4", "X": 9, "Y": 1, "Quantity": 32 },
{ "Color": "#1f77b4", "X": 3, "Y": 1, "Quantity": 67 },
{ "Color": "#bcbd22", "X": 5, "Y": 5, "Quantity": 63 },
{ "Color": "#9467bd", "X": 6, "Y": 6, "Quantity": 57 },
{ "Color": "#2ca02c", "X": 5, "Y": 10, "Quantity": 65 },
{ "Color": "#d62728", "X": 8, "Y": 2, "Quantity": 36 },
{ "Color": "#9467bd", "X": 2, "Y": 8, "Quantity": 82 },
{ "Color": "#bcbd22", "X": 4, "Y": 7, "Quantity": 69 },
{ "Color": "#9467bd", "X": 5, "Y": 3, "Quantity": 88 },
{ "Color": "#d62728", "X": 1, "Y": 5, "Quantity": 29 },
{ "Color": "#1f77b4", "X": 10, "Y": 7, "Quantity": 60 },
{ "Color": "#2ca02c", "X": 8, "Y": 5, "Quantity": 56 },
{ "Color": "#bcbd22", "X": 1, "Y": 6, "Quantity": 31 },
{ "Color": "#bcbd22", "X": 6, "Y": 5, "Quantity": 57 },
{ "Color": "#d62728", "X": 9, "Y": 6, "Quantity": 85 },
{ "Color": "indigo", "X": 9, "Y": 10, "Quantity": 70 },
{ "Color": "indigo", "X": 9, "Y": 10, "Quantity": 31 },
{ "Color": "#1f77b4", "X": 2, "Y": 4, "Quantity": 26 },
{ "Color": "#bcbd22", "X": 10, "Y": 5, "Quantity": 61 },
{ "Color": "#2ca02c", "X": 4, "Y": 2, "Quantity": 64 },
{ "Color": "#1f77b4", "X": 8, "Y": 9, "Quantity": 71 }];
function importData() {
  data = d3.nest()
          .key(function(d) { return d.Color; })
          .rollup(aggregateData)
          .entries(dataFromCsv);
  // drawElements();
  setInterval( drawElements, 4000 );
}

/***********************
  Draw circles, bind data, and move elements to final location
***********************/
function drawElements() {
  var selection = svg.selectAll("circle").data(data);

  selection.enter()
    .append("circle")
    .attr("cx",scaleX(0))
    .attr("cy",scaleY(0))
    .attr("r", 0)

  selection.transition().duration(1500)
      .attr("cx",getX)
      .attr("cy",getY)
      .attr("r", getR)
      .style("fill", getColor)
    .transition().delay(1500+200).duration(1500)
      .attr("r", doubleR);
}

/***********************
  Helper functions
***********************/
function getX(d)     { return scaleX(d.values.X); }
function getY(d)     { return scaleY(d.values.Y); }
function getR(d)     { return d.values.Quantity / 10; }
function doubleR(d)     { return d.values.Quantity / 5; }
function getColor(d) { return d.key; }
// Use D3 built in array functions to aggregate data
function aggregateData(d) {
  return {
    "X"       : d3.mean(d, function(e) { return +e.X; }),
    "Y"       : d3.median(d, function(e) { return +e.Y; }),
    "Quantity": d3.max(d, function(e) { return +e.Quantity; })
  };
}

drawAxes();
importData();
</script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easing Does It]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/easing-does-it/"/>
    <updated>2014-03-12T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/easing-does-it</id>
    <content type="html"><![CDATA[<p>With the possible exception of UFOs, things don&rsquo;t usually switch from being stationary to moving at maximum velocity without an intervening period of acceleration or deceleration. Similarly, it can be difficult to track elements on a web page that move from one position to another with no warning, or faster than the human eye can perceive. Enter easing functions: <!--more--></p>

<blockquote><p>&ldquo;<strong>Easing functions</strong> specify the rate of change of a parameter over time.&rdquo; &mdash;Robert Penner</p></blockquote>

<figure class='code'><figcaption><span>Easy easing</span><a href='https://gist.github.com/keighty/9508948'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">selection</span><span class="p">.</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">scaleX</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">scaleY</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="nx">selection</span><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">ease</span><span class="p">(</span><span class="s2">&quot;cubic-in-out&quot;</span><span class="p">).</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The transition will act on the selection in the following ways:</p>

<ul>
<li>it will move the element from its starting x position of 0 to the x position defined by <code>getX()</code></li>
<li>it will move the element from its starting y position of 0 to the y position defined by <code>getY()</code></li>
<li>it will increase the element&rsquo;s radius from 0 to the radius returned from <code>getR()</code></li>
<li>it will gradually change the element&rsquo;s color using an ordinal color scale, from black to the color returned from <code>getColor()</code></li>
<li>all of this movement will be performed with a &ldquo;cubic-in-out&rdquo; easing function</li>
</ul>


<p>The cubic-in-out easing function is the standard D3 easing function. The element will increase velocity by a power of 3 until halfway down the path it is destined to trace. It will then decrease velocity by a power of 3 until it reaches its final location. There are many different types of easing functions. Check out the resources for more information, and ask your doctor which easing function is right for you!</p>

<h3>Resources</h3>

<p>Robert Penner&rsquo;s <a href="http://www.robertpenner.com/easing/">Easing Functions</a></p>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Value of Slow Transitions]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/the-value-of-transition/"/>
    <updated>2014-03-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/the-value-of-transition</id>
    <content type="html"><![CDATA[<h3>The Why</h3>

<p>From <a href="http://bost.ocks.org/mike/constancy/">Object Constancy</a> by Mike Bostock:</p>

<blockquote><p>Animated transitions are pretty, but they also serve a purpose: they make it easier to follow the data. This is known as <strong>object constancy</strong>: a graphical element that represents a particular data point&hellip; can be tracked visually through the transition. This lessens the cognitive burden by using <strong>preattentive processing</strong> of motion rather than sequential scanning of labels.</p></blockquote>

<p>(The emphasis is mine)</p>

<h3>The How</h3>

<p>Object constancy is achieved through object identity: the data is bound to it&rsquo;s object by a shared unique identifier. This allows D3 to reuse the object when the data set is updated. Object identity is achieved by passing a key function to the data() method at the time of data binding:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var data = [ // &lt;-A
</span><span class='line'>        {id: 0, value: "foo"},
</span><span class='line'>        {id: 1, value: "bar"},
</span><span class='line'>        {id: 2, value: "foo"},
</span><span class='line'>        {id: 3, value: "baz"},
</span><span class='line'>        {id: 4, value: "bar"}
</span><span class='line'>    ];
</span><span class='line'>d3.selectAll("svg:g")
</span><span class='line'>    .data(data, function(d){return d.id;});</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git, What Have I Done?]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/git-what-have-i-done/"/>
    <updated>2014-03-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/git-what-have-i-done</id>
    <content type="html"><![CDATA[<p>Git, the superhero of version control, allows you to review all the commands that have modified the HEAD tag in a git repo: <code>git reflog</code></p>

<p>The output for one of my demo apps:</p>

<figure class='code'><figcaption><span>Git, you&#8217;re my hero </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>5075d26 HEAD@<span class="o">{</span>0<span class="o">}</span>: checkout: moving from master to kleonard/add_skyline_background
</span><span class='line'>531c396 HEAD@<span class="o">{</span>1<span class="o">}</span>: pull: fast forward
</span><span class='line'>435f6de HEAD@<span class="o">{</span>2<span class="o">}</span>: commit: Adds logic <span class="k">for </span>running and testing
</span><span class='line'>043e35a HEAD@<span class="o">{</span>3<span class="o">}</span>: commit: Adds logic to process input
</span><span class='line'>5155ba4 HEAD@<span class="o">{</span>4<span class="o">}</span>: commit: Adds input file
</span><span class='line'>a629871 HEAD@<span class="o">{</span>5<span class="o">}</span>: rebase finished: returning to refs/heads/kleonard/create_input_files
</span><span class='line'>a010021 HEAD@<span class="o">{</span>6<span class="o">}</span>: rebase: Add input file
</span><span class='line'>b7cd86a HEAD@<span class="o">{</span>7<span class="o">}</span>: commit: Initial commit arbitrage
</span><span class='line'>5ed00ea HEAD@<span class="o">{</span>8<span class="o">}</span>: commit: Adds launcher
</span><span class='line'>7b2d720 HEAD@<span class="o">{</span>9<span class="o">}</span>: commit: Adds logic to find smallest number of moves
</span><span class='line'>9c0dfce HEAD@<span class="o">{</span>10<span class="o">}</span>: commit: Adds implementation <span class="k">for </span>bin creation
</span></code></pre></td></tr></table></div></figure>


<p>Hmmm&hellip; looks like my commit messages need a little work&hellip; Still, it is a great tool for catching up on the changes to a repo (especially if you haven&rsquo;t touched it in a while), finding out where the bulk of the work is happening, or just reminding yourself what you did yesterday.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transition With Style]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/transition-with-style/"/>
    <updated>2014-03-06T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/transition-with-style</id>
    <content type="html"><![CDATA[<p>Making things zoom across the page is what I used to think javascript was all about, but it wasn&rsquo;t until I started learning d3 that I found out how to make it happen.</p>

<!--more-->




<figure class='code'><figcaption><span>Simple Transition </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">duration</span> <span class="o">=</span> <span class="mi">2000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">body</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;background-color&quot;</span><span class="p">,</span> <span class="s2">&quot;white&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;margin&quot;</span><span class="p">,</span> <span class="s2">&quot;40px&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="s2">&quot;200px&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="s2">&quot;200px&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;border&quot;</span><span class="p">,</span> <span class="s2">&quot;black solid thin&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">duration</span><span class="p">(</span><span class="nx">duration</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;background-color&quot;</span><span class="p">,</span> <span class="s2">&quot;black&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;margin-left&quot;</span><span class="p">,</span> <span class="s2">&quot;600px&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="s2">&quot;100px&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="s2">&quot;100px&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>D3 is smart enough to select an appropriate scale for the property in transition. If a transitioning element is not given an explicit starting point, D3 will use the computed style. If the end value is missing, the property will be treated as a constant. In the example above, the border stays the same, as do the top and bottom margins. The only properties that change are the ones specified below the transition().</p>

<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun With Ticks]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/scales-and-ticks/"/>
    <updated>2014-03-05T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/scales-and-ticks</id>
    <content type="html"><![CDATA[<p>D3 has an awesome tick library, which makes it easy to customize an axis. I have not found any evidence of a built in function to customize tick rendering depending on if it is a major or a minor tick. One way to get around that is to render two axes, and only label one<!--more-->:</p>

<figure class='code'><figcaption><span>axes ticks </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">scaleX</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">().</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">]).</span><span class="nx">range</span><span class="p">([</span><span class="nx">margin</span><span class="p">,</span><span class="nx">width</span><span class="o">-</span><span class="nx">margin</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">svg</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span><span class="nx">width</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">xAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">scaleX</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;bottom&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">ticks</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">tickSubdivide</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">tickPadding</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">tickFormat</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span> <span class="o">+</span> <span class="s2">&quot; ticks&quot;</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">x2Axis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">scaleX</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;bottom&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">ticks</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">tickSize</span><span class="p">(</span><span class="mi">14</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">tickFormat</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(0,&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">margin</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">xAxis</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(0,&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">margin</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">x2Axis</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>TADA</h3>

<p><img src="http://www.katieleonard.ca/images/post_d3_scale_major_ticks.png"></p>

<h3>More fun with ticks</h3>

<ul>
<li><strong>orient()</strong>: set which side of the axis will be ticked and labeled</li>
<li><strong>ticks()</strong>: set the number of major ticks</li>
<li><strong>tickSubdivide()</strong>: set the number of minor ticks</li>
<li><strong>tickPadding()</strong>: set the distance between the ticks and their label</li>
<li><strong>tickFormat()</strong>: set the units to appear after the label on the major ticks</li>
<li><strong>tickSize()</strong>: specify one arg for inner ticks, another argument for outer ticks, or use outerTickSize() or innerTickSize() to specify one or the other. Outer ticks are at the ends of the scales.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[D3 Nests and Rollups]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/d3-nests-and-rollups/"/>
    <updated>2014-03-04T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/d3-nests-and-rollups</id>
    <content type="html"><![CDATA[<p>D3 provides powerful functions for manipulating raw data sets, including csv(), nest(), and rollup().</p>

<!--more-->


<p>I generated a hundred rows of test_data.csv using <a href="http://www.generatedata.com/#about">generatedata.com</a>:</p>

<figure class='code'><figcaption><span>test_data.csv</span><a href='https://gist.github.com/keighty/9348444#file-test_data-csv'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Colors,X,Y,Quantity
</span><span class='line'>violet,1,8,91
</span><span class='line'>blue,9,1,32
</span><span class='line'>blue,3,1,67
</span><span class='line'>yellow,5,5,63
</span><span class='line'>violet,6,6,57
</span><span class='line'>green,5,10,65
</span><span class='line'>red,8,2,36
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>The basic properties are a Color (one of blue, yellow, violet, green, and red), an X-value (between 1 and 10), a Y-value (also between 1 and 10), and a Quantity value (between 1 and 100).</p>

<h3>csv()</h3>

<p>You can import a raw, comma-delimited data file, and bind the data directly to an svg.</p>

<figure class='code'><figcaption><span>csv()</span><a href='https://gist.github.com/keighty/9348444'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">csv</span><span class="p">(</span><span class="s2">&quot;test_data.csv&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">csv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="nx">csv</span><span class="p">).</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.katieleonard.ca/images/post_d3_csv_data.png"></p>

<h3>nest() and rollup()</h3>

<p>You can also aggregate data on any property &mdash; just tell D3 which one, and use any of D3&rsquo;s handy utility functions (mean, median, sum, min/max, quantile, etc) to return the aggregate data you want to display. For example, I want to plot the average data for each color. I tell my D3 selection to nest the data on the color key. Then I tell the rollup function to take the average for each property of the data. Pass the new data to the svg instead of the csv, and voila</p>

<figure class='code'><figcaption><span>nest() and rollup()</span><a href='https://gist.github.com/keighty/9348540'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">csv</span><span class="p">(</span><span class="s2">&quot;test_data.csv&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">csv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">nest</span><span class="p">()</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">key</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Colors</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">rollup</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;X&quot;</span><span class="o">:</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">X</span><span class="p">;</span> <span class="p">}),</span>
</span><span class='line'>              <span class="s2">&quot;Y&quot;</span><span class="o">:</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">Y</span><span class="p">;</span> <span class="p">}),</span>
</span><span class='line'>              <span class="s2">&quot;Quantity&quot;</span><span class="o">:</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">Quantity</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">csv</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.katieleonard.ca/images/post_d3_rollupdata_image.png"></p>

<p>D3 is so awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Technique for Producing Ideas]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/a-technique-for-producing-ideas/"/>
    <updated>2014-03-04T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/a-technique-for-producing-ideas</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/B001C34HUS/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B001C34HUS&amp;linkCode=as2&amp;tag=bridgeforpoke-20">A Technique for Producing Ideas</a> by James Webb Young (1965)</p>

<p>Young proposes that all ideas are the result of five identifiable stages of rumination, whether they are followed consciously or not:</p>

<ol>
<li>Gather information, and not just what is specific to your problem domain. Novelty comes from mashing seemingly unrelated concepts together.</li>
<li>Review the information &mdash; collate your information in some fashion and go over it. A lot.</li>
<li>Do something else. Get distracted from whatever problem you are trying to solve.</li>
<li>&ldquo;Eureka! I have it!&rdquo;</li>
<li>Refine your idea &mdash; first drafts are never perfect, so keep polishing.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling D3]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/d3-scaling/"/>
    <updated>2014-03-03T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/d3-scaling</id>
    <content type="html"><![CDATA[<p>Add scales to a d3 plot in three easy steps:</p>

<h3>1. Define the scale</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Image dimensions</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">margin</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">scaleX</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">().</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">]).</span><span class="nx">range</span><span class="p">([</span><span class="nx">margin</span><span class="p">,</span> <span class="nx">width</span><span class="o">-</span><span class="nx">margin</span><span class="p">]);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">scaleY</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">().</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">]).</span><span class="nx">range</span><span class="p">([</span><span class="nx">height</span><span class="o">-</span><span class="nx">margin</span><span class="p">,</span> <span class="nx">margin</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Draw the scale</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Image container</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">svg</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span><span class="nx">width</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Axis definition</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">xAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">scaleX</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;bottom&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">yAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">scaleY</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;left&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Axis graphics</span>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(0,&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">height</span> <span class="o">-</span> <span class="nx">margin</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">xAxis</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(&quot;</span> <span class="o">+</span> <span class="nx">margin</span> <span class="o">+</span> <span class="s2">&quot;,0)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">yAxis</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Apply the scale to your data</h3>

<figure class='code'><figcaption><span>Apply the scale.</span><a href='https://gist.github.com/keighty/9327604'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">csv</span><span class="p">(</span><span class="s2">&quot;test_data.csv&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">csv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="nx">csv</span><span class="p">).</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Apply scale to the x value</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getX</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">scaleX</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">X</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Apply scale to the y value</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getY</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">scaleY</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Y</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getR</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Quantity</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getColor</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Colors</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Dates]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/javascript-dates/"/>
    <updated>2014-03-01T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/javascript-dates</id>
    <content type="html"><![CDATA[<p>Javascript Date objects have zero indexed months but not dates.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; (new Date(2014, 0, 1)).strftime("%b %d, %Y")
</span><span class='line'>"Jan 1, 2014"
</span><span class='line'>&gt; (new Date(2013, 11, 31)).strftime("%b %d, %Y")
</span><span class='line'>"Dec 31, 2013"
</span><span class='line'>&gt; (new Date(2014, 0, 0)).strftime("%b %d, %Y")
</span><span class='line'>"Dec 31, 2013"</span></code></pre></td></tr></table></div></figure>


<p>Wat?</p>

<!--more-->


<h3>Resources</h3>

<p><a href="http://tech.bluesmoon.info/2008/04/strftime-in-javascript.html">Javascript strftime</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String Conversion in Javascript]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/to-i-in-javascript/"/>
    <updated>2014-02-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/to-i-in-javascript</id>
    <content type="html"><![CDATA[<p>Almost every day, javascript blows my mind. Today I discovered that you can convert a string to a number simply by prepending a +:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; typeof(+"this is a string")
</span><span class='line'>"number"
</span><span class='line'>&gt; typeof(+"100")
</span><span class='line'>"number"
</span><span class='line'>&gt; +"100" + 50
</span><span class='line'>150</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
</feed>
