<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[keighty]]></title>
  <link href="http://www.katieleonard.ca/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2014-03-25T07:36:19-07:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Ambition Gap - Leaning In]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/the-ambition-gap-lean-in/"/>
    <updated>2014-03-23T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/the-ambition-gap-lean-in</id>
    <content type="html"><![CDATA[<p>I may be a little late to the game, but I am finally reading Sheryl Sandberg&rsquo;s &ldquo;Lean In&rdquo;, and right from the introduction I can understand why it caused such a stir when it came out in 2012. Sandberg addresses the issue of why there are relatively few women in leadership roles, and ways that women have held themselves back.<!--more--> Women earn more than 57% of undergraduate degrees and 60% of masters degrees, and yet hold less than 14% of C level positions. I always assumed that as women disproportionately fill the ranks of entry level positions, there would be a proportional increase of women filling senior level positions as well. Apparently this is not the case. &ldquo;The exodus of highly educated women is a major contributor to the leadership gap.&rdquo;</p>

<p><span class='pullquote-right' data-pullquote='36% of men want to reach the C-suite and only 18% of women.'>
Sandberg shares a story about a kindergarten class where the students were asked &ldquo;What do you want to be when you grow up?&rdquo;. Several of the boys wanted to be president, but none of the girls did. This disparity continues into middle school, where more boys than girls aspire to leadership roles in future careers. 36% of men want to reach the C-suite and only 18% of women. Why so few? If the question were ever posed to me I would honestly say that rising to the C-levels has never been of any interest, and I think Sandberg is right to ask why.
</span></p>

<h3>Too much Barbie or not enough Hillary?</h3>

<p>Sandberg is quick to link the relative derth of women in leadership roles on the messages of obedience and passivity we instill in girls and the general indulgence of opposite traits in boys (&ldquo;boys will be boys&rdquo;). &ldquo;Gender stereotypes introduced in childhood are reinforced throughout our lives and become self-fulfilling prophesies.&rdquo; While gender stereotypes have held women back in the past, today the difference is in their perceived options, not in perceived abilities. When the kindergarten-ers in Sandberg&rsquo;s story were asked what they wanted to be when they grew up they looked to the immediate role models around them. Call it a lack of imagination about one&rsquo;s future career, rather than a lack of ambition.</p>

<p>She has recently begun a campaign to <a href="http://banbossy.com/">ban the word &ldquo;bossy&rdquo;</a>, and while words have the power to shape our values, it is a passive approach to solving the problem. Boys don&rsquo;t show a propensity towards leadership in middle-school any more than girls show a propensity towards secretarial work. Sandberg&rsquo;s <a href="http://leanin.org/">&ldquo;Lean In&rdquo;</a> project comes closer to directly addressing the issue. She realizes that you can&rsquo;t be what you can&rsquo;t see&#8221;, and works to raise the profiles of powerful women. When it becomes normal to have female leaders, I am sure we will find more girls expressing ambition. Likewise, when it becomes normal for men to share equally in care-giving, boys will begin making different choices.</p>

<p><a href="http://www.amazon.com/Lean-In-Women-Work-Will/dp/0385349947/ref=sr_1_1?ie=UTF8&amp;qid=1395756488&amp;sr=8-1&amp;keywords=lean+in">Lean In: Women, Work, and the Will to Lead</a> by Sheryl Sandberg</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Line, Spline]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/line-spline/"/>
    <updated>2014-03-20T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/line-spline</id>
    <content type="html"><![CDATA[<p>D3 lines are rendered using linear interpolation by default. This means that the line connecting a series of points will trace a direct path from one node to another:</p>

<div id="graph-here">
  <script src="http://mbostock.github.com/d3/d3.v2.min.js"></script>
  <script>
var width = 400,
    height = 400,
    margin = 5,
    scalex = d3.scale.linear().domain([0, 7]).range([margin, width - margin]),
    scaley = d3.scale.linear().domain([0, 7]).range([height - margin, margin]);

var data = [
  [
      {x: 0, y: 5},{x: 1, y: 7},{x: 2, y: 5},
      {x: 3, y: 5},{x: 4, y: 3},{x: 6, y: 4},
      {x: 7, y: 2}
  ],
  [
      {x: 0, y: 3},{x: 1, y: 5},{x: 2, y: 3},
      {x: 3, y: 3},{x: 4, y: 1},{x: 6, y: 2},
      {x: 7, y: 1}
  ]
];

var straightLine = d3.svg.line()
        .interpolate("linear")
        .x(function(d){return scalex(d.x);})
        .y(function(d){return scaley(d.y);});
var smoothLine = d3.svg.line()
        .interpolate("cardinal")
        .x(function(d){return scalex(d.x);})
        .y(function(d){return scaley(d.y);});

var svg = d3.select("#graph-here").append("svg");

  svg.attr("height", height)
      .attr("width", width);

   svg.selectAll("path")
        .data(data)
      .enter()
        .append("path")
        .attr("class", "line")
        .attr("fill", "none")
        .attr("stroke", "blue")
        .attr("stroke-width", 2)
        .attr("d", function(d, i){
          if(i % 2 === 0) return straightLine(d);
          return smoothLine(d)
        });

    svg.selectAll("textPath").data(data)
      .enter()
        .append("text")
        .attr("x", function(d) { return scalex(d[d.length-2].x); })
        .attr("y", function(d) { return scaley(d[d.length-2].y); })
        .attr("text-anchor", "end")
        .text(function(d, i) {
          if(i % 2 === 0) return "Straight Lines";
          return "Smooth Lines";
        });

  </script>
</div>


<p>The curved line is rendered with the cardinal interpolator, one of several options D3 provides. The curvature of the line is called a <strong>spline</strong>. Splines are tools used by architects to draw curved lines, and the term was adopted by mathematicians to describe smooth, piecewise polynomial approximation:</p>

<blockquote><p>Splines are curves, which are usually required to be continuous and smooth&hellip; [The] join points are called knots. Splines with few knots are generally smoother than splines with many knots; however, increasing the number of knots usually increases the fit of the spline function to the data. Knots give the curve freedom to bend to more closely follow the data. &mdash;<a href="http://en.wikipedia.org/wiki/Spline_(mathematics">Wikipedia</a>)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Remotes]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/multiple-remotes/"/>
    <updated>2014-03-19T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/multiple-remotes</id>
    <content type="html"><![CDATA[<p>Somehow I had worked out in my head that there could be only one remote. Origin. Turns out you can set and push to a (presumably) infinite number of remote repositories <!--more-->:</p>

<figure class='code'><figcaption><span>Checkout your git config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --list
</span><span class='line'>push.default=nothing
</span><span class='line'>alias.hist=log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
</span><span class='line'>user.name=Katie Leonard
</span><span class='line'>â€¦
</span><span class='line'>remote.origin.url=git@github.com:keighty/thorfiles.git
</span><span class='line'>remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
</span><span class='line'>branch.master.remote=origin
</span><span class='line'>branch.master.merge=refs/heads/master</span></code></pre></td></tr></table></div></figure>


<p>(On a side note, I am not sure I remember putting <code>alias.hist</code> in my git config, but I find it to be wickedly useful.)</p>

<p>Setting a new remote is as easy as:</p>

<figure class='code'><figcaption><span>1 2 3 a b c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote add new_destination git@github.com:otheruser/thorfiles.git</span></code></pre></td></tr></table></div></figure>


<p>Standing back to admire the results:</p>

<figure class='code'><figcaption><span>Simple, but does it work? </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --list
</span><span class='line'>push.default=nothing
</span><span class='line'>alias.hist=log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
</span><span class='line'>user.name=Katie Leonard
</span><span class='line'>â€¦
</span><span class='line'>remote.origin.url=git@github.com:keighty/thorfiles.git
</span><span class='line'>remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
</span><span class='line'>branch.master.remote=origin
</span><span class='line'>branch.master.merge=refs/heads/master
</span><span class='line'>remote.new_destination.url=git@github.com:otheruser/thorfiles.git
</span><span class='line'>remote.new_destination.fetch=+refs/heads/*:refs/remotes/new_destination/*</span></code></pre></td></tr></table></div></figure>


<p>Fast-forward through some excellent and brilliant feature work on <code>my_branch</code>, and I naturally want to save it for posterity:</p>

<figure class='code'><figcaption><span>Chizeled in metal on GitHub servers </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin my_branch
</span><span class='line'>Counting objects: 611, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (263/263), done.
</span><span class='line'>Writing objects: 100% (375/375), 63.40 KiB | 0 bytes/s, done.
</span><span class='line'>Total 375 (delta 280), reused 189 (delta 105)
</span><span class='line'>To git@github.com:keighty/thorfiles.git
</span><span class='line'> * [new branch]      my_branch -> my_branch</span></code></pre></td></tr></table></div></figure>


<p>I can also share it with my friend&rsquo;s repo, presuming I have write access, and knowing full well he will want to use my new feature:</p>

<figure class='code'><figcaption><span>Update your friends! </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push new_destination my_branch
</span><span class='line'>Counting objects: 611, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (263/263), done.
</span><span class='line'>Writing objects: 100% (375/375), 63.40 KiB | 0 bytes/s, done.
</span><span class='line'>Total 375 (delta 280), reused 189 (delta 105)
</span><span class='line'>To git@github.com:otheruser/thorfiles.git
</span><span class='line'> * [new branch]      my_branch -> my_branch</span></code></pre></td></tr></table></div></figure>


<p>Git is so awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delay Chained Transitions]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/delay-chained-transitions/"/>
    <updated>2014-03-15T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/delay-chained-transitions</id>
    <content type="html"><![CDATA[<p>Changing an element using multiple, chained transitions requires a little troubleshooting. You would think that just chaining them one after another would suffice:</p>

<figure class='code'><figcaption><span>Chained Transitions </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">selection</span><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">doubleR</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>But D3 does not wait for one transition to be complete before it begins the next one. Adding a delay will accomplish the desired transition chaining:</p>

<figure class='code'><figcaption><span>ACTUAL Chained Transitions</span><a href='https://gist.github.com/keighty/9508948'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">selection</span><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">delay</span><span class="p">(</span><span class="mi">1700</span><span class="p">).</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">doubleR</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<div id="showme">
<style>
.axis path,
.axis line {
    fill: none;
    stroke: black;
    shape-rendering: crispEdges;
}

.axis text {
    font-family: sans-serif;
    font-size: 11px;
}
</style>
<script src="http://mbostock.github.com/d3/d3.v2.min.js"></script>
<script>

var width = 500,
    height = 500,
    margin = 50,
    data,
    dataFromCsv;

var scaleX=d3.scale.linear().domain([0,10]).range([margin,width-margin]);
var scaleY=d3.scale.linear().domain([0,10]).range([height-margin,margin]);

var svg=d3.select("#showme").append("svg")
      .attr("width",width)
      .attr("height",height);

function drawAxes() {
  var xAxis = d3.svg.axis()
    .scale(scaleX)
    .orient("bottom")
    .ticks(5)
    .tickSubdivide(1)
    .tickPadding(10)
    .tickFormat(function(d) { return d + " ticks"});

  var yAxis = d3.svg.axis()
    .scale(scaleY)
    .orient("left");

  svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0," + (height - margin) + ")")
    .call(xAxis);
  svg.append("text")
    .attr("class", "x label")
    .attr("text-anchor", "middle")
    .attr("x", width/2)
    .attr("y", height)
    .text("X-value");

  svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(" + margin + ",0)")
    .call(yAxis);
  svg.append("text")
    .attr("class", "y label")
    .attr("text-anchor", "middle")
    .attr("x", -height/2)
    .attr("y", 6)
    .attr("dy", ".75em")
    .attr("transform", "rotate(-90)")
    .text("Y-value");
}

dataFromCsv = [{ "Color": "#9467bd", "X": 1, "Y": 8, "Quantity": 91 },
{ "Color": "#1f77b4", "X": 9, "Y": 1, "Quantity": 32 },
{ "Color": "#1f77b4", "X": 3, "Y": 1, "Quantity": 67 },
{ "Color": "#bcbd22", "X": 5, "Y": 5, "Quantity": 63 },
{ "Color": "#9467bd", "X": 6, "Y": 6, "Quantity": 57 },
{ "Color": "#2ca02c", "X": 5, "Y": 10, "Quantity": 65 },
{ "Color": "#d62728", "X": 8, "Y": 2, "Quantity": 36 },
{ "Color": "#9467bd", "X": 2, "Y": 8, "Quantity": 82 },
{ "Color": "#bcbd22", "X": 4, "Y": 7, "Quantity": 69 },
{ "Color": "#9467bd", "X": 5, "Y": 3, "Quantity": 88 },
{ "Color": "#d62728", "X": 1, "Y": 5, "Quantity": 29 },
{ "Color": "#1f77b4", "X": 10, "Y": 7, "Quantity": 60 },
{ "Color": "#2ca02c", "X": 8, "Y": 5, "Quantity": 56 },
{ "Color": "#bcbd22", "X": 1, "Y": 6, "Quantity": 31 },
{ "Color": "#bcbd22", "X": 6, "Y": 5, "Quantity": 57 },
{ "Color": "#d62728", "X": 9, "Y": 6, "Quantity": 85 },
{ "Color": "indigo", "X": 9, "Y": 10, "Quantity": 70 },
{ "Color": "indigo", "X": 9, "Y": 10, "Quantity": 31 },
{ "Color": "#1f77b4", "X": 2, "Y": 4, "Quantity": 26 },
{ "Color": "#bcbd22", "X": 10, "Y": 5, "Quantity": 61 },
{ "Color": "#2ca02c", "X": 4, "Y": 2, "Quantity": 64 },
{ "Color": "#1f77b4", "X": 8, "Y": 9, "Quantity": 71 }];
function importData() {
  data = d3.nest()
          .key(function(d) { return d.Color; })
          .rollup(aggregateData)
          .entries(dataFromCsv);
  // drawElements();
  setInterval( drawElements, 4000 );
}

/***********************
  Draw circles, bind data, and move elements to final location
***********************/
function drawElements() {
  var selection = svg.selectAll("circle").data(data);

  selection.enter()
    .append("circle")
    .attr("cx",scaleX(0))
    .attr("cy",scaleY(0))
    .attr("r", 0)

  selection.transition().duration(1500)
      .attr("cx",getX)
      .attr("cy",getY)
      .attr("r", getR)
      .style("fill", getColor)
    .transition().delay(1500+200).duration(1500)
      .attr("r", doubleR);
}

/***********************
  Helper functions
***********************/
function getX(d)     { return scaleX(d.values.X); }
function getY(d)     { return scaleY(d.values.Y); }
function getR(d)     { return d.values.Quantity / 10; }
function doubleR(d)     { return d.values.Quantity / 5; }
function getColor(d) { return d.key; }
// Use D3 built in array functions to aggregate data
function aggregateData(d) {
  return {
    "X"       : d3.mean(d, function(e) { return +e.X; }),
    "Y"       : d3.median(d, function(e) { return +e.Y; }),
    "Quantity": d3.max(d, function(e) { return +e.Quantity; })
  };
}

drawAxes();
importData();
</script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easing Does It]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/easing-does-it/"/>
    <updated>2014-03-12T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/easing-does-it</id>
    <content type="html"><![CDATA[<p>With the possible exception of UFOs, things don&rsquo;t usually switch from being stationary to moving at maximum velocity without an intervening period of acceleration or deceleration. Similarly, it can be difficult to track elements on a web page that move from one position to another with no warning, or faster than the human eye can perceive. Enter easing functions: <!--more--></p>

<blockquote><p>&ldquo;<strong>Easing functions</strong> specify the rate of change of a parameter over time.&rdquo; &mdash;Robert Penner</p></blockquote>

<figure class='code'><figcaption><span>Easy easing</span><a href='https://gist.github.com/keighty/9508948'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">selection</span><span class="p">.</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">scaleX</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">scaleY</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="nx">selection</span><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">ease</span><span class="p">(</span><span class="s2">&quot;cubic-in-out&quot;</span><span class="p">).</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1500</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The transition will act on the selection in the following ways:</p>

<ul>
<li>it will move the element from its starting x position of 0 to the x position defined by <code>getX()</code></li>
<li>it will move the element from its starting y position of 0 to the y position defined by <code>getY()</code></li>
<li>it will increase the element&rsquo;s radius from 0 to the radius returned from <code>getR()</code></li>
<li>it will gradually change the element&rsquo;s color using an ordinal color scale, from black to the color returned from <code>getColor()</code></li>
<li>all of this movement will be performed with a &ldquo;cubic-in-out&rdquo; easing function</li>
</ul>


<p>The cubic-in-out easing function is the standard D3 easing function. The element will increase velocity by a power of 3 until halfway down the path it is destined to trace. It will then decrease velocity by a power of 3 until it reaches its final location. There are many different types of easing functions. Check out the resources for more information, and ask your doctor which easing function is right for you!</p>

<h3>Resources</h3>

<p>Robert Penner&rsquo;s <a href="http://www.robertpenner.com/easing/">Easing Functions</a></p>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Value of Slow Transitions]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/the-value-of-transition/"/>
    <updated>2014-03-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/the-value-of-transition</id>
    <content type="html"><![CDATA[<h3>The Why</h3>

<p>From <a href="http://bost.ocks.org/mike/constancy/">Object Constancy</a> by Mike Bostock:</p>

<blockquote><p>Animated transitions are pretty, but they also serve a purpose: they make it easier to follow the data. This is known as <strong>object constancy</strong>: a graphical element that represents a particular data point&hellip; can be tracked visually through the transition. This lessens the cognitive burden by using <strong>preattentive processing</strong> of motion rather than sequential scanning of labels.</p></blockquote>

<p>(The emphasis is mine)</p>

<h3>The How</h3>

<p>Object constancy is achieved through object identity: the data is bound to it&rsquo;s object by a shared unique identifier. This allows D3 to reuse the object when the data set is updated. Object identity is achieved by passing a key function to the data() method at the time of data binding:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var data = [ // &lt;-A
</span><span class='line'>        {id: 0, value: "foo"},
</span><span class='line'>        {id: 1, value: "bar"},
</span><span class='line'>        {id: 2, value: "foo"},
</span><span class='line'>        {id: 3, value: "baz"},
</span><span class='line'>        {id: 4, value: "bar"}
</span><span class='line'>    ];
</span><span class='line'>d3.selectAll("svg:g")
</span><span class='line'>    .data(data, function(d){return d.id;});</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git, What Have I Done?]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/git-what-have-i-done/"/>
    <updated>2014-03-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/git-what-have-i-done</id>
    <content type="html"><![CDATA[<p>Git, the superhero of version control, allows you to review all the commands that have modified the HEAD tag in a git repo: <code>git reflog</code></p>

<p>The output for one of my demo apps:</p>

<figure class='code'><figcaption><span>Git, you&#8217;re my hero </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>5075d26 HEAD@<span class="o">{</span>0<span class="o">}</span>: checkout: moving from master to kleonard/add_skyline_background
</span><span class='line'>531c396 HEAD@<span class="o">{</span>1<span class="o">}</span>: pull: fast forward
</span><span class='line'>435f6de HEAD@<span class="o">{</span>2<span class="o">}</span>: commit: Adds logic <span class="k">for </span>running and testing
</span><span class='line'>043e35a HEAD@<span class="o">{</span>3<span class="o">}</span>: commit: Adds logic to process input
</span><span class='line'>5155ba4 HEAD@<span class="o">{</span>4<span class="o">}</span>: commit: Adds input file
</span><span class='line'>a629871 HEAD@<span class="o">{</span>5<span class="o">}</span>: rebase finished: returning to refs/heads/kleonard/create_input_files
</span><span class='line'>a010021 HEAD@<span class="o">{</span>6<span class="o">}</span>: rebase: Add input file
</span><span class='line'>b7cd86a HEAD@<span class="o">{</span>7<span class="o">}</span>: commit: Initial commit arbitrage
</span><span class='line'>5ed00ea HEAD@<span class="o">{</span>8<span class="o">}</span>: commit: Adds launcher
</span><span class='line'>7b2d720 HEAD@<span class="o">{</span>9<span class="o">}</span>: commit: Adds logic to find smallest number of moves
</span><span class='line'>9c0dfce HEAD@<span class="o">{</span>10<span class="o">}</span>: commit: Adds implementation <span class="k">for </span>bin creation
</span></code></pre></td></tr></table></div></figure>


<p>Hmmm&hellip; looks like my commit messages need a little work&hellip; Still, it is a great tool for catching up on the changes to a repo (especially if you haven&rsquo;t touched it in a while), finding out where the bulk of the work is happening, or just reminding yourself what you did yesterday.</p>

<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transition With Style]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/transition-with-style/"/>
    <updated>2014-03-06T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/transition-with-style</id>
    <content type="html"><![CDATA[<p>Making things zoom across the page is what I used to think javascript was all about, but it wasn&rsquo;t until I started learning d3 that I found out how to make it happen.</p>

<!--more-->




<figure class='code'><figcaption><span>Simple Transition </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">duration</span> <span class="o">=</span> <span class="mi">2000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">body</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;background-color&quot;</span><span class="p">,</span> <span class="s2">&quot;white&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;margin&quot;</span><span class="p">,</span> <span class="s2">&quot;40px&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="s2">&quot;200px&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="s2">&quot;200px&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;border&quot;</span><span class="p">,</span> <span class="s2">&quot;black solid thin&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">duration</span><span class="p">(</span><span class="nx">duration</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;background-color&quot;</span><span class="p">,</span> <span class="s2">&quot;black&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;margin-left&quot;</span><span class="p">,</span> <span class="s2">&quot;600px&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="s2">&quot;100px&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="s2">&quot;100px&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>D3 is smart enough to select an appropriate scale for the property in transition. If a transitioning element is not given an explicit starting point, D3 will use the computed style. If the end value is missing, the property will be treated as a constant. In the example above, the border stays the same, as do the top and bottom margins. The only properties that change are the ones specified below the transition().</p>

<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun With Ticks]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/scales-and-ticks/"/>
    <updated>2014-03-05T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/scales-and-ticks</id>
    <content type="html"><![CDATA[<p>D3 has an awesome tick library, which makes it easy to customize an axis. I have not found any evidence of a built in function to customize tick rendering depending on if it is a major or a minor tick. One way to get around that is to render two axes, and only label one<!--more-->:</p>

<figure class='code'><figcaption><span>axes ticks </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">scaleX</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">().</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">]).</span><span class="nx">range</span><span class="p">([</span><span class="nx">margin</span><span class="p">,</span><span class="nx">width</span><span class="o">-</span><span class="nx">margin</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">svg</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span><span class="nx">width</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">xAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">scaleX</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;bottom&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">ticks</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">tickSubdivide</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">tickPadding</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">tickFormat</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span> <span class="o">+</span> <span class="s2">&quot; ticks&quot;</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">x2Axis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">scaleX</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;bottom&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">ticks</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">tickSize</span><span class="p">(</span><span class="mi">14</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">tickFormat</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(0,&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">margin</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">xAxis</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(0,&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">margin</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">x2Axis</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>TADA</h3>

<p><img src="http://www.katieleonard.ca/images/post_d3_scale_major_ticks.png"></p>

<h3>More fun with ticks</h3>

<ul>
<li><strong>orient()</strong>: set which side of the axis will be ticked and labeled</li>
<li><strong>ticks()</strong>: set the number of major ticks</li>
<li><strong>tickSubdivide()</strong>: set the number of minor ticks</li>
<li><strong>tickPadding()</strong>: set the distance between the ticks and their label</li>
<li><strong>tickFormat()</strong>: set the units to appear after the label on the major ticks</li>
<li><strong>tickSize()</strong>: specify one arg for inner ticks, another argument for outer ticks, or use outerTickSize() or innerTickSize() to specify one or the other. Outer ticks are at the ends of the scales.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[D3 Nests and Rollups]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/d3-nests-and-rollups/"/>
    <updated>2014-03-04T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/d3-nests-and-rollups</id>
    <content type="html"><![CDATA[<p>D3 provides powerful functions for manipulating raw data sets, including csv(), nest(), and rollup().</p>

<!--more-->


<p>I generated a hundred rows of test_data.csv using <a href="http://www.generatedata.com/#about">generatedata.com</a>:</p>

<figure class='code'><figcaption><span>test_data.csv</span><a href='https://gist.github.com/keighty/9348444#file-test_data-csv'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Colors,X,Y,Quantity
</span><span class='line'>violet,1,8,91
</span><span class='line'>blue,9,1,32
</span><span class='line'>blue,3,1,67
</span><span class='line'>yellow,5,5,63
</span><span class='line'>violet,6,6,57
</span><span class='line'>green,5,10,65
</span><span class='line'>red,8,2,36
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>The basic properties are a Color (one of blue, yellow, violet, green, and red), an X-value (between 1 and 10), a Y-value (also between 1 and 10), and a Quantity value (between 1 and 100).</p>

<h3>csv()</h3>

<p>You can import a raw, comma-delimited data file, and bind the data directly to an svg.</p>

<figure class='code'><figcaption><span>csv()</span><a href='https://gist.github.com/keighty/9348444'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">csv</span><span class="p">(</span><span class="s2">&quot;test_data.csv&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">csv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="nx">csv</span><span class="p">).</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.katieleonard.ca/images/post_d3_csv_data.png"></p>

<h3>nest() and rollup()</h3>

<p>You can also aggregate data on any property &mdash; just tell D3 which one, and use any of D3&rsquo;s handy utility functions (mean, median, sum, min/max, quantile, etc) to return the aggregate data you want to display. For example, I want to plot the average data for each color. I tell my D3 selection to nest the data on the color key. Then I tell the rollup function to take the average for each property of the data. Pass the new data to the svg instead of the csv, and voila</p>

<figure class='code'><figcaption><span>nest() and rollup()</span><a href='https://gist.github.com/keighty/9348540'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">csv</span><span class="p">(</span><span class="s2">&quot;test_data.csv&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">csv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">nest</span><span class="p">()</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">key</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Colors</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">rollup</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;X&quot;</span><span class="o">:</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">X</span><span class="p">;</span> <span class="p">}),</span>
</span><span class='line'>              <span class="s2">&quot;Y&quot;</span><span class="o">:</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">Y</span><span class="p">;</span> <span class="p">}),</span>
</span><span class='line'>              <span class="s2">&quot;Quantity&quot;</span><span class="o">:</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">mean</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">Quantity</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">csv</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.katieleonard.ca/images/post_d3_rollupdata_image.png"></p>

<p>D3 is so awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Technique for Producing Ideas]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/a-technique-for-producing-ideas/"/>
    <updated>2014-03-04T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/a-technique-for-producing-ideas</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/B001C34HUS/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B001C34HUS&amp;linkCode=as2&amp;tag=bridgeforpoke-20">A Technique for Producing Ideas</a> by James Webb Young (1965)</p>

<p>Young proposes that all ideas are the result of five identifiable stages of rumination, whether they are followed consciously or not:</p>

<ol>
<li>Gather information, and not just what is specific to your problem domain. Novelty comes from mashing seemingly unrelated concepts together.</li>
<li>Review the information &mdash; collate your information in some fashion and go over it. A lot.</li>
<li>Do something else. Get distracted from whatever problem you are trying to solve.</li>
<li>&ldquo;Eureka! I have it!&rdquo;</li>
<li>Refine your idea &mdash; first drafts are never perfect, so keep polishing.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling D3]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/d3-scaling/"/>
    <updated>2014-03-03T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/d3-scaling</id>
    <content type="html"><![CDATA[<p>Add scales to a d3 plot in three easy steps:</p>

<h3>1. Define the scale</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Image dimensions</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">margin</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">scaleX</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">().</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">]).</span><span class="nx">range</span><span class="p">([</span><span class="nx">margin</span><span class="p">,</span> <span class="nx">width</span><span class="o">-</span><span class="nx">margin</span><span class="p">]);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">scaleY</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">().</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">]).</span><span class="nx">range</span><span class="p">([</span><span class="nx">height</span><span class="o">-</span><span class="nx">margin</span><span class="p">,</span> <span class="nx">margin</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Draw the scale</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Image container</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">svg</span><span class="o">=</span><span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span><span class="nx">width</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Axis definition</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">xAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">scaleX</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;bottom&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">yAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">scaleY</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;left&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Axis graphics</span>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(0,&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">height</span> <span class="o">-</span> <span class="nx">margin</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">xAxis</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;axis&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="s2">&quot;translate(&quot;</span> <span class="o">+</span> <span class="nx">margin</span> <span class="o">+</span> <span class="s2">&quot;,0)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">yAxis</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Apply the scale to your data</h3>

<figure class='code'><figcaption><span>Apply the scale.</span><a href='https://gist.github.com/keighty/9327604'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">d3</span><span class="p">.</span><span class="nx">csv</span><span class="p">(</span><span class="s2">&quot;test_data.csv&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">csv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="nx">csv</span><span class="p">).</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span><span class="nx">getX</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span><span class="nx">getY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nx">getR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="nx">getColor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Apply scale to the x value</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getX</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">scaleX</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">X</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Apply scale to the y value</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getY</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">scaleY</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Y</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getR</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Quantity</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getColor</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Colors</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Dates]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/javascript-dates/"/>
    <updated>2014-03-01T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/javascript-dates</id>
    <content type="html"><![CDATA[<p>Javascript Date objects have zero indexed months but not dates.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; (new Date(2014, 0, 1)).strftime("%b %d, %Y")
</span><span class='line'>"Jan 1, 2014"
</span><span class='line'>&gt; (new Date(2013, 11, 31)).strftime("%b %d, %Y")
</span><span class='line'>"Dec 31, 2013"
</span><span class='line'>&gt; (new Date(2014, 0, 0)).strftime("%b %d, %Y")
</span><span class='line'>"Dec 31, 2013"</span></code></pre></td></tr></table></div></figure>


<p>Wat?</p>

<!--more-->


<h3>Resources</h3>

<p><a href="http://tech.bluesmoon.info/2008/04/strftime-in-javascript.html">Javascript strftime</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String Conversion in Javascript]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/to-i-in-javascript/"/>
    <updated>2014-02-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/to-i-in-javascript</id>
    <content type="html"><![CDATA[<p>Almost every day, javascript blows my mind. Today I discovered that you can convert a string to a number simply by prepending a +:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; typeof(+"this is a string")
</span><span class='line'>"number"
</span><span class='line'>&gt; typeof(+"100")
</span><span class='line'>"number"
</span><span class='line'>&gt; +"100" + 50
</span><span class='line'>150</span></code></pre></td></tr></table></div></figure>


<p>Awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Neuroscience of Programming]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/programming-and-linguistics/"/>
    <updated>2014-02-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/programming-and-linguistics</id>
    <content type="html"><![CDATA[<h3><a href="http://www.huffingtonpost.com/chris-parnin/scientists-begin-looking-_b_4829981.html">Scientists Begin Looking at Programmers&#8217; Brains: The Neuroscience of Programming</a> from The Huffington Post.</h3>

<blockquote><p>A new study provides new evidence that programmers are using language regions of the brain when understanding code and found little activation in other regions of the brain devoted to mathematical thinking.</p></blockquote>

<ul>
<li>Each programming language you learn requires expressing abstract concepts with a different syntax &mdash; and in the case of punctuation (~>, =>, :, {}, [], etc) an augmented alphabet. How is a programming language NOT like linguistics?</li>
</ul>


<blockquote><p>Besides a mathematical inclination, an exceptionally good mastery of one&rsquo;s native tongue is the most vital asset of a competent programmer. &mdash;Djikstra</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binding Functions as Data]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/binding-functions-as-data/"/>
    <updated>2014-02-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/binding-functions-as-data</id>
    <content type="html"><![CDATA[<p>Primitives and object literals are not the only things you can bind to a D3 visualization. After all, aren&rsquo;t javascript functions objects as well?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">15</span> <span class="o">+</span> <span class="nx">x</span><span class="o">*</span><span class="nx">x</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">newData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">next</span><span class="p">);</span> <span class="k">return</span> <span class="nx">data</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">selection</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#container&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">newData</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>                  <span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#span&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you provide a function to the data function, D3 will simply invoke the function and use the returned value as a parameter of the data function.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualize With Purpose]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/why-visualize/"/>
    <updated>2014-02-26T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/why-visualize</id>
    <content type="html"><![CDATA[<p>Information visualization (insight, understanding, and discovery) and information art (aesthetics) differ in their context, audience, and goals. In my exploration of D3 I came across an <a href="http://www.visualcomplexity.com/vc/blog/?p=644">Information Visualization Manifesto</a> by Manuel Lima, and this is what I have learned<!--more-->:</p>

<ul>
<li><strong>Form follows function</strong>: keep your problem domain in mind when assembling a visualization.</li>
<li><strong>Question</strong>: Drive your work through questions and curiosity.</li>
<li><strong>Interactivity</strong> is key.</li>
<li><strong>Sources</strong>: Provide access to the raw data if possible.</li>
<li><strong>Narrative</strong>: Tell a story with your data.</li>
<li><strong>Aesthetics</strong> Are a consequence of visualization, not a goal.</li>
<li><strong>Relevancy</strong>: What is the context? What patterns are discernable?</li>
<li><strong>Time</strong>: Consider time when your data is affected by it.</li>
<li><strong>Knowledge</strong>: Bring new understanding and insight.</li>
<li><strong>Ease up</strong>: Not everything can or should be visualized. Be deliberate and add to information, don&rsquo;t obfuscate with unnecessary visualizations.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implied Functions Applied]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/implied-functions-applied/"/>
    <updated>2014-02-26T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/implied-functions-applied</id>
    <content type="html"><![CDATA[<p>When binding a primitive datum to a node in a D3 visualization, the callback function can be implicitly called on the datum without the typical verbosity<!--more-->:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">data</span><span class="p">([</span><span class="mi">32</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">293</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span> <span class="mi">90</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span> <span class="nb">String</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In line 5, String() is performed on the data element, as is Math.sqrt in line 6, with the same result as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">data</span><span class="p">([</span><span class="mi">32</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">293</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;circle&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cy&quot;</span><span class="p">,</span> <span class="mi">90</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;cx&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;r&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; but better.</p>

<p>Awesome.</p>

<h3>Resources</h3>

<p><a href="http://mbostock.github.io/d3/tutorial/circle.html">Three Little Circles D3 Tutorial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enter Update Exit]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/enter-update-exit/"/>
    <updated>2014-02-25T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/enter-update-exit</id>
    <content type="html"><![CDATA[<p>D3 is a data visualization tool that uses method chaining to produce big pictures with little code. The selection library performs a full Outer Join between the data (D) and the visual elements (V), and the enter-update-exit pattern performs work on subsets of this join<!--more-->:</p>

<h3>UPDATE: Inner Join (D union V)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>selection.data(data_points)</span></code></pre></td></tr></table></div></figure>


<p>data() binds data_points to the html or svg elements returned by the selection and returns the data not visualized.</p>

<h3>ENTER: Left excluding join (D/V)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>selection.data(data_points).enter()</span></code></pre></td></tr></table></div></figure>


<p>enter() returns data_points that are not yet represented visually by html or svg. Chain .append() to add a new element to the page.</p>

<h3>EXIT: Right excluding join (V/D)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>selection.data(data_points).exit()</span></code></pre></td></tr></table></div></figure>


<p>exit() returns html or svg elements that no longer have data associated with them. Chain .remove() to eliminate them, or .translate() to make them slide off the page.</p>

<h3>Resources</h3>

<p><a href="http://www.amazon.com/gp/product/178216216X/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=178216216X&amp;linkCode=as2&amp;tag=bridgeforpoke-20">Data Visualization with D3.js Cookbook</a> (affiliate link)</p>

<p><a href="http://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins">Visual Representation of SQL Joins</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[D3 Is Selective]]></title>
    <link href="http://www.katieleonard.ca/blog/2014/d3-is-selective/"/>
    <updated>2014-02-21T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2014/d3-is-selective</id>
    <content type="html"><![CDATA[<p>D3 uses the W3C standard selector library, and selection modifiers work on both single and multiple element selections, and will automatically apply the modifier iteratively over the entire collection, which makes your code simpler and easier to maintain.</p>

<!--more-->


<h4>Selection modifiers</h4>

<ul>
<li><strong>d3.select(&lsquo;p&rsquo;).text()</strong>     : retrieve or modify text</li>
<li><strong>d3.select(&lsquo;p&rsquo;).attr()</strong>     : retrieve or modify a given attribute</li>
<li><strong>d3.select(&lsquo;p&rsquo;).classed()</strong>  : retrieve or modify css classes</li>
<li><strong>d3.select(&lsquo;p&rsquo;).style()</strong>    : retrieve or modify styles</li>
<li><strong>d3.select(&lsquo;p&rsquo;).html()</strong>     : retrieve or modify a selections inner html (like text but with tags)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d3.selectAll('div')
</span><span class='line'>            .attr("class", "alert")
</span><span class='line'>            .each(function(d, i) {
</span><span class='line'>              d3.select(this).append("h1").text(i);
</span><span class='line'>            });</span></code></pre></td></tr></table></div></figure>


<p>Selections are essentially arrays with some extra variables baked in. The <code>.each</code> call on line 3 treats the selected elements as an array, and performs a function on each one. The extra variables provided to the iterator function for free are: the data bound to the element (d), the index of the element, and the element itself (this).</p>

<p>Awesome</p>
]]></content>
  </entry>
  
</feed>
