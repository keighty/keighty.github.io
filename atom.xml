<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[keighty]]></title>
  <link href="http://www.katieleonard.ca/atom.xml" rel="self"/>
  <link href="http://www.katieleonard.ca/"/>
  <updated>2015-12-26T16:41:29-08:00</updated>
  <id>http://www.katieleonard.ca/</id>
  <author>
    <name><![CDATA[katie leonard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keighty's 2015 - by the Numbers]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/keightys-2015-by-the-numbers/"/>
    <updated>2015-12-26T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/keightys-2015-by-the-numbers</id>
    <content type="html"><![CDATA[<p>2015 has been a very eventful year. Not only did I write and launch an ebook about my code school experience, but I have also built and launched a book site, competed in a national <a href="acbl.com">Bridge</a> tournament in New Orleans, celebrated 10 years of wedded bliss with <a href="http://virtual-playbill.herokuapp.com/about">Krista Garver</a>, spent 3 weeks traveling in the Mediterranean, and joined a new team at work where I get to deep-dive into JavaScript and browsers. Checkout my <a href="http://katieleonard.ca/images/151226-year-in-review/2015-year-in-review-infographic.png">infographic</a> for more!<!--more--></p>

<p><img src="http://www.katieleonard.ca/images/151226-year-in-review/2015-year-in-review-infographic.png"></p>

<h4>RESOURCES</h4>

<p>Interested in making your own infographic? Try <a href="http://www.canva.com/">canva</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faster Asset Loading With Cache-Control]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/faster-asset-loading-with-cache-control/"/>
    <updated>2015-11-27T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/faster-asset-loading-with-cache-control</id>
    <content type="html"><![CDATA[<p>My side project (Virtual Playbill) is an image-heavy application, and I used YSlow to find a few quick performance wins. The first &lsquo;F&rsquo; I got was for No Expires Headers:</p>

<p><img src="http://www.katieleonard.ca/images/151127-cache-control/add-expires-headers.png"></p>

<h3>What is an Expires Header?</h3>

<p>Loading the page requires slow and expensive network calls to download all the JavaScript, CSS, and image files. If someone visits the page more than once, I can avoid using the network by storing a local copy of the files in their browser cache &mdash; temporary local storage that is designed for quick retrieval. I can tell the browser to cache a copy of files that don&rsquo;t change very often by setting Expires headers.</p>

<!--more-->


<p>When a web server receives a request it adds some metadata to the response in the form of HTTP headers. Headers are key-value pairs that tell the browser information about the file it has received, such as how big it is (<code>Content-Length</code>), what kind it is (<code>Content-Type</code>), and how long the browser should cache the response (<code>Cache-Control</code>).</p>

<p>In the case of Virtual Playbill, all the images are served from AWS Simple Storage Service (S3), and there are a couple of ways to add headers.</p>

<h3>1. Tedious Manual Addition</h3>

<p>You can add headers manually to a single asset stored in S3 using the metadata section:
<img src="http://www.katieleonard.ca/images/151127-cache-control/add-metadata-in-s3-0.png">
<img src="http://www.katieleonard.ca/images/151127-cache-control/add-metadata-in-s3-1.png">
<img src="http://www.katieleonard.ca/images/151127-cache-control/add-metadata-in-s3-2.png"></p>

<p>But I have more than a hundred files to change (yawn).</p>

<h3>2. Write a Nodejs Script using <code>aws-sdk</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">aws</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;aws-sdk&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aws</span><span class="p">.</span><span class="nx">S3</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;Your_bucket_name&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">s3</span><span class="p">.</span><span class="nx">listObjects</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Something went wrong when retrieving the list of objects: &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">Contents</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">image</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Key</span> <span class="p">}))</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">imageList</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">collectImageParams</span><span class="p">(</span><span class="nx">imageList</span><span class="p">)</span>
</span><span class='line'><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">imageChangeParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">imageChangeParams</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">s3</span><span class="p">.</span><span class="nx">copyObject</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Oops! Something went wrong with copy/replace for &quot;</span> <span class="o">+</span> <span class="nx">params</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Duplicating a file in S3 will change the metadata.</span>
</span><span class='line'><span class="c1">// You can make sure the new file has the same</span>
</span><span class='line'><span class="c1">// access control by passing through the right permissions</span>
</span><span class='line'><span class="c1">// and ContentType along with the new CacheControl header</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">collectImageParams</span><span class="p">(</span><span class="nx">imageList</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">imageList</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">imageName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">imageParams</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;Bucket&#39;</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">Bucket</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;ACL&#39;</span><span class="o">:</span> <span class="s1">&#39;public-read&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;MetadataDirective&#39;</span><span class="o">:</span> <span class="s1">&#39;REPLACE&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;CacheControl&#39;</span><span class="o">:</span> <span class="s1">&#39;max-age=2592000&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;ContentType&#39;</span><span class="o">:</span> <span class="s1">&#39;image/jpeg&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">imageParams</span><span class="p">.</span><span class="nx">Key</span> <span class="o">=</span> <span class="nx">imageName</span>
</span><span class='line'>    <span class="nx">imageParams</span><span class="p">.</span><span class="nx">CopySource</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">imageParams</span><span class="p">.</span><span class="nx">Bucket</span> <span class="o">+</span><span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">imageParams</span><span class="p">.</span><span class="nx">Key</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">imageParams</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Still.. I don&rsquo;t want to have to run this script every time I upload a new file (yawn)&hellip;</p>

<h3>3. Add Headers Every Time You Upload</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">S3Upload</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">uploadToS3</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">public_url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">this_s3upload</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">this_s3upload</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">xhr</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">createCORSRequest</span><span class="p">(</span><span class="s1">&#39;PUT&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="nx">file</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;x-amz-acl&#39;</span><span class="p">,</span> <span class="s1">&#39;public-read&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Set the Cache-Control header for every file upload</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;Cache-Control&#39;</span><span class="p">,</span> <span class="s1">&#39;max-age=2592000&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Great Results</h3>

<p>No matter how you add the Cache-Control header, the result is amazing:
<img src="http://www.katieleonard.ca/images/151127-cache-control/cache-control.png"></p>

<h3>Resources</h3>

<p>For more information about HTTP headers and the browser cache, check out these useful resources:</p>

<ul>
<li><a href="http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/">Beginners Guide to HTTP Cache Headers</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=en">Optimizing Content Efficiency Using HTTP Caching</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Object Property Meta Properties]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/javascript-object-property-meta-properties/"/>
    <updated>2015-11-07T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/javascript-object-property-meta-properties</id>
    <content type="html"><![CDATA[<p>JavaScript Objects are complex types, and even defined properties have a control panel of their own. You can view the content of the control panel using <code>Object.getOwnPropertyDescriptor()</code>, and flip their switches using <code>Object.defineProperty()</code>. <!--more--></p>

<blockquote><p>Note: These property descriptors are for <code>own properties</code> &mdash; that is, properties that are directly defined on an object, not those that come along for the ride on the object&rsquo;s prototype chain.</p></blockquote>

<h3>The property descriptor holds meta data</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; var me = {
</span><span class='line'>  name: "Katie"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>&gt; Object.getOwnPropertyDescriptor( me, "name" )
</span><span class='line'>{
</span><span class='line'>  value: "Katie", // the value associated with the property
</span><span class='line'>  writable: true,   // true if the value of the property can be changed
</span><span class='line'>  enumerable: true, // true if the property shows up during enumeration of the properties
</span><span class='line'>  configurable: true // true if any of these meta properties can be changed
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Change the property value</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Object.defineProperty( me, "name", {
</span><span class='line'>  value: "keighty"
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>me.name // "keighty"</span></code></pre></td></tr></table></div></figure>


<h3>Make the property read only</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Object.defineProperty(me, "name", {
</span><span class='line'>  writable: false
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>me.name = "k80"
</span><span class='line'>me.name  //"keighty" -- actual value of me.name did not change</span></code></pre></td></tr></table></div></figure>


<h3>Make the property hidden from for-loops (or any enumeration)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>me.hobbies = ["bridge", "curling", "tap dancing"]
</span><span class='line'>me // Object {hobbies: Array[3], name: "keighty"}
</span><span class='line'>
</span><span class='line'>for(fact in me) {
</span><span class='line'> console.log(fact)
</span><span class='line'>}
</span><span class='line'>// All the properties defined on me are written to the console:
</span><span class='line'>// name
</span><span class='line'>// hobbies
</span><span class='line'>
</span><span class='line'>Object.defineProperty(me, "name", {
</span><span class='line'> enumerable: false
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>for(fact in me) {
</span><span class='line'> console.log(fact)
</span><span class='line'>}
</span><span class='line'>// Actually.. only enumerable properties are written to the console:
</span><span class='line'>// hobbies</span></code></pre></td></tr></table></div></figure>


<h3>Freeze the property</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Object.defineProperty(me, "name", {
</span><span class='line'> configurable: false
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>Object.getOwnPropertyDescriptor(me, "name")
</span><span class='line'>// { value: "keighty",
</span><span class='line'>//   writable: false,
</span><span class='line'>//   enumerable: false,
</span><span class='line'>//   configurable: false }
</span><span class='line'>
</span><span class='line'>Object.defineProperty(me, "name", {
</span><span class='line'> writable: true
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>Uncaught TypeError: Cannot redefine property: name(…)</span></code></pre></td></tr></table></div></figure>


<p>From <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-8.10">the docs</a>: &ldquo;The Property Descriptor type is used to explain the manipulation and reification of named property attributes. Use Object.defineProperty for fine-grained control over the visibility and mutability of your object&rsquo;s properties.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estimate != Commitment != Target]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/software-estimation-is-hard/"/>
    <updated>2015-10-31T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/software-estimation-is-hard</id>
    <content type="html"><![CDATA[<p>Software estimation is hard, but I didn&rsquo;t really understand why until I started reading <a href="http://www.amazon.com/Software-Estimation-Demystifying-Developer-Practices/dp/0735605351">Software Estimation: Demystifying the Black Art</a> by Steve McConnell. It was published in 2006, and is very much still relevant &mdash; there are more ways to do estimation wrong than to do it right.</p>

<p>The biggest &ldquo;aha&rdquo; moment for me was learning the difference between estimates, targets, and commitments. <!--more-->I always thought that estimates were commitments and treated them like targets. If a task took longer than my estimate, I would worry that I had blown the project plan. The source of my stress was really semantics, and a deep misunderstanding of project plans in general.</p>

<h4>1. An estimate is a range where there is a 90% chance of finding the completion date</h4>

<p>An estimate is not a single point in time &mdash; that is a target. There is uncertainty in software development, and uncertainty about the uncertainty.</p>

<blockquote><p>There is a limit to how well a project can go but no limit to how many problems can occur.</p></blockquote>

<p>Estimates are probability distrubutions of possible outcomes:</p>

<p><img class="left" src="http://www.katieleonard.ca/images/151031-software-estimation/estimation-chart.png"></p>

<p>Most of my experience in estimating projects has been to break a feature down into small tasks and estimate those. Tightly defined requirements for a task make it easier to estimate, but there are always complications that can throw things off track. Thinking about an estimate as a range of possibilities between the best and worst case scenarios reduces stress about being right the first time.</p>

<h4>2. A commitment is a promise to deliver defined functionality at a certain level of quality at a certain date.</h4>

<p>You can use estimates to plan commitments, but not the other way around. If ten features take a year to develop, but your customer needs to have something in six months, you can commit to delivering four or five features by that target, but there is no way you can deliver ten.</p>

<h4>3. A target is a single point in time, and is usually determined by business needs.</h4>

<p>A target has more in common with a commitment than an estimate &mdash; it can have no bearing on the time estimated to complete a project, but will often define the envelope of time. Like in the previous example, the target for delivery to the customer was six months, but the commitment could be four or five features, depending on the estimates for each feature.</p>

<p>Estimation must come before planning, and before you really understand all of the requirements for the project. More often than not, events that happen during the project will have a big impact on the assumptions made to estimate the project at the beginning. Estimates are hard, but McConnell has some awesome advice on how to get it right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Clean Coder]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/the-clean-coder/"/>
    <updated>2015-09-26T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/the-clean-coder</id>
    <content type="html"><![CDATA[<p>In <a href="http://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr_1_1?ie=UTF8&amp;qid=1443288322&amp;sr=8-1&amp;keywords=the+clean+coder">The Clean Coder: A Code of Conduct for Professional Programmers</a>, Bob Martin (Uncle Bob) tells you what it means to be a professional programmer. Much of what distinguishes a professional from a non-professional can be reduced to responsibility: a professional is responsible for their project, their team, and their own career. <!--more--></p>

<p><a href="http://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073/ref=sr_1_1?ie=UTF8&amp;qid=1443288322&amp;sr=8-1&amp;keywords=the+clean+coder"><img class="left" src="http://www.katieleonard.ca/images/150926-clean-coder/cleancoder.jpg"></a></p>

<h2>Protect your projects</h2>

<p>Your first responsibility, according to Uncle Bob, is to your employer, which means doing the job that you have been hired to do.</p>

<ul>
<li><p><strong>Make reasonable estimates.</strong> Your project does not exist in isolation from other parts of the company. An estimate is a probability distribution of likely outcomes, not a single point in time. Many stakeholders rely on your estimates for coordinating marketing, sales, and other downstream tasks.</p></li>
<li><p><strong>Meet your commitments.</strong> Estimates are different from commitments. If you have committed to delivering a feature or a product by a target date, meet that date.</p></li>
</ul>


<blockquote><p>If it can&rsquo;t be done, you can still commit to actions that will bring you closer to the target. Finding out if it can be done can be one of the actions to commit to!</p></blockquote>

<ul>
<li><strong>Protect your time.</strong> An easy way to ensure the success of your project is to devote the time and energy you have already promised in your estimates. Meetings can be disruptive to your workflow, and you should decline any meeting that does not move your project forward. If you can&rsquo;t decline, ask for an agenda and clear goals before you accept.</li>
</ul>


<blockquote><p>Sometimes the meeting will be about something that interests you, but is not immediately necessary. You will have to choose whether you can afford the time. Be careful — there may be more than enough of these meetings to consume your days.</p></blockquote>

<h2>Protect your team</h2>

<blockquote><p>A team-player communicates frequently, keeps an eye out for his or her teammates, and executes his or her own responsibilities as well as possible.</p></blockquote>

<ul>
<li><strong>Stand by your original estimates</strong>, and don&rsquo;t confuse them with commitments. Your estimates should protect your team from long hours, undue management pressure, and unpleasant surprises. Don&rsquo;t promise what your team can&rsquo;t deliver.</li>
</ul>


<blockquote><p>Business likes to view estimates as commitments. Developers like to view estimates as guesses. The difference is profound.</p></blockquote>

<ul>
<li><strong>Mentor less experienced engineers.</strong> Contributing to the growth of everyone will make your team stronger. Don&rsquo;t wear your headphones to cut yourself off from interruptions. Making yourself available as a resource will get someone else on the team unstuck, which moves your project forward (Uncle Bob recommends using TDD instead of the Zone to pick up the stack if you have to drop it). “It is unprofessional to be a loner or a recluse on a team.&#8221;</li>
</ul>


<h2>Protect your career</h2>

<p>Your employer is not responsible for keeping your skills up to date. They are not required to ensure that you are aware of cutting edge technologies and languages.</p>

<blockquote><p>Your career is your responsibility. It is not your employer&rsquo;s responsibility to make sure you are marketable. It is not your employer&rsquo;s responsibility to train you, or to send you to conferences, or to buy you books. These things are your responsibility. Woe to the software developer who entrusts his career to his employer.</p></blockquote>

<ul>
<li><strong>Practice coding.</strong> Uncle Bob is a big proponent of practicing code. Performing code kata before starting work will put you in the right frame of mind.</li>
</ul>


<blockquote><p>Professionals practice. True professionals work hard to keep their skills sharp and ready. It is not enough to simply do your daily job and call that practice. Doing your job is daily performance, not practice. Practice is when you specifically exercise your skills outside of the performance of your job for the sole purpose of refining and enhancing those skills.</p></blockquote>

<ul>
<li><strong>Learn about the industry.</strong> Falling behind in new technologies will make you obsolete. You will not stay marketable to new employers (or even your current employer), if you do not stay current.</li>
</ul>


<p>Reading The Clean Coder was like sitting down with a mentor and asking how I can grow my career. I would recommend it for anyone entering the profession today!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep Your Code Close and Your Notes Closer With a Global Gitignore]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/keeping-your-notes-close-to-the-code/"/>
    <updated>2015-09-18T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/keeping-your-notes-close-to-the-code</id>
    <content type="html"><![CDATA[<p>I like to keep my notes as close to the code as possible. When I start on a new code base, I create a folder at the top called <code>aa_notes</code>. Super obvious, and it makes an awesome scratch pad for things I don&rsquo;t want to lose. So, how can you do this without checking your folder in to source control? Adding it to a local .gitignore is one strategy, but that change will also need to be checked in to git.</p>

<!--more-->


<p>The answer is to use a global gitgnore.</p>

<p>You can configure a global gitignore file in your home directory that will ignore items in every repo on your machine.</p>

<h3>1. Add a folder to your source control</h3>

<p><img src="http://www.katieleonard.ca/images/150918-keep-your-notes-close/add_note_folder.png"></p>

<h3>2. Create a file and git will suggest to track it</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  virtualplaybill2 git:(master) touch aa_notes/this_is_a_note_file.md
</span><span class='line'>➜  virtualplaybill2 git:(master) ✗ git status
</span><span class='line'>On branch master
</span><span class='line'>Your branch is up-to-date with 'origin/master'.
</span><span class='line'>Untracked files:
</span><span class='line'>  (use "git add file..." to include in what will be committed)
</span><span class='line'>
</span><span class='line'>        aa_notes/
</span><span class='line'>
</span><span class='line'>nothing added to commit but untracked files present (use "git add" to track)</span></code></pre></td></tr></table></div></figure>


<h3>3. Set up your global gitignore</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  virtualplaybill2 git:(master) ✗ git config --global core.excludesfile ~/.gitignore_global
</span><span class='line'>➜  virtualplaybill2 git:(master) ✗ echo "aa_notes" &gt; ~/.gitignore_global</span></code></pre></td></tr></table></div></figure>


<h3>4. Git will ignore all folders on your machine named aa_notes</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  virtualplaybill2 git:(master) ✗ git status
</span><span class='line'>On branch master
</span><span class='line'>Your branch is up-to-date with 'origin/master'.
</span><span class='line'>nothing to commit, working directory clean</span></code></pre></td></tr></table></div></figure>


<p>This comes in super handy when you want to make clarifying notes to yourself without sharing them with all of your collaborators. Of course, if they are good things to share, you should probably add them to the project wiki.</p>

<p>I keep things like daily <a href="https://www.safaribooksonline.com/blog/2014/06/26/information-flow/">infobits</a>, backdoor patches, bits of scripts, and other things. Sometimes writing a note about something helps me remember it a little better, so I still keep my own notes, even if the info is already on the wiki.</p>

<p>Checkout <a href="https://help.github.com/articles/ignoring-files/">this post on GitHub</a> for this and more ideas for fine tuning what git ignores.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hunting Monkey Patches]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/hunting-monkey-patches/"/>
    <updated>2015-08-08T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/hunting-monkey-patches</id>
    <content type="html"><![CDATA[<p>Ruby monkeypatching is a dangerous, but necessary tool. It is convenient to add new behaviours to  existing classes, or to replace existing methods with more customized or secure code. Once the patch is in place, however, it is easy to forget that it is there.</p>

<p>Recently, I was trying to discern the origin of such a patch, and discovered a new (to me) function in pry, my favourite Ruby debugger: <code>show-source</code>.</p>

<!--more-->


<ol>
<li>Put a <code>binding pry</code> below the monkeypatch so that it can be caught at boot time</li>
<li>Use <code>cd</code> to change directories into the reopened class</li>
<li>Use <code>show-source</code> to find the exact location where the method was originally defined</li>
<li>Use <code>show-source -a</code> to show the source and location of EVERY MONKEYPATCH</li>
</ol>


<p>In action:</p>

<h4>1. Debug your code at boot time</h4>

<p><img src="http://www.katieleonard.ca/images/150808-hunting-monkey-patches/step1-pry.png"></p>

<h4>2. Reopen the class</h4>

<p><img src="http://www.katieleonard.ca/images/150808-hunting-monkey-patches/step2-cd.png"></p>

<h4>3. Use &lsquo;show-source&rsquo;</h4>

<p><img src="http://www.katieleonard.ca/images/150808-hunting-monkey-patches/step3-show-source.png"></p>

<h4>4. Use &lsquo;show-source -a&rsquo;</h4>

<p><img src="http://www.katieleonard.ca/images/150808-hunting-monkey-patches/step4-show-source-a1.png">
<img src="http://www.katieleonard.ca/images/150808-hunting-monkey-patches/step4-show-source-a2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Count Your Chickens if They Are ActiveRecord Objects]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/dont-count-your-chickens-if-they-are-active-record-objects/"/>
    <updated>2015-05-07T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/dont-count-your-chickens-if-they-are-active-record-objects</id>
    <content type="html"><![CDATA[<p>You may believe that <code>#length</code>, <code>#size</code>, and <code>#count</code> are fairly equivalent:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>irb(main):002:0&gt; yourRubyChickens =  %w{ Chantecler RedShaver RhodeIslandRed }
</span><span class='line'>=&gt; ["Chantecler", "RedShaver", "RhodeIslandRed"]
</span><span class='line'>irb(main):003:0&gt; yourRubyChickens.length
</span><span class='line'>=&gt; 3
</span><span class='line'>irb(main):004:0&gt; yourRubyChickens.size
</span><span class='line'>=&gt; 3
</span><span class='line'>irb(main):005:0&gt; yourRubyChickens.count
</span><span class='line'>=&gt; 3</span></code></pre></td></tr></table></div></figure>


<p>But, beware of <code>#count</code> in Rails!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1] pry(main)&gt; yourRailsChickens = Chicken.all
</span><span class='line'>  Chicken Load (2.1ms)  SELECT "chickens".* FROM "chickens"
</span><span class='line'>=&gt; [#&lt;ChanteclerChicken:0x007f98eafcd6d8
</span><span class='line'>  id: 1,
</span><span class='line'>  type: "ChanteclerChicken",
</span><span class='line'>  color: "white",
</span><span class='line'>  created_at: Thu, 07 May 2015 14:36:36 UTC +00:00,
</span><span class='line'>  updated_at: Thu, 07 May 2015 14:36:36 UTC +00:00&gt;,
</span><span class='line'> #&lt;RedShaverChicken:0x007f98e63a9428
</span><span class='line'>  id: 2,
</span><span class='line'>  type: "RedShaverChicken",
</span><span class='line'>  color: "white",
</span><span class='line'>  created_at: Thu, 07 May 2015 14:37:01 UTC +00:00,
</span><span class='line'>  updated_at: Thu, 07 May 2015 14:37:01 UTC +00:00&gt;,
</span><span class='line'> #&lt;RedShaverChicken:0x007f98e63a9248
</span><span class='line'>  id: 3,
</span><span class='line'>  type: "RedShaverChicken",
</span><span class='line'>  color: "black",
</span><span class='line'>  created_at: Thu, 07 May 2015 14:37:25 UTC +00:00,
</span><span class='line'>  updated_at: Thu, 07 May 2015 14:37:25 UTC +00:00&gt;,
</span><span class='line'> #&lt;RedShaverChicken:0x007f98e63a9068
</span><span class='line'>  id: 4,
</span><span class='line'>  type: "RedShaverChicken",
</span><span class='line'>  color: "red",
</span><span class='line'>  created_at: Thu, 07 May 2015 14:37:35 UTC +00:00,
</span><span class='line'>  updated_at: Thu, 07 May 2015 14:37:35 UTC +00:00&gt;,
</span><span class='line'> #&lt;RedShaverChicken:0x007f98e63a8e88
</span><span class='line'>  id: 5,
</span><span class='line'>  type: "RedShaverChicken",
</span><span class='line'>  color: "white",
</span><span class='line'>  created_at: Thu, 07 May 2015 14:37:53 UTC +00:00,
</span><span class='line'>  updated_at: Thu, 07 May 2015 14:37:53 UTC +00:00&gt;]
</span><span class='line'>
</span><span class='line'>[2] pry(main)&gt; yourRailsChickens.length
</span><span class='line'>=&gt; 5
</span><span class='line'>[3] pry(main)&gt; yourRailsChickens.size
</span><span class='line'>=&gt; 5
</span><span class='line'>[4] pry(main)&gt; yourRailsChickens.count
</span><span class='line'>   (0.2ms)  SELECT COUNT(*) FROM "chickens"
</span><span class='line'>=&gt; 5</span></code></pre></td></tr></table></div></figure>


<p><code>#size</code> and <code>#length</code> are largely equivalent, but <code>#count</code> issues an additional query to the database that can seriously damage performance for the unsuspecting developer.</p>

<p>For more info, checkout the docs for <a href="http://www.rubydoc.info/docs/rails/4.0.0/ActiveRecord/Calculations:count">count</a> and <a href="http://www.rubydoc.info/docs/rails/4.0.0/ActiveRecord/Associations/CollectionAssociation:length">length</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Local Load Balancing]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/local-load-balancing/"/>
    <updated>2015-04-22T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/local-load-balancing</id>
    <content type="html"><![CDATA[<p>You can mimic the end-user&rsquo;s UI experience accurately enough by running application code locally, but what about the backend? Once your code is deployed to production, requests will be divided between dozens of servers. If there is variation in the code paths running on each server (like during a feature rollout, for example), it is useful to determine beforehand if there are any dangerous conflicts. Enter local load-balancing.</p>

<!--more-->


<p><a href="http://nginx.org/en/">NGiNX</a> is load balancing software that distributes requests across multiple servers, and it&rsquo;s easy to get running quickly.</p>

<h3>Installation</h3>

<p>You can download and compile from source at <a href="http://nginx.org/en/download.html">NGiNX.org</a>, or use <code>brew install nginx</code> on MacOS-X.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  api_playground  brew install nginx
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>The default port has been <span class="nb">set </span>in /usr/local/etc/nginx/nginx.conf to 8080 so that nginx can run without sudo.
</span><span class='line'>
</span><span class='line'>To have launchd start nginx at login:
</span><span class='line'>    ln -sfv /usr/local/opt/nginx/*.plist ~/Library/LaunchAgents
</span><span class='line'>Then to load nginx now:
</span><span class='line'>    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist
</span><span class='line'>Or, <span class="k">if </span>you don<span class="err">&#39;</span>t want/need launchctl, you can just run:
</span><span class='line'>    nginx
</span></code></pre></td></tr></table></div></figure>


<p>Start the server with the command <code>nginx</code>.</p>

<h3>Configuration</h3>

<p>Your NGiNX installation added a config file: <code>/usr/local/etc/nginx/nginx.conf</code>. It is mostly commented configuration examples, so you can simply replace the current <code>server</code> configuration block with this:</p>

<figure class='code'><figcaption><span>/usr/local/etc/nginx/nginx.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>upstream myapp1 {
</span><span class='line'>  server localhost:3000;
</span><span class='line'>  server localhost:3030; #add as many servers as you want here
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>server {
</span><span class='line'>  listen 8080;
</span><span class='line'>  server_name localhost;
</span><span class='line'>  location / {
</span><span class='line'>    proxy_pass http://myapp1;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Reload your NGiNX server with <code>nginx -s reload</code>, and hit <a href="localhost:8080">localhost:8080</a> to ensure you have configured it correctly.</p>

<p><img src="http://www.katieleonard.ca/images/150421-local-loadbalancing/welcome_nginx.png"></p>

<h3>Start your servers</h3>

<p>NGiNX is configured and listening on ports 3000 and 3030. Now we just have to connect some servers!</p>

<p><strong>Server 1</strong>: <code>bundle exec rails server -p 3030</code></p>

<p><strong>Server 2</strong>: <code>bundle exec rails server -p 3000 --pid tmp/pids/server2.pid</code></p>

<blockquote><p>Pro-tip: The Rails server stores its process id in a temporary file (<code>/tmp/pids/server.pid</code>), and will complain if you start another server unless you specify a new temporary pid file.</p></blockquote>

<p>Check your progress by hitting localhost:8080:</p>

<p><img src="http://www.katieleonard.ca/images/150421-local-loadbalancing/load_balancing.png"></p>

<p>Checkout the <a href="http://nginx.org/en/docs/http/load_balancing.html">docs</a> for more examples of nginx configuration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Else You Can Do After Code School]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/what-else-you-can-do-after-code-school/"/>
    <updated>2015-04-16T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/what-else-you-can-do-after-code-school</id>
    <content type="html"><![CDATA[<p>Learning to program at a code school is a great opportunity to acquire new skills, and to make your current skills relevant in tech. Becoming a software developer is the most common goal, but there is a wide variety of roles that technical people can play in software that aren&rsquo;t about writing code. Whether you have left a job in customer service, teaching, or research, the skills you gained in your last career will help you fill a niche in your new one. Here are a few paths in tech that don&rsquo;t involve writing software, but do require some experience with coding, frameworks, and methodologies.</p>

<!--more-->


<h3>Product Manager</h3>

<h5>Code School + Business Management</h5>

<p>As a product manager (aka product owner), you decide what features to build by studying the market and learning your customers&#8217; needs. The result of your research is a product road map and business strategy for the next year and beyond. Field experience is essential to making good business decisions.</p>

<h3>Project Manager</h3>

<h5>Code School + Project Management</h5>

<p>A project manager follows the product road map feature by feature. In this role you will be responsible for marshalling resources and delivering product. Excellent communication skills are a must, as is a technical familiarity with the system under construction. You need to ask the right questions, identify risks, validate estimates, and eliminate blockers.</p>

<h3>Engineering Manager</h3>

<h5>Code School + Project Management + People Management</h5>

<p>High-functioning teams do not manifest by chance &mdash; they are the result of deliberate choices made at the intersection of project needs, culture fit, and career growth. As an engineering manager, you don&rsquo;t just assemble the team. You also schedule projects, implement (or remove) processes, grow careers, and communicate up and down the management chain. In addition to all of these tasks, you must be familiar with the job the team is performing.</p>

<h3>Technical Writer</h3>

<h5>Code School + Written Communication Skills</h5>

<p>Writing technical specs and documentation will require all of your technical knowledge as well as language, teaching, and research skills. The technical writing field is expected to grow enormously in the next 10 years<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, and delivering web-based product support will be par for the course. Use your new coding skills to build documentation websites and forums, as well as generate useful content.</p>

<h3>Technical Support</h3>

<h5>Code School + Customer Service</h5>

<p>Technical support is growing at a similar pace to technical writing. Helping users interact successfully with a product is essential to their happiness, and companies have a vested interest in troubleshooting where these interactions go wrong. You act as liaison between the end user and the development and management teams by reporting and triaging bugs, working with developers to resolve issues, and communicating with internal customers as well as external ones.</p>

<h3>Quality Assurance Engineer</h3>

<h5>Code School + Product Knowledge</h5>

<p>As a QA engineer, you are a product expert, not a tester. You understand the way users interact with the product and how the features interact with each other. You can reveal blind spots in design and edge cases of user experience that will catch a feature engineer unawares. Combining attention to detail with a holistic view of the system, QA engineers ensure that users continue to trust the product you are delivering.</p>

<p>Not everyone leaves code school with a passion for building software, but everyone does leave with the skills they need to have an awesome career in tech. No education or experience is wasted, so don&rsquo;t forget to leverage your current skill set as you are learning a new one.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Bureau of Labour Statistics: <a href="http://www.bls.gov/ooh/media-and-communication/technical-writers.htm">Technical Writers</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Your Foot in the Door]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/get-your-foot-in-the-door/"/>
    <updated>2015-04-12T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/get-your-foot-in-the-door</id>
    <content type="html"><![CDATA[<p>Many people have asked me what it is like on the other side of code school, and if there is any advice I would give to someone before they get their first programming job. Technical ability, problem solving, and communication skills are all essential to success as a developer, and your online presence is a way to demonstrate all three. Getting your foot in the door requires having something to show &mdash; keeping your foot in the door requires a little bit more.</p>

<!--more-->


<h3>Have something to show</h3>

<p>Not every developer spends every waking moment working on open source projects or inventing the next big framework. We all have lives, families, and other pursuits that take priority; <img class="left" src="http://www.katieleonard.ca/images/150412-getting-a-job/octocat2.png" width="300" title="Octocat from www.github.com" >however, experienced programmers likely have solid work-related contributions they can point to during an interview. First-timers need some proof that they can apply what they learn. Side projects show potential employers what you are learning, and that you are interested in programming, not just the salary it comes along with.</p>

<p>Create a <a href="https://github.com/">GitHub</a> account. If you are in code school, you are likely already working towards a portfolio of apps and widgets to show off during an interview. If you are considering code school, this is something you should not wait to do. When you work through a tutorial, commit it to GitHub, give it a README, and include what you are working through and why.</p>

<h3>Start filling your toolbox</h3>

<p>You can usually assemble a piece of Ikea furniture with only an allen key, but what about that desk drawer that suddenly calls for a screwdriver? Completing the task requires the right tools for the job, and your ability to solve a programming problem is no different. Git, Chrome Developer Tools, and Pry are part of the the Swiss Army knife for any web developer.
<img class="right" src="http://www.katieleonard.ca/images/150412-getting-a-job/toolbox.jpg" width="300" title="Fill your toolbox." ></p>

<ul>
<li><p><a href="http://git-scm.com/"><strong>Git</strong></a> is like &ldquo;track changes&rdquo; for source code. The docs describe it as a series of snapshots of your code base. &ldquo;Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to <a href="" title="[Getting started with git](http://git-scm.com/book/en/v2/Getting-Started-Git-Basics)">it</a>.&rdquo; Source control allows you to work in the same code base with other developers and not step on one another&rsquo;s toes. Start with <a href="http://gitimmersion.com/">Git Immersion</a> for some practical experience.</p></li>
<li><p><a href="https://developer.chrome.com/devtools"><strong>Chrome Developer Tools</strong></a> give you access to everything that happens to your application when it is sent to the browser. Troubleshoot Javascript, CSS, and layout issues without having to refresh the page. Check out the tutorials at <a href="http://discover-devtools.codeschool.com/">discover-devtools</a> by CodeSchool.</p></li>
<li><p><a href="https://github.com/pry/pry"><strong>Pry</strong></a> gives you an interactive debugging session wherever you put a breakpoint in a Rails application. <code>binding.pry</code> throws you down the rabbit hole into the inner workings of your program&rsquo;s psyche. Check out <a href="http://katieleonard.ca/blog/2015/exploring-the-stack/">exploring the stack</a> for more details about this powerful tool.</p></li>
<li><p><strong>Use the docs</strong>. Knowing how to find and navigate documentation is more important than remembering how to do File I/O. If you find yourself in a technical interview where they don&rsquo;t let you search the web for help, share your thought process, imagine the solution you might have found had you performed the search, and work your way through the problem with pseudocode. Experienced developers use Google search and StackOverflow constantly, so pop that error message into the search bar to see what turns up. A word to the wise: if an answer was posted more than two years ago, it may no longer be relevant.</p></li>
</ul>


<h3>Get to know your community</h3>

<p>Your next job in programming is more likely to come from someone in your network than from hitting the street with your resume. If you can claim an acquaintance with someone from a company you want to work for, that is one more point in your favour.</p>

<p>Go to meetups. If you are shy about meeting lots of new people at once, try introducing yourself to the invited speakers at the end &mdash; they are usually well connected and respected in the community. If you approach them with your name and a question or comment about their talk, they are likely to remember you.</p>

<h3>Do scary things</h3>

<p>Not like skydiving, or alligator wrestling. Write blogs, contribute to open source projects, start <a href="http://createyourproglang.com/">your own programming language</a>, or become visible on social media. You don&rsquo;t need to be an expert to have an opinion. Don&rsquo;t stop taking risks after you land your first job, either.</p>

<ul>
<li><p><img class="left" src="http://www.katieleonard.ca/images/150412-getting-a-job/against-the-grain.jpg" width="300" title="Do something risky." >Find an area of your work that people are avoiding and become an expert. You will be known as the person who can do that thing we all hate, and your colleagues will value your expertise.</p></li>
<li><p>Take the hardest ticket from the top of the stack. Don&rsquo;t sift through them until you find something you think you know how to do. Your best opportunity to stretch your skills is to do something scary and uncomfortable.</p></li>
</ul>


<p>I work with a lot of people who don&rsquo;t have formal computer science degrees, and while their backgrounds vary, they all share a love of problem solving and a willingness to work hard. Take responsibility for your own learning &mdash; code school will only bring you so far, and the rest is up to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's It Like to Be a Developer?]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/what-is-it-like-to-be-a-programmer/"/>
    <updated>2015-04-11T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/what-is-it-like-to-be-a-programmer</id>
    <content type="html"><![CDATA[<p>My manager has invited me to help her give a talk to students in a Web Development program. I have been working in the field for about 18 months, and a lot of the uncertainty is still fresh in my mind: what is it like to be a programmer? How can I get a job as a junior? What can I do now that will help me in my first job? I didn&rsquo;t know many people in the industry, and was unaware of the vast meetup community<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Answers to these questions were difficult to find online, so over the next few posts I will make an attempt.</p>

<!--more-->


<hr>


<h3>Meetings: Important communication tools.</h3>

<p>Programming is mostly about decision making, and not all decisions can be made alone. Questions like, what technologies to use, how you should spend your time, and how to scale, require meetings with managers and other teams.</p>

<ul>
<li><p><strong>Sprint planning</strong> is a weekly meeting where the team gets together with managers to prioritize tasks for the week. You look back on last week, and either carry over tasks you didn&rsquo;t accomplish, or re-prioritize based on what has arisen in the meantime.</p></li>
<li><p><strong>Standups</strong> happen daily, and should only last around 10 minutes. You each take a turn sharing what you worked on yesterday, what you are working on today, and whether you are blocked by anything. It is important to speak up when you are stuck! Sharing your blockers will usually result in help; someone may have encountered this problem before, have a new approach to suggest, or have insider information that can get you to a solution.</p></li>
<li><p><strong>Demos</strong> will happen on a weekly or bi-weekly basis, and are an opportunity to share your accomplishments. While many stakeholders are involved in the project and sprint planning, they are often disconnected from the work as it is being performed. Regular demos help to keep them in the loop, and are an opportunity to explain both progress and unexpected delays.</p></li>
<li><p><strong>Code reviews</strong> can be formal or informal, and allow your team to gain consensus on style, design, performance, and testing. Your code design decisions will have an impact on the project as a whole, so it never hurts to get feedback from a teammate before you ship it. Readability is more important than cleverness, and is a kindness to future maintainers.</p></li>
</ul>


<p>A portion of your week will always be spent in meetings. Try to identify when your most productive hours are in the day, and keep that time free. For example, if you lump meetings around lunch (none before 11am or after 2pm) you have a solid chunk of time in the morning and the afternoon to focus effectively.</p>

<h3>Stories: How big ideas are turned into actions.</h3>

<p>An idea like &ldquo;improve the user&rsquo;s experience of widget B&rdquo; is a goal, not a task. It can be broken down into <strong>stories</strong> such as: <em>identify the problem</em>, <em>brainstorm solutions</em>, <em>design the new widget</em>, and <em>implement the new widget</em>. Each of these stories are actionable: there is a clear path from start to finish. Use the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">single-responsibility principle</a> in your stories as well as in your code: if you use the word AND to describe the task, that is a hint that you should have two stories instead of one. Most companies will use a task management, or <strong>ticket</strong> system such as Pivotal Tracker or Jira, where you can see what work is assigned to you, and where managers can check in on your progress.</p>

<h3>Feature Work: What should be built?</h3>

<p>Product managers have their eye on the market. They know what features our customers want, and they know what our competitors offer. A product manager will build a product road-map with a long schedule (think months and years, not weeks). The team will sit down with the feature requirements and a first-draft design, break it down into stories, and estimate the time/complexity of each story. Managers then apportion those estimates into chunks of work &mdash; in <strong>Agile</strong>, these chunks are laid out in <strong>sprints<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></strong>.</p>

<p>Defining work in this way lets you identify what can be done in parallel and what needs to be in place before the next task can be accomplished. It also gives project managers the information they need to make decisions about what to sacrifice in order to meet a deadline. If the project is over the time budget, and gold-plated widget A needs features 1, 2, and 3, then maybe you can ship the widget with only 1 and 2, but save 3 for later. Sometimes you have to compromise on feature completeness just to get it out the door.</p>

<h3>Troubleshooting and Maintenance: Detective work.</h3>

<p>Finding a bug is like being a detective: you gather clues, follow leads, and occasionally end up lost in a blind alley. A single line of code can hold multiple bugs (Pro tip: watch out for Regexes<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> &mdash; they are a great place for bugs to hide). In a code base with hundreds of thousands of lines, you will inevitably spend more time hunting and fixing bugs than writing new code.</p>

<h3>Deploying code: Sending it into the wild.</h3>

<p>Running an application in production is not the same as running it on your computer. Your application may need to serve thousands of requests per second, and a single instance running on a single server won&rsquo;t cut it. There is a whole stack of management software that you would do well to be familiar with, and having at least a passing familiarity with <a href="https://jenkins-ci.org/">Jenkins</a>, <a href="http://capistranorb.com/">Capistrano</a>, and <a href="http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html">bash scripting</a> will help you when it is your turn to carry the pager.</p>

<h3>Pager duty: Evil alarm clock.</h3>

<p>When you write software that your customers use around the clock, you have to be there when things break, no matter what time. Most companies will institute a rotation to share the burden of vigilence around the team. Having great documentation about what to do in an emergency is essential to finding a clear path of action at 3am. As with anything, the more you prepare, the higher your confidence level will be.</p>

<p>The job is far from routine because of the diverse set of problems to solve. I have become comfortable grabbing a story without already knowing the answer, partly from knowing that if I get stuck I am no more than a &ldquo;Hey Bryan,&rdquo; or &ldquo;Hey KWu,&rdquo; away from someone who wants to help, even if it is at 3am (thanks again, Vince!).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If you are in Portland, Oregon, checkout <a href="http://calagator.org/">Calagator</a>. Otherwise, try <a href="http://www.meetup.com/">Meetup.com</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Read more about <a href="http://en.wikipedia.org/wiki/Agile_software_development">Agile methodology</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Regex (short for regular expression) is a search pattern based on a sequence of characters.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring the Stack]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/exploring-the-stack/"/>
    <updated>2015-03-25T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/exploring-the-stack</id>
    <content type="html"><![CDATA[<p>Another brilliant Rails troubleshooting technique I have recently added to my toolbox is <a href="https://github.com/pry/pry-stack_explorer"><code>pry-stack_explorer</code></a> as an add-on to <a href="https://github.com/pry/pry"><code>pry</code></a>.</p>

<h4>1. Add <code>pry</code> and <code>pry-stack_explorer</code> to the development/test group of your gemfile:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pry-stack_explorer&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2. Add a binding pry anywhere in your code</h4>

<p><img src="http://www.katieleonard.ca/images/150325-show-stack/binding-pry.png"></p>

<h4>3. Enter <code>show-stack</code> at the pry prompt</h4>

<p><img src="http://www.katieleonard.ca/images/150325-show-stack/show-stack.png"></p>

<h4>4. Enter <code>up</code> or <code>down</code> to explore the state of the stack</h4>

<p><img src="http://www.katieleonard.ca/images/150325-show-stack/travel-the-stack.png"></p>

<h4>Other goodies</h4>

<ul>
<li>Pass a string to <code>up</code> or <code>down</code> and <code>pry-stack_explorer</code> will jump to the first frame that matches:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Frame number: 0/108
</span><span class='line'>
</span><span class='line'>From: /Users/keighty/Documents/projects/api_playground/app/models/user.rb @ line 4 User#full_name:
</span><span class='line'>
</span><span class='line'>    3: def <span class="nv">full_name</span>
</span><span class='line'> <span class="o">=</span>&gt; 4:   binding.pry
</span><span class='line'>    5:   <span class="s2">&quot;#{first_name} #{last_name}&quot;</span>
</span><span class='line'>    6: end
</span><span class='line'>
</span><span class='line'><span class="o">[</span>6<span class="o">]</span> pry<span class="o">(</span>&lt;User&gt;<span class="o">)</span>&gt; up instrument
</span><span class='line'>
</span><span class='line'>Frame number: 3/108
</span><span class='line'>Frame <span class="nb">type</span>: method
</span><span class='line'>
</span><span class='line'>From: /usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/activesupport-4.2.0/lib/active_support/notifications.rb @ line 166 ActiveSupport::Notifications.instrument:
</span><span class='line'>
</span><span class='line'>    162: def instrument<span class="o">(</span>name, <span class="nv">payload</span> <span class="o">=</span> <span class="o">{})</span>
</span><span class='line'>    163:   <span class="k">if </span>notifier.listening?<span class="o">(</span>name<span class="o">)</span>
</span><span class='line'>    164:     instrumenter.instrument<span class="o">(</span>name, payload<span class="o">)</span> <span class="o">{</span> yield payload <span class="k">if </span>block_given? <span class="o">}</span>
</span><span class='line'>    165:   <span class="k">else</span>
</span><span class='line'> <span class="o">=</span>&gt; 166:     yield payload <span class="k">if </span>block_given?
</span><span class='line'>    167:   end
</span><span class='line'>    168: end
</span><span class='line'>
</span><span class='line'><span class="o">[</span>7<span class="o">]</span> pry<span class="o">(</span>ActiveSupport::Notifications<span class="o">)</span>&gt; down view
</span><span class='line'>
</span><span class='line'>Frame number: 1/108
</span><span class='line'>Frame <span class="nb">type</span>: method
</span><span class='line'>
</span><span class='line'>From: /Users/keighty/Documents/projects/api_playground/app/views/greetings/hello.html.erb @ line 1 ActionView::CompiledTemplates#_app_views_greetings_hello_html_erb___3157151947187763552_70316982999600:
</span><span class='line'>
</span><span class='line'> <span class="o">=</span>&gt; 1: &lt;h1&gt;Greetings, &lt;%<span class="o">=</span> @person.full_name %&gt;&lt;/h1&gt;
</span><span class='line'>    2: &lt;p&gt;This is a greetings view!&lt;/p&gt;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Pass an integer to <code>up</code> or <code>down</code> to leap over frames</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>8<span class="o">]</span> pry<span class="o">(</span>&lt;Class:0x007fe7eb821330&gt;&gt;<span class="o">)</span>&gt; up 5
</span><span class='line'>
</span><span class='line'>Frame number: 6/108
</span><span class='line'>Frame <span class="nb">type</span>: block
</span><span class='line'>
</span><span class='line'>From: /usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/actionview-4.2.0/lib/action_view/renderer/template_renderer.rb @ line 54 ActionView::TemplateRenderer#render_template:
</span><span class='line'>
</span><span class='line'>    49: def render_template<span class="o">(</span>template, <span class="nv">layout_name</span> <span class="o">=</span> nil, <span class="nv">locals</span> <span class="o">=</span> nil<span class="o">)</span> <span class="c">#:nodoc:</span>
</span><span class='line'>    50:   view, <span class="nv">locals</span> <span class="o">=</span> @view, locals <span class="o">||</span> <span class="o">{}</span>
</span><span class='line'>    51:
</span><span class='line'>    52:   render_with_layout<span class="o">(</span>layout_name, locals<span class="o">)</span> <span class="k">do</span> |layout|
</span><span class='line'>    53:     instrument<span class="o">(</span>:template, :identifier <span class="o">=</span>&gt; template.identifier, :layout <span class="o">=</span>&gt; layout.try<span class="o">(</span>:virtual_path<span class="o">))</span> <span class="k">do</span>
</span><span class='line'> <span class="o">=</span>&gt; 54:       template.render<span class="o">(</span>view, locals<span class="o">)</span> <span class="o">{</span> |*name| view._layout_for<span class="o">(</span>*name<span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    55:     end
</span><span class='line'>    56:   end
</span><span class='line'>    57: end
</span><span class='line'>
</span><span class='line'><span class="o">[</span>9<span class="o">]</span> pry<span class="o">(</span>&lt;ActionView::TemplateRenderer&gt;<span class="o">)</span>&gt; down 2
</span><span class='line'>
</span><span class='line'>Frame number: 4/108
</span><span class='line'>Frame <span class="nb">type</span>: method
</span><span class='line'>
</span><span class='line'>From: /usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/actionview-4.2.0/lib/action_view/template.rb @ line 333 ActionView::Template#instrument:
</span><span class='line'>
</span><span class='line'>    331: def instrument<span class="o">(</span>action, &amp;block<span class="o">)</span>
</span><span class='line'>    332:   <span class="nv">payload</span> <span class="o">=</span> <span class="o">{</span> virtual_path: @virtual_path, identifier: @identifier <span class="o">}</span>
</span><span class='line'> <span class="o">=</span>&gt; 333:   ActiveSupport::Notifications.instrument<span class="o">(</span><span class="s2">&quot;#{action}.action_view&quot;</span>, payload, &amp;block<span class="o">)</span>
</span><span class='line'>    334: end
</span></code></pre></td></tr></table></div></figure>


<p>To learn even more awesome ways to use <code>pry</code> and <code>pry-stack_explorer</code>, check out the docs:</p>

<ul>
<li><a href="https://github.com/pry/pry">github.com/pry/pry</a>.</li>
<li><a href="https://github.com/pry/pry-stack_explorer">github.com/pry/pry-stack_explorer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Troubleshooting Nested Scopes in Angular]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/troubleshooting-nested-scopes-in-angular/"/>
    <updated>2015-03-11T00:00:00-07:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/troubleshooting-nested-scopes-in-angular</id>
    <content type="html"><![CDATA[<p>Many beginner Angular tutorials start with a set of canned data, an input field, and a search filter, so it was a natural place to start on my side project, Virtual Playbill. With even a small data set, watching the DOM change based on search criteria was a thrilling achievement. In the intervening months, as features were added, rebuilt, or taken away, I had inadvertently broken the search box. The tutorials were still available, and still fairly basic, but I couldn&rsquo;t get it to work. Not until I found a couple of invaluable tools for troubleshooting overlapping scopes: <!--more--></p>

<h4>1. Use the developer tools console</h4>

<p>This handy trick will give you a console object corresponding to that element&rsquo;s scope:</p>

<ul>
<li>select a DOM element in using the chrome developer tools</li>
<li>enter <code>angular.element($0).scope()</code> into the console pane (<code>$0</code> is a global variable holding a reference to the selected DOM element)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// with the search box selected</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">$0</span><span class="p">).</span><span class="nx">scope</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$get</span><span class="p">.</span><span class="nx">h</span><span class="p">.</span><span class="nx">$new</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">$$ChildScope</span><span class="p">.</span><span class="nx">$$ChildScope</span> <span class="p">{</span><span class="nx">$$childTail</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">$$childHead</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">$$nextSibling</span><span class="o">:</span> <span class="nx">$get</span><span class="p">.</span><span class="nx">h</span><span class="p">.</span><span class="nx">$new</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">$$ChildScope</span><span class="p">.</span><span class="nx">$$ChildScope</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nx">$parent</span><span class="o">:</span> <span class="nx">h</span>
</span><span class='line'>  <span class="nx">playbillRows</span><span class="o">:</span> <span class="nb">Array</span><span class="p">[</span><span class="mi">23</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">playbills</span><span class="o">:</span> <span class="nb">Array</span><span class="p">[</span><span class="mi">68</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">search</span><span class="o">:</span> <span class="nb">Object</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;this is search text&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// with the playbill area selected</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">$0</span><span class="p">).</span><span class="nx">scope</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$get</span><span class="p">.</span><span class="nx">h</span><span class="p">.</span><span class="nx">$new</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">$$ChildScope</span><span class="p">.</span><span class="nx">$$ChildScope</span> <span class="p">{</span> <span class="nx">$$childTail</span><span class="o">:</span> <span class="nx">$get</span><span class="p">.</span><span class="nx">h</span><span class="p">.</span><span class="nx">$new</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">$$ChildScope</span><span class="p">.</span><span class="nx">$$ChildScope</span><span class="p">,</span> <span class="nx">$$childHead</span><span class="o">:</span> <span class="nx">$get</span><span class="p">.</span><span class="nx">h</span><span class="p">.</span><span class="nx">$new</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">$$ChildScope</span><span class="p">.</span><span class="nx">$$ChildScope</span><span class="p">,</span> <span class="nx">$$nextSibling</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nx">$parent</span><span class="o">:</span> <span class="nx">h</span>
</span><span class='line'>  <span class="nx">playbillRows</span><span class="o">:</span> <span class="nb">Array</span><span class="p">[</span><span class="mi">23</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">playbills</span><span class="o">:</span> <span class="nb">Array</span><span class="p">[</span><span class="mi">68</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Things are definitely looking different between the scope containing my search box and the scope where I am laying out the view: the second scope appears to be a sibling of the first. I needed something a little more visual before it completely sunk in, though.</p>

<h4>2. Use <a href="https://chrome.google.com/webstore/detail/ng-inspector-for-angularj/aadgmnobpdmgmigaicncghmmoeflnamj">ng-inspector</a></h4>

<p>ng-inpector is a browser extension that allows you to navigate your angular app as if it were a file directory:</p>

<p><img src="http://www.katieleonard.ca/images/vp_ng_inspector.png"></p>

<p>I can see at a glance that the scope containing the search box (#2), is separate from the scope where I am laying out my view (the unnamed scope #5).</p>

<p>Because of these tools, I have learned that multiple instances of the same controller do not share scope. Using ng-router, I declared the controller for the view:</p>

<figure class='code'><figcaption><span>app.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;views/index.html&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;PlaybillController&#39;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>In my layout, I had declared the controller once more:</p>

<figure class='code'><figcaption><span>layout.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;PlaybillController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">&quot;navbar-form navbar-left&quot;</span> <span class="na">role=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Search shows&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;search.title&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  ...
</span></code></pre></td></tr></table></div></figure>


<p>The search box was already in the context of a Playbill Controller, and I had inadvertently put in another. The solution was to simply remove the second ng-controller:</p>

<figure class='code'><figcaption><span>layout.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">&quot;navbar-form navbar-left&quot;</span> <span class="na">role=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Search shows&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;search.title&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  ...
</span></code></pre></td></tr></table></div></figure>


<p>I have been growing my Ruby/Rails troubleshooting toolbox for a while now, and it is good to get one started for angular as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Git Goodies]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/more-git-goodies/"/>
    <updated>2015-03-08T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/more-git-goodies</id>
    <content type="html"><![CDATA[<p>Becoming a git expert is essential to efficiency and confidence as a software developer. I have evolved from someone who would re-clone the repo in case of a botched merge to a savvy git handler, through:</p>

<ul>
<li>Moving files between working directory, index, stash, and commit history</li>
<li>Working with multiple remotes with many contributors</li>
<li>Handling changes to forks, branches, and pull requests</li>
<li>Accidental merges from pulling upstream, and checking out pull requests or remote branches</li>
</ul>


<figure class='code'><figcaption><span>My old favourites </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rebase -i &lt;sha&gt; <span class="c"># pick a sha from your git history and start squashing</span>
</span><span class='line'>git clean -f <span class="c"># removes untracked files from your working directory</span>
</span><span class='line'>git stash <span class="c"># save your idea for later</span>
</span><span class='line'>git stash pop <span class="c"># revive your last idea</span>
</span><span class='line'>git reflog <span class="c"># oh my goodness, what did I just do?</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>My alii </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Add this to your .bashrc (or .zshrc)</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">wip</span><span class="o">=</span><span class="s2">&quot;git add .; git commit -m &#39;WIP&#39;&quot;</span>  <span class="c"># saves and commits the current state</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">popwip</span><span class="o">=</span><span class="s2">&quot;git reset --soft head~1; git reset head .&quot;</span>  <span class="c"># pops the top commit off the stack</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add this to your git config</span>
</span><span class='line'><span class="o">[</span><span class="nb">alias</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">hist</span> <span class="o">=</span> log --pretty<span class="o">=</span>format:<span class="se">\&quot;</span>%h %ad | %s%d <span class="o">[</span>%an<span class="o">]</span><span class="se">\&quot;</span> --graph --date<span class="o">=</span>short
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git hist <span class="c"># opens a human readable history -- essential for verifying where you are:</span>
</span><span class='line'>* 2ae2be1 2015-03-08 | WIP <span class="o">(</span>HEAD, origin/source, <span class="nb">source</span><span class="o">)</span> <span class="o">[</span>keighty<span class="o">]</span>
</span><span class='line'>* 247f86f 2015-02-16 | Change portfolio subtitle. <span class="o">[</span>keighty<span class="o">]</span>
</span><span class='line'>* e2a4fd0 2015-02-16 | Add facebook and google+ sharing options. <span class="o">[</span>keighty<span class="o">]</span>
</span><span class='line'>* e41ca0a 2015-02-16 | Replace comments in draft and post tasks. <span class="o">[</span>keighty<span class="o">]</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Check out a remote branch </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -b &lt;name of the <span class="nb">local </span>branch to create&gt; upstream/&lt;name of the remote branch&gt;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>My new favourites </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout - <span class="c"># checks out the last branch you were on</span>
</span><span class='line'>git checkout -p <span class="c"># checks out changes in chunks</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have already shared a few tools that have become so much a part of my tool box, and have developed such a muscle memory that my fingers will perform the tasks as I think them. Every time I pair with another developer I gain another shortcut! Thanks to Vince for those last two&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bird by Bird]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/bird-by-bird/"/>
    <updated>2015-03-01T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/bird-by-bird</id>
    <content type="html"><![CDATA[<p>Virtue is its own reward, and so is writing. Anne Lamott&rsquo;s <a href="http://www.amazon.com/Bird-Some-Instructions-Writing-Life/dp/0385480016/ref=sr_1_1?ie=UTF8&amp;qid=1425241344&amp;sr=8-1&amp;keywords=bird+by+bird">Bird by Bird: Some Instructions on Writing and Life</a> is full of beautiful prose, characters, and personal anecdotes, and while her advice is tuned to the creative writer, there are three useful lessons that can be applied to all writing.</p>

<ol>
<li>write short assignments</li>
<li>write only what you can see through a 1-inch picture frame</li>
<li>write a terrible first draft</li>
</ol>


<p>Blogging about what I am learning and reading forces me to think about what I experience. Almost every day I learn another 1-inch picture frame of programming, and writing it down helps me understand it better. My ugly first drafts usually consist of a question, a few links to resources, and some console output &mdash; not Pulitzer Prize winning prose, but an awesome personal resource and record of growth.</p>

<blockquote><p>All you can give us is what life is about from your point of view. You are not going to be able to give us the plans to the submarine. Life is not a submarine. There are no plans.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uploading Images From Node and Angular to S3]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/uploading-images-from-node-slash-angular-to-s3/"/>
    <updated>2015-02-24T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/uploading-images-from-node-slash-angular-to-s3</id>
    <content type="html"><![CDATA[<p>Amazon Web Services allow you to do everything, so it is hard to figure out how to do anything. I have a node/angular/mongo stack running on Heroku, and want to use Amazon to store images. I was delighted to stumble across <a href="https://devcenter.heroku.com/articles/s3-upload-node"><em>Direct to S3 Uploads in Node.js</em></a>, written by Will Webberly for the Heroku Dev Center blog.
Following his <a href="https://github.com/flyingsparx/NodeDirectUploader">example</a>, I was able to upload images directly from the browser to S3, saving my app server a whole lot of work.</p>

<!--more-->


<p>In the example, when a user selects a file for upload, the browser asks the node server for a temporary signed request. The server replies with a signed url, and the browser can send the data directly to Amazon. TADA &mdash; Almost. With a few exceptions. One of the prerequisites is that you know how to set up an S3 bucket and IAM user with the correct access controls.</p>

<h4>Setting the S3 stage</h4>

<p>When S3 receives a request it must verify that the requester has the proper permissions &mdash; both at the account level, as well as at the bucket level. With a seemingly infinite number of services available through Amazon, I found that I had to aggregate information from a few different sources.</p>

<ol>
<li>Create a bucket

<ul>
<li>See <a href="http://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html">this Amazon tutorial</a> for how to create a bucket.</li>
</ul>
</li>
<li>Create a user

<ul>
<li>See <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_SettingUpUser.html#Using_CreateUser_console">this Amazon tutorial</a> for creating an IAM User.</li>
<li>Be sure to record the generated <code>Access Key ID</code> and <code>Secret Access Key</code>. They will act as user name and password for accessing your bucket.</li>
</ul>
</li>
<li>Grant the IAM User access to S3

<ul>
<li>In the IAM User section of the AWS Management Console, select <code>Attach Policy</code>, and add <code>AmazonS3FullAccess</code> from the list
<img src="http://www.katieleonard.ca/images/IAM_Management_Console.png"></li>
</ul>
</li>
<li>Grant the IAM User access to the bucket

<ul>
<li>Use <a href="http://awspolicygen.s3.amazonaws.com/policygen.html">this Amazon tool</a> to help you generate an Access Control Policy. The key pieces you need for the policy generator are the AWS Principle (the user you created), which you enter in the format <code>arn:aws:iam::&lt;your_account_number&gt;:&lt;IAM_user_name&gt;</code>, and the Resource (the bucket you created), which you enter in the format <code>arn:aws:s3:::&lt;your_bucket_name&gt;/*</code>.</li>
</ul>
</li>
</ol>


<figure class='code'><figcaption><span>Your access control policy should look like this example: </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "Version":"2012-10-17",
</span><span class='line'>  "Id": "Policy1234567890123",
</span><span class='line'>  "Statement":[{
</span><span class='line'>    "Sid":"Stmt123456789",
</span><span class='line'>    "Effect":"Allow",
</span><span class='line'>    "Principal": {
</span><span class='line'>            "AWS": "arn:aws:iam::111122223333:specialUser"
</span><span class='line'>    },
</span><span class='line'>    "Action":[
</span><span class='line'>      "s3:PutObject",
</span><span class='line'>      "s3:DeleteObject",
</span><span class='line'>      "s3:GetObject"
</span><span class='line'>    ],
</span><span class='line'>    "Resource":"arn:aws:s3:::examplebucket/*"
</span><span class='line'>  }]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>In case you get lost, here is <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/how-s3-evaluates-access-control.html">one more invaluable Amazon tutorial</a>.</p>

<h4>Angular client side</h4>

<p>Using an angular app on the client side is also a slight deviation from the Webberly tutorial. Angular <a href="https://github.com/angular/angular.js/issues/1375">does not support</a> an <code>ng-change</code> binding on file input elements, but there is a <a href="http://stackoverflow.com/a/17923521">workaround</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control btn&quot;</span> <span class="na">id=</span><span class="s">&quot;image&quot;</span> <span class="na">onchange=</span><span class="s">&quot;angular.element(this).scope().s3Upload(this)&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Additionally, instead of adding the upload function as plain javascript in your html template, add the <code>s3Upload</code> function onto the <code>$scope</code> in your controller.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">s3Upload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">status_elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;status&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url_elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;image_url&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">preview_elem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;preview&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">s3upload</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">S3Upload</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">s3_object_name</span><span class="o">:</span> <span class="nx">showTitleUrl</span><span class="p">(),</span>  <span class="c1">// upload object with a custom name</span>
</span><span class='line'>      <span class="nx">file_dom_selector</span><span class="o">:</span> <span class="s1">&#39;image&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">s3_sign_put_url</span><span class="o">:</span> <span class="s1">&#39;/sign_s3&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">onProgress</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">percent</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">status_elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;Upload progress: &#39;</span> <span class="o">+</span> <span class="nx">percent</span> <span class="o">+</span> <span class="s1">&#39;% &#39;</span> <span class="o">+</span> <span class="nx">message</span><span class="p">;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">onFinishS3Put</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">public_url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">status_elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;Upload completed. Uploaded to: &#39;</span><span class="o">+</span> <span class="nx">public_url</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">url_elem</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">public_url</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">preview_elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;img src=&quot;&#39;</span><span class="o">+</span> <span class="nx">public_url</span> <span class="o">+</span><span class="s1">&#39;&quot; style=&quot;width:300px;&quot; /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">onError</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">status_elem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;Upload error: &#39;</span> <span class="o">+</span> <span class="nx">status</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the diff on line 6 &mdash; taking a peek into the <a href="https://github.com/flyingsparx/NodeDirectUploader/blob/master/public/javascripts/s3upload.js#L23-L29">S3Upload source</a>, you can set a custom file name by passing a <code>s3_object_name</code> option. Otherwise, every object will be named <code>default_name</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">s3_upload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">s3upload</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">S3Upload</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">s3_object_name</span><span class="o">:</span> <span class="nx">showTitleUrl</span><span class="p">(),</span>  <span class="c1">// upload object with a custom name</span>
</span><span class='line'>    <span class="nx">file_dom_selector</span><span class="o">:</span> <span class="s1">&#39;image&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">s3_sign_put_url</span><span class="o">:</span> <span class="s1">&#39;/sign_s3&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">showTitleUrl</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">show</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dateId</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">().</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">dateId</span> <span class="o">+</span> <span class="nx">title</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Add <code>image</code> to your schema</h4>

<p>The last stumbling block I encountered was saving the image url into mongo. The image would upload and appear just fine, but wouldn&rsquo;t persist the url as a property of the object. I had forgotten to add the image to my mongo Schema &mdash; the schema acts a bit like a whitelist for saving attributes through mongoose into mongo. Adding the <a href="https://github.com/keighty/virtualplaybill2/blob/ad04bcde8ce00c5ce349f43d2e0cc50549c59df7/models/posts_model.js#L11">imageUrl to the schema</a> solved all my woes.</p>

<p>If you are trying to accomplish something similar, Heroku has articles on <a href="https://devcenter.heroku.com/articles/s3">uploading directly to S3</a> using many different stacks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everybody Writes (and Why You Should Blog)]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/everybody-writes/"/>
    <updated>2015-02-16T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/everybody-writes</id>
    <content type="html"><![CDATA[<p>In <em>Everybody Writes</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, Ann Handley teaches content marketers how to generate &ldquo;ridiculously good&rdquo; content. Anyone who has recently enjoyed the pain of the job hunt will notice that much of the advice can be adapted to self-marketing. In my recent code school experience, developing an online presence was as important as learning web development, and since it is hard to market yourself as a web developer without developing anything for the web, a blog is a great place to start. You have picked a career where your ability to learn is one of your most marketable skills, as well as your ability to communicate &mdash; both of which you can showcase in your blog. You don&rsquo;t have to worry about having something original to say: treat it as an opportunity to organize your thoughts and to teach a beginner what you know. Handley gives great advice for people learning to blog and how to generally optimize your online presence &mdash; both are great ways to market yourself as a fresh code-school alum.</p>

<!--more-->


<h3>Show up</h3>

<p>Write early, write often. If something is new to you, it will likely be new to someone else as well. The more writing practice you get, the easier it becomes &mdash; &ldquo;writing is a habit, not an art&rdquo;, and you can&rsquo;t help but improve in an art that you practice every day. Handley recommends starting with the ugly first draft<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> &mdash; make it ugly, don&rsquo;t delete anything, don&rsquo;t rephrase or reread. Just get it out of you and on to your screen, then walk away for a day. Maybe two. If you are really stuck on how to begin, you could start with &ldquo;Dear diary&rdquo;<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. This helps you get in the mood to write, and keeps your tone conversational. Also, if you are writing to a non-technical person, it will keep your writing clear, and inspire you to give enough back story so that they aren&rsquo;t lost.</p>

<h3>Write a tight post</h3>

<h4>Decide on a goal</h4>

<p>Is it to teach? To share? To critique? The goal for technical blogs is not usually to obtain a following &mdash; it is to share a bit of experience that will turn up when another frustrated developer puts keywords into a search engine. An online presence is important, but it should not be a blow by blow of how hard it is to learn to code. A handy formula for creating quality content is:</p>

<blockquote><p>Utility * Inspiration * Empathy = Quality Content<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p></blockquote>

<p>Make it useful, make it reader centric (even if that reader is you six months from now), and make it thoughtful.</p>

<h4>Forget the 5 paragraph essay format from high school</h4>

<p>I rarely read a long blog post from beginning to end, and the sweet spot for length is around 1500 words<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. Make it easy for the reader to get the gist of your post by providing sub-headings, bold text, and code samples &mdash; these are strong visual elements that can help your reader anchor what they are learning.</p>

<h4>Rewrite</h4>

<p>Once you have written the ugly first draft with your goal in mind, rewrite it with the reader in mind &mdash; will they understand the context of what you are trying to get across? Assume the reader knows nothing, but isn’t stupid. Find data and examples that illustrate what you are trying to share (and make sure that you give credit where credit is due<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>).</p>

<h4>Work on your grammar</h4>

<p>After reframing, examine your sentence structure. Are you using a passive voice? Microsoft Word grammar check hates the passive voice, but I never knew what that meant. Try <a href="https://www.grammarly.com/">grammarly</a> if you need help, and even if you think you don&rsquo;t. Editing your own work is hard, because your brain will fill in all the things you meant to say but didn&rsquo;t. Also, put the important words at the start of the sentence, just in case the reader dozes off half-way through.</p>

<h3>About Me pages</h3>

<p>Be intentional about the words that describe you in your About Me page<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>. Describe your accomplishments with examples, and if possible, try to mirror the language used by the companies you want to work for. Check out the keywords they use, and make sure to encorporate them in your headlines and personal summary.</p>

<blockquote><p>About us pages aren’t really about the company; instead they focus on relaying who they are <em>in relation to the visitor</em>.</p></blockquote>

<p>If your reader is an employer, let them know you are for hire &mdash; your posts should always be in the context of what you can do for the reader.</p>

<p>Showing up can be the hardest thing &mdash; finding something original to say, or fearing a public mistake is what keeps many people from writing, but blogging shows you are interested in, well, something. Being interesting means being interested in things, and wanting to share the things you find interesting is a natural follow through. Given the right mentorship, your technical abilities will grow, but getting in the door is step one. So, if you are looking to update your web presence, or create a web presence, this book is for you.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Handley, A. (2014). <a href="http://www.amazon.com/Everybody-Writes-Go--Creating-Ridiculously-ebook/dp/B00LMB5P0G/ref=sr_1_1?ie=UTF8&amp;qid=1424115248&amp;sr=8-1&amp;keywords=everybody+writes"><em>Everybody Writes : Your Go-To Guide to Creating Ridiculously Good Content</em></a>. Wiley &amp; Sons Canada, Limited, John.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Tip 9: &ldquo;Embrace the Ugly First Draft&rdquo;, p. 41.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Tip 14: &ldquo;Start with <em>Dear Mom&hellip;</em>&rdquo;, p. 54.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>&ldquo;Introduction&rdquo;, p. 7.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Tip 60: &ldquo;The Ideal Length for Blog Posts, Podcast, Facebook Posts, Tweets, and Other Marketing Content&rdquo;, p. 184.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>Tip 57: &ldquo;Seek Permission, Not Forgiveness&rdquo;, p. 170.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>Tip 71: &ldquo;Writing the About Us Page&rdquo;, p 244.<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Code]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/clean-code/"/>
    <updated>2015-02-07T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/clean-code</id>
    <content type="html"><![CDATA[<p>The book club I belong to has a two-fold mission: the first is to inspire through peer pressure to read (and finish) technical books, and the second is to improve our ability to write quality, maintainable code. We started with <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330/ref=sr_1_1?ie=UTF8&amp;qid=1423423708&amp;sr=8-1&amp;keywords=practical+object-oriented+design+in+ruby"><em>Practical Object Oriented Design in Ruby</em></a> (Sandi Metz), and are now on to <a href="http://www.amazon.com/s/ref=nb_sb_ss_i_0_11?url=search-alias%3Daps&amp;field-keywords=refactoring&amp;sprefix=refactoring%2Caps%2C217"><em>Refactoring</em></a> (Martin Fowler and Kent Beck). Along the way, I found a copy of <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1423423781&amp;sr=8-1&amp;keywords=clean+code"><em>Clean Code</em></a> by Robert C. Martin in our work library, and dove right in. These three books tout many of the the same principles but focus on different aspects of writing quality code: POODR teaches how to identify abstractions, and to design decoupled objects; Refactoring is a deep dive into the techniques and heuristics for eliminating common code smells; and Clean Code is the intersection between them. It is a style guide, a call to action, and a cautionary tale from the voices of experience. I had several aha moments while reading Clean Code, and here are a few<!--more-->:</p>

<h3>Error handling</h3>

<p>When I started to anticipate <code>undefined method 'length' for nil:NilClass</code> errors, I knew I was growing as a developer.
Having traced the source of <code>undefined is not a function</code> enough times, I came to realize that I was not sufficiently controlling the messages passing between objects.</p>

<figure class='code'><figcaption><span>Could return nil </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">find_a_user</span>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">last_name</span><span class="p">:</span> <span class="s2">&quot;Bacon&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="ss">:find_a_user</span>
</span><span class='line'>
</span><span class='line'><span class="n">find_a_user</span>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">last_name</span>
</span><span class='line'>
</span><span class='line'><span class="ss">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`last_name&#39; for nil:NilClass</span>
</span><span class='line'><span class="sb">from (pry):10:in `</span><span class="n">__pry__</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This first pass seemed totally reasonable to me &mdash; find a particular user, and return it. Of course, what if the user doesn&rsquo;t exist? What if the query timed out? The code on line 7 is reasonable (wherever it may live), but if <code>@user</code> is set to nil my app will blow up. <span class='pullquote-right' data-pullquote='The problem isn&#8217;t that the code is missing a null check, but that it has too many.'>The worst part is, it will blow up at quite a distance from where the actual problem is. A naive solution would be to check if <code>@user</code> is nil before calling <code>#last_name</code> on it (<code>@user.last_name if @user</code>), but this leads to unreadable, untrustworthy code. The problem isn&rsquo;t that the code is missing a null check, but that it has too many. I have a poor contract with <code>User</code> if I have to check its validity every time I ask it a question. Martin suggests a more sustainable solution &mdash; <em>never return <code>nil</code></em>. If you never return <code>nil</code>, you don&rsquo;t have to catch <code>nil</code>.
</span></p>

<blockquote><p>If you are calling a [nil]-returning method from a third-party API, consider wrapping that method with a method that either throws an exception or returns a special case object.</p></blockquote>

<figure class='code'><figcaption><span>Never returns nil </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">find_a_user</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">last_name</span><span class="p">:</span> <span class="s2">&quot;Bacon&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="vi">@user</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">StandardError</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;Could not find Mr. Bacon.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">find_a_user</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="ss">StandardError</span><span class="p">:</span> <span class="no">Could</span> <span class="ow">not</span> <span class="n">find</span> <span class="no">Mr</span><span class="o">.</span> <span class="no">Bacon</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the error occurs where it belongs &mdash; with the retrieval of the user. Throwing an error when something goes wrong is the least you can do for the consumers of your method. You could also solidify your contract by guaranteeing that you return something they expect.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">interesting_things</span>
</span><span class='line'>  <span class="vi">@interesting_things</span> <span class="o">||</span> <span class="o">[]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">interesting_things</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have guaranteed that <code>#interesting_things</code> will always return either the collection I expect or a reasonable facscimile. It is a simple enough solution, but I definitely felt that message sink into place. Methods are objects and objects have API&rsquo;s: messages in and messages out. Make those messages deliberate, because if &ldquo;returning null from methods is bad, passing null into methods is worse.&rdquo;</p>

<h3>Protect Your Boundaries</h3>

<p>Controlling the messages going in to and coming out of your objects is one place you need to protect your boundaries, but what about objects from 3rd party libraries or frameworks? There are consequences of relying too heavily on a library API, and in Chapter 9: Boundaries, James Grenning shares a few of them. One system he was working with collected information by passing around a Map collection, which is a standard library data structure in Java. In the next version of Java, new capabilities were added, and in order to use the new feature they had to find everywhere the object was used and make the change.</p>

<blockquote><p>We&rsquo;ve seen systems that are inhibited from using [the new feature] because of the sheer magnitude of changes needed to make up for the liberal use of Maps.</p></blockquote>

<p>I recently had a similar experience when upgrading an application from Rails 3.0 to Rails 3.2, where there were drastic changes to how models record errors. Errors inherited from OrderedHash in Rails 3.0 and from ActiveModel in Rails 3.2 &mdash; very different object types. Every test that looked for errors called <code>errors.on</code> &mdash; now a deprecated method. Every place that looped over the collection with <code>errors.each</code> had to be changed to <code>errors.messages.each</code>, or the logic modified altogether. It is good practice to be distrustful of APIs that are likely to change, and while I don&rsquo;t believe that the Errors object ever seemed unstable, it has certainly made me extra cautious of calling 3rd party framework methods directly.</p>

<h3>Clean Code is not a &ldquo;nice-to-have&rdquo;</h3>

<p>Technical debt is not a decision to be okay with untested, brittle code that is impossible to build on &mdash; it is a decision to pursue a design that may not be scalable, but it can still be clean. It is tempting to declare &ldquo;Mission Accomplished&rdquo; when you have reached the point of working code, but the job is really only half done:</p>

<blockquote><p>It is not enough for code to work. Code that works is often badly broken. Programers who satisfy themselves with merely working code are behaving unprofessionally. They may fear that they don&rsquo;t have time to improve the structure and design of their code, but I disagree. Nothing has a more profound and long term degrading effect upon a development project than bad code. Bad schedules can be redone, bad requirements can be redefined. Bad team dynamics can be repaired. But bad code rots and ferments, becoming an inexorable weight that drags the team down.</p></blockquote>

<p>A story cannot be declared finished until the code is ammenable to change. In order to change code, it must be comprehensible and thoroughly tested. Compromising code quality to meet the demands of a schedule will only slow things down in the long run.</p>

<p><em>Clean Code</em> is a must read for all professional software developers. Leaving clean code is not just a kindness to the next developer (which is likely to be you), but is essential for growing a healthy codebase. Of course, &ldquo;to write clean code, you must first write dirty code and then clean it,&rdquo; and I look forward to learning new techniques as we tackle <em>Refactoring</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Techniques]]></title>
    <link href="http://www.katieleonard.ca/blog/2015/debugging-techniques/"/>
    <updated>2015-02-02T00:00:00-08:00</updated>
    <id>http://www.katieleonard.ca/blog/2015/debugging-techniques</id>
    <content type="html"><![CDATA[<p>I am working on upgrading an application from Rails 3.0 to Rails 3.2. While the numbers tell you it is a minor version change, there are definitely some major challenges. Digging through Rails and gem internals has forced me to add new strategies to my debugging toolbox, and here are a few of the essentials&hellip;<!--more--></p>

<h3><a href="https://github.com/burke/zeus">Zeus</a></h3>

<p>Zeus is a gem that preloads your Rails app and keeps it loaded, making test driven development fast. Just type <code>zeus start</code> in one console window, and any of the listed commands in another console window.</p>

<p><img src="http://www.katieleonard.ca/images/zeus_start.png"></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>zeus <span class="nb">test test</span>/models/user_test.rb
</span><span class='line'>Run options: --seed 32298
</span><span class='line'>
</span><span class='line'><span class="c"># Running:</span>
</span><span class='line'>
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Finished in 0.045991s, 21.7434 runs/s, 21.7434 assertions/s.
</span><span class='line'>
</span><span class='line'>1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
</span></code></pre></td></tr></table></div></figure>


<p>Run a specific test in a file by passing a regex argument:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>zeus <span class="nb">test test</span>/models/user_test.rb -n <span class="s2">&quot;/test_user_description_has_full_name/&quot;</span>
</span><span class='line'>Run options: -n /test_user_description_has_full_name/ --seed 17927
</span><span class='line'>
</span><span class='line'><span class="c"># Running:</span>
</span><span class='line'>
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Finished in 0.044550s, 22.4467 runs/s, 22.4467 assertions/s.
</span><span class='line'>
</span><span class='line'>1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://github.com/pry/pry">Pry</a></h3>

<p>The Pry gem allows you to set break points and open an interactive debug session at any place in your code using <code>binding.pry</code>. A great way to debug a failing test is to place a pry at the top of the test and check your setup:</p>

<figure class='code'><figcaption><span>Pry into a test </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;test_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserTest</span> <span class="o">&lt;</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_user_description_has_full_name</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">first_name</span><span class="p">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="n">last_name</span><span class="p">:</span> <span class="s2">&quot;kitty&quot;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">&quot;kitty@example.com&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;hello kitty&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">full_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>zeus <span class="nb">test test</span>/models/user_test.rb -n <span class="s2">&quot;/test_user_description_has_full_name/&quot;</span>
</span><span class='line'>
</span><span class='line'>Run options: -n /test_user_description_has_full_name/ --seed 21519
</span><span class='line'>
</span><span class='line'><span class="c"># Running:</span>
</span><span class='line'>
</span><span class='line'>From: /Users/keighty/api_playground/test/models/user_test.rb @ line 7 UserTest#test_user_description_has_full_name:
</span><span class='line'>
</span><span class='line'>     4: def test_user_description_has_full_name
</span><span class='line'>     5:   <span class="nv">user</span> <span class="o">=</span> User.create<span class="o">(</span>first_name: <span class="s2">&quot;hello&quot;</span>, last_name: <span class="s2">&quot;kitty&quot;</span>, email: <span class="s2">&quot;kitty@example.com&quot;</span><span class="o">)</span>
</span><span class='line'>     6:
</span><span class='line'> <span class="o">=</span>&gt;  7:   binding.pry
</span><span class='line'>     8:
</span><span class='line'>     9:   assert_equal <span class="s2">&quot;hello kitty&quot;</span>, user.full_name
</span><span class='line'>    10: end
</span><span class='line'>
</span><span class='line'><span class="o">[</span>1<span class="o">]</span> pry<span class="o">(</span><span class="c">#&lt;UserTest&gt;)&gt; user</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&lt;User:0x007fa054180618</span>
</span><span class='line'> id: 980190963,
</span><span class='line'> first_name: <span class="s2">&quot;hello&quot;</span>,
</span><span class='line'> last_name: <span class="s2">&quot;kitty&quot;</span>,
</span><span class='line'> email: <span class="s2">&quot;kitty@example.com&quot;</span>,
</span><span class='line'> created_at: Sat, 07 Feb 2015 16:52:21 UTC +00:00,
</span><span class='line'> updated_at: Sat, 07 Feb 2015 16:52:21 UTC +00:00&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Your pry is a debug console with more than a few extra features. Here are my favourites:</p>

<ul>
<li><code>ls object</code> to see all the methods available on the object:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>3<span class="o">]</span> pry<span class="o">(</span><span class="c">#&lt;UserTest&gt;)&gt; ls user</span>
</span><span class='line'>
</span><span class='line'>ActiveRecord::Core#methods:
</span><span class='line'>  &lt;<span class="o">=</span>&gt;                 eql?                          <span class="nb">hash          readonly</span>!
</span><span class='line'>  <span class="o">==</span>                  freeze                        init_with     <span class="nb">readonly</span>?
</span><span class='line'>  connection_handler  frozen?                       inspect       set_transaction_state
</span><span class='line'>  encode_with         has_transactional_callbacks?  pretty_print  slice
</span><span class='line'>ActiveRecord::Persistence#methods:
</span><span class='line'>  becomes     delete      increment!   toggle!           update_attributes
</span><span class='line'>  becomes!    destroy!    new_record?  update            update_attributes!
</span><span class='line'>  decrement   destroyed?  persisted?   update!           update_column
</span><span class='line'>  decrement!  increment   toggle       update_attribute  update_columns
</span><span class='line'>ActiveRecord::Scoping#methods:
</span><span class='line'>  initialize_internals_callback  populate_with_current_scope_attributes
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>whereami 10</code> to show 10 lines above and below your breakpoint:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>5<span class="o">]</span> pry<span class="o">(</span><span class="c">#&lt;UserTest&gt;)&gt; whereami 10</span>
</span><span class='line'>
</span><span class='line'>From: /Users/keighty/api_playground/test/models/user_test.rb @ line 7 UserTest#test_user_description_has_full_name:
</span><span class='line'>
</span><span class='line'>     1: require <span class="s1">&#39;test_helper&#39;</span>
</span><span class='line'>     2:
</span><span class='line'>     3: class UserTest &lt; ActiveSupport::TestCase
</span><span class='line'>     4:   def test_user_description_has_full_name
</span><span class='line'>     5:     <span class="nv">user</span> <span class="o">=</span> User.create<span class="o">(</span>first_name: <span class="s2">&quot;hello&quot;</span>, last_name: <span class="s2">&quot;kitty&quot;</span>, email: <span class="s2">&quot;kitty@example.com&quot;</span><span class="o">)</span>
</span><span class='line'>     6:
</span><span class='line'> <span class="o">=</span>&gt;  7:     binding.pry
</span><span class='line'>     8:
</span><span class='line'>     9:     assert_equal <span class="s2">&quot;hello kitty&quot;</span>, user.full_name
</span><span class='line'>    10:   end
</span><span class='line'>    11:
</span><span class='line'>    12: end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>cd object.method</code> to navigate the object stack as if it were a folder structure (and <code>ls</code> to view properites):</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>1<span class="o">]</span> pry<span class="o">(</span><span class="c">#&lt;UserTest&gt;)&gt; cd user.full_name</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>2<span class="o">]</span> pry<span class="o">(</span><span class="s2">&quot;hello kitty&quot;</span><span class="o">)</span>:1&gt; ls
</span><span class='line'>
</span><span class='line'>Comparable#methods: &lt;  &lt;<span class="o">=</span>  &gt;  &gt;<span class="o">=</span>  between?
</span><span class='line'>JSON::Ext::Generator::GeneratorMethods::String#methods:
</span><span class='line'>  to_json_raw  to_json_raw_object  to_json_without_active_support_encoder
</span><span class='line'>String#methods:
</span><span class='line'>  %                  downcase        lstrip!           strip_heredoc
</span><span class='line'>  *                  downcase!       match             sub
</span><span class='line'>  +                  dump            mb_chars          sub!
</span><span class='line'>  <span class="s">&lt;&lt;                 each_byte       next              succ</span>
</span><span class='line'><span class="s">  &lt;=&gt;                each_</span>char       next!             succ!
</span><span class='line'>  <span class="o">==</span>                 each_codepoint  not_ascii_only?   <span class="nv">sum</span>
</span><span class='line'>  <span class="o">===</span>                each_line       oct               <span class="nv">swapcase</span>
</span><span class='line'>  <span class="o">=</span>~                 empty?          ord               swapcase!
</span></code></pre></td></tr></table></div></figure>


<p>These are the features I use most often, but checkout the <a href="http://pryrepl.org/">documentation</a> for more.</p>

<h3>Method Method Method</h3>

<p>Method name collisions can happen in a sprawling legacy codebase, so determining the source is important for debugging. The Ruby language has anticipated this difficulty, and since methods are objects themselves, they created the <a href="http://www.ruby-doc.org/core-2.2.0/Method.html">Method</a> module to access the method object. You can source, extract, unbind, and otherwise manipulate methods in a lot of ways:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1] pry(#&lt;UserTest&gt;)&gt; method = user.method(:full_name)
</span><span class='line'>=&gt; #&lt;Method: User#full_name&gt;
</span><span class='line'>
</span><span class='line'>[2] pry(#&lt;UserTest&gt;)&gt; method.owner
</span><span class='line'>=&gt; User(id: integer, first_name: string, last_name: string, email: string, created_at: datetime, updated_at: datetime)
</span><span class='line'>
</span><span class='line'>[3] pry(#&lt;UserTest&gt;)&gt; method.source_location
</span><span class='line'>=&gt; ["/Users/keighty/api_playground/app/models/user.rb", 2]</span></code></pre></td></tr></table></div></figure>


<h3>Logger</h3>

<p>Soemtimes the Rails bug you are hunting turns up in the SQL behind your query. When you are in a pry console, the SQL is not displayed by default, but you can turn on query logging by creating an <code>ActiveRecord::Base.logger</code> object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># before the logger
</span><span class='line'>[1] pry(#&lt;UserTest&gt;)&gt; User.find(980190963)
</span><span class='line'>
</span><span class='line'>=&gt; #&lt;User:0x007fa0556f4fd0
</span><span class='line'> id: 980190963,
</span><span class='line'> first_name: "hello",
</span><span class='line'> last_name: "kitty",
</span><span class='line'> email: "kitty@example.com",
</span><span class='line'> created_at: Sat, 07 Feb 2015 16:52:21 UTC +00:00,
</span><span class='line'> updated_at: Sat, 07 Feb 2015 16:52:21 UTC +00:00&gt;
</span><span class='line'>
</span><span class='line'>[2] pry(#&lt;UserTest&gt;)&gt; ActiveRecord::Base.logger = Logger.new STDOUT;
</span><span class='line'>
</span><span class='line'>[3] pry(#&lt;UserTest&gt;)&gt; User.find(980190963)
</span><span class='line'>
</span><span class='line'>D, [2015-02-07T09:28:34.892017 #10468] DEBUG -- :
</span><span class='line'>User Load (0.1ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = ? LIMIT 1  [["id", 980190963]]
</span><span class='line'>
</span><span class='line'>=&gt; #&lt;User:0x007fa05c788c10
</span><span class='line'> id: 980190963,
</span><span class='line'> first_name: "hello",
</span><span class='line'> last_name: "kitty",
</span><span class='line'> email: "kitty@example.com",
</span><span class='line'> created_at: Sat, 07 Feb 2015 16:52:21 UTC +00:00,
</span><span class='line'> updated_at: Sat, 07 Feb 2015 16:52:21 UTC +00:00&gt;</span></code></pre></td></tr></table></div></figure>


<p>If you find that you are always creating a logger, add these lines to a <code>.pryrc</code> file in your home directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if </span>defined?<span class="o">(</span>Rails<span class="o">)</span> <span class="o">&amp;&amp;</span> Rails.env
</span><span class='line'>  require <span class="s1">&#39;logger&#39;</span>
</span><span class='line'>  ActiveRecord::Base.logger <span class="o">=</span> Logger.new<span class="o">(</span>STDOUT<span class="o">)</span>
</span><span class='line'>  ActiveRecord::Base.clear_active_connections!
</span><span class='line'>end%
</span></code></pre></td></tr></table></div></figure>


<h3>Globals</h3>

<p>If you are bug hunting deep inside a gem or rails internals, and are trying to pry into a module that is loaded many times before it hits the buggy line of code, a simple <code>binding.pry</code> will have you stepping through an impossible amount of setup. Try setting a global variable to <code>true</code> right before the buggy line, and <code>binding.pry</code> on that condition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  api_playground  zeus <span class="nb">test</span> /Users/keighty/api_playground/test/models/user_test.rb -n <span class="s2">&quot;/test_user_description_has_full_name/&quot;</span>
</span><span class='line'>Run options: -n /test_user_description_has_full_name/ --seed 28811
</span><span class='line'>
</span><span class='line'><span class="c"># Running:</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>From: /Users/keighty/api_playground/app/models/user.rb @ line 5 User#full_name:
</span><span class='line'>
</span><span class='line'>    2: def full_name
</span><span class='line'>    3:   <span class="nv">$bedug</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">    </span>4:   <span class="s2">&quot;#{first_name} #{last_name}&quot;</span>
</span><span class='line'>    5:   binding.pry <span class="k">if</span> <span class="nv">$bedug</span>
</span><span class='line'>    6: end
</span></code></pre></td></tr></table></div></figure>


<p>A global will maintain its state no matter how many times the code is loaded, so be sure to set the variable to false if you are stepping past the first break.</p>

<h3>Caller</h3>

<p>Calling <code>caller</code> at a pry prompt will output the current execution stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1] pry(#&lt;User&gt;)&gt; caller
</span><span class='line'>=&gt; ["/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:355:in `eval'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:355:in `evaluate_ruby'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:323:in `handle_line'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:243:in `block (2 levels) in eval'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:242:in `catch'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:242:in `block in eval'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:241:in `catch'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_instance.rb:241:in `eval'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/repl.rb:77:in `block in repl'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/repl.rb:67:in `loop'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/repl.rb:67:in `repl'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/repl.rb:38:in `block in start'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/input_lock.rb:61:in `call'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/input_lock.rb:61:in `__with_ownership'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/input_lock.rb:79:in `with_ownership'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/repl.rb:38:in `start'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/repl.rb:15:in `start'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/pry_class.rb:169:in `start'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/pry-0.10.1/lib/pry/core_extensions.rb:43:in `pry'",
</span><span class='line'> "/Users/keighty/api_playground/app/models/user.rb:5:in `full_name'",
</span><span class='line'> "/Users/keighty/api_playground/test/models/user_test.rb:6:in `test_user_description_has_full_name'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:108:in `block (3 levels) in run'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:206:in `capture_exceptions'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:105:in `block (2 levels) in run'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:258:in `time_it'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:104:in `block in run'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest.rb:327:in `on_signal'",
</span><span class='line'>:</span></code></pre></td></tr></table></div></figure>


<p><code>caller</code> is a <a href="http://www.ruby-doc.org/core-2.2.0/Kernel.html#method-i-caller">Kernel method</a>. Pass a start line and a line limit to truncate the stack:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[11] pry(#&lt;User&gt;)&gt; caller(20, 5)
</span><span class='line'>=&gt; ["/Users/keighty/api_playground/app/models/user.rb:5:in `full_name'",
</span><span class='line'> "/Users/keighty/api_playground/test/models/user_test.rb:6:in `test_user_description_has_full_name'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:108:in `block (3 levels) in run'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:206:in `capture_exceptions'",
</span><span class='line'> "/usr/local/var/rbenv/versions/2.1.5/lib/ruby/gems/2.1.0/gems/minitest-5.5.1/lib/minitest/test.rb:105:in `block (2 levels) in run'"]</span></code></pre></td></tr></table></div></figure>


<p>The first 20 or so lines are usually from the pry session so they are easily ignored. I can see that the User.full_name method is being called from my test &mdash; a trivial case, but it comes in very handy when debugging a deeper stack.</p>

<h3>Errors</h3>

<p>When models have many association dependencies, satisfying the validations of many dependencies can be tricky without descriptive errors. In Rails 3.2, the error storage was changed from an <a href="http://www.rubydoc.info/docs/rails/3.0.0/ActiveModel/Errors">OrderedHash</a> to a first class ruby object in <a href="http://www.rubydoc.info/docs/rails/3.2.8/ActiveModel/Errors">ActiveModel</a>. While the interface has changed, its value remains:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1] pry(main)&gt; user = User.create
</span><span class='line'>=&gt; #&lt;User:0x007fa054525318
</span><span class='line'> id: nil,
</span><span class='line'> first_name: nil,
</span><span class='line'> last_name: nil,
</span><span class='line'> email: nil,
</span><span class='line'> created_at: nil,
</span><span class='line'> updated_at: nil&gt;
</span><span class='line'>
</span><span class='line'># Why does my object not have an id?
</span><span class='line'>
</span><span class='line'>[2] pry(main)&gt; user.errors
</span><span class='line'>=&gt; #&lt;ActiveModel::Errors:0x007fa05451fda0
</span><span class='line'> @base=
</span><span class='line'>  #&lt;User:0x007fa054525318
</span><span class='line'>   id: nil,
</span><span class='line'>   first_name: nil,
</span><span class='line'>   last_name: nil,
</span><span class='line'>   email: nil,
</span><span class='line'>   created_at: nil,
</span><span class='line'>   updated_at: nil&gt;,
</span><span class='line'> @messages={:first_name=&gt;["can't be blank"], :last_name=&gt;["can't be blank"]}&gt;
</span><span class='line'>
</span><span class='line'>[3] pry(main)&gt; user.errors.full_messages
</span><span class='line'>=&gt; ["First name can't be blank", "Last name can't be blank"]
</span><span class='line'>
</span><span class='line'># oooooh... validations
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
